<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1014" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="997.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="997.00"> </text><svg id="frames" x="10" width="1180" total_samples="167686"><g><title>hprof_slurp::parser::record_parser::parse_gc_instance_dump (567 samples, 0.34%)</title><rect x="0.0000%" y="917" width="0.3381%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="567"/><text x="0.2500%" y="927.50"></text></g><g><title>[[heap]] (598 samples, 0.36%)</title><rect x="0.0000%" y="933" width="0.3566%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="598"/><text x="0.2500%" y="943.50"></text></g><g><title>hprof_slurp::parser::record_parser::parse_gc_primitive_array_dump (25 samples, 0.01%)</title><rect x="0.3417%" y="917" width="0.0149%" height="15" fill="rgb(221,193,54)" fg:x="573" fg:w="25"/><text x="0.5917%" y="927.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (641 samples, 0.38%)</title><rect x="0.3620%" y="917" width="0.3823%" height="15" fill="rgb(248,212,6)" fg:x="607" fg:w="641"/><text x="0.6120%" y="927.50"></text></g><g><title>hprof_slurp::parser::record_parser::HprofRecordParser::parse_streaming (598 samples, 0.36%)</title><rect x="0.7598%" y="917" width="0.3566%" height="15" fill="rgb(208,68,35)" fg:x="1274" fg:w="598"/><text x="1.0098%" y="927.50"></text></g><g><title>hprof_slurp::parser::record_parser::lazy_many1::{{closure}} (598 samples, 0.36%)</title><rect x="0.7598%" y="901" width="0.3566%" height="15" fill="rgb(232,128,0)" fg:x="1274" fg:w="598"/><text x="1.0098%" y="911.50"></text></g><g><title>[anon] (1,278 samples, 0.76%)</title><rect x="0.3566%" y="933" width="0.7621%" height="15" fill="rgb(207,160,47)" fg:x="598" fg:w="1278"/><text x="0.6066%" y="943.50"></text></g><g><title>&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (1,767 samples, 1.05%)</title><rect x="1.1217%" y="917" width="1.0538%" height="15" fill="rgb(228,23,34)" fg:x="1881" fg:w="1767"/><text x="1.3717%" y="927.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (31 samples, 0.02%)</title><rect x="2.8667%" y="885" width="0.0185%" height="15" fill="rgb(218,30,26)" fg:x="4807" fg:w="31"/><text x="3.1167%" y="895.50"></text></g><g><title>core::ops::function::FnMut::call_mut (31 samples, 0.02%)</title><rect x="2.8667%" y="869" width="0.0185%" height="15" fill="rgb(220,122,19)" fg:x="4807" fg:w="31"/><text x="3.1167%" y="879.50"></text></g><g><title>hprof_slurp::parser::record_parser::parse_id (31 samples, 0.02%)</title><rect x="2.8667%" y="853" width="0.0185%" height="15" fill="rgb(250,228,42)" fg:x="4807" fg:w="31"/><text x="3.1167%" y="863.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,205 samples, 0.72%)</title><rect x="2.1755%" y="917" width="0.7186%" height="15" fill="rgb(240,193,28)" fg:x="3648" fg:w="1205"/><text x="2.4255%" y="927.50"></text></g><g><title>nom::multi::count::{{closure}} (46 samples, 0.03%)</title><rect x="2.8667%" y="901" width="0.0274%" height="15" fill="rgb(216,20,37)" fg:x="4807" fg:w="46"/><text x="3.1167%" y="911.50"></text></g><g><title>__GI___libc_malloc (20 samples, 0.01%)</title><rect x="2.8941%" y="917" width="0.0119%" height="15" fill="rgb(206,188,39)" fg:x="4853" fg:w="20"/><text x="3.1441%" y="927.50"></text></g><g><title>_int_malloc (49 samples, 0.03%)</title><rect x="2.9066%" y="917" width="0.0292%" height="15" fill="rgb(217,207,13)" fg:x="4874" fg:w="49"/><text x="3.1566%" y="927.50"></text></g><g><title>hprof_slurp::parser::gc_record::FieldType::from_value (18 samples, 0.01%)</title><rect x="2.9358%" y="917" width="0.0107%" height="15" fill="rgb(231,73,38)" fg:x="4923" fg:w="18"/><text x="3.1858%" y="927.50"></text></g><g><title>hprof_slurp::parser::primitive_parsers::parse_u64 (49 samples, 0.03%)</title><rect x="2.9472%" y="917" width="0.0292%" height="15" fill="rgb(225,20,46)" fg:x="4942" fg:w="49"/><text x="3.1972%" y="927.50"></text></g><g><title>hprof_slurp::parser::record_parser::parse_gc_instance_dump (617 samples, 0.37%)</title><rect x="2.9764%" y="917" width="0.3679%" height="15" fill="rgb(210,31,41)" fg:x="4991" fg:w="617"/><text x="3.2264%" y="927.50"></text></g><g><title>hprof_slurp::parser::record_parser::parse_gc_primitive_array_dump (24 samples, 0.01%)</title><rect x="3.3515%" y="917" width="0.0143%" height="15" fill="rgb(221,200,47)" fg:x="5620" fg:w="24"/><text x="3.6015%" y="927.50"></text></g><g><title>[unknown] (3,778 samples, 2.25%)</title><rect x="1.1211%" y="933" width="2.2530%" height="15" fill="rgb(226,26,5)" fg:x="1880" fg:w="3778"/><text x="1.3711%" y="943.50">[..</text></g><g><title>clear_page_erms (17 samples, 0.01%)</title><rect x="7.5725%" y="485" width="0.0101%" height="15" fill="rgb(249,33,26)" fg:x="12698" fg:w="17"/><text x="7.8225%" y="495.50"></text></g><g><title>get_page_from_freelist (25 samples, 0.01%)</title><rect x="7.5719%" y="501" width="0.0149%" height="15" fill="rgb(235,183,28)" fg:x="12697" fg:w="25"/><text x="7.8219%" y="511.50"></text></g><g><title>__alloc_pages (32 samples, 0.02%)</title><rect x="7.5683%" y="517" width="0.0191%" height="15" fill="rgb(221,5,38)" fg:x="12691" fg:w="32"/><text x="7.8183%" y="527.50"></text></g><g><title>alloc_pages_vma (34 samples, 0.02%)</title><rect x="7.5683%" y="533" width="0.0203%" height="15" fill="rgb(247,18,42)" fg:x="12691" fg:w="34"/><text x="7.8183%" y="543.50"></text></g><g><title>__handle_mm_fault (67 samples, 0.04%)</title><rect x="7.5594%" y="581" width="0.0400%" height="15" fill="rgb(241,131,45)" fg:x="12676" fg:w="67"/><text x="7.8094%" y="591.50"></text></g><g><title>handle_pte_fault (65 samples, 0.04%)</title><rect x="7.5606%" y="565" width="0.0388%" height="15" fill="rgb(249,31,29)" fg:x="12678" fg:w="65"/><text x="7.8106%" y="575.50"></text></g><g><title>do_anonymous_page (64 samples, 0.04%)</title><rect x="7.5612%" y="549" width="0.0382%" height="15" fill="rgb(225,111,53)" fg:x="12679" fg:w="64"/><text x="7.8112%" y="559.50"></text></g><g><title>do_user_addr_fault (79 samples, 0.05%)</title><rect x="7.5528%" y="613" width="0.0471%" height="15" fill="rgb(238,160,17)" fg:x="12665" fg:w="79"/><text x="7.8028%" y="623.50"></text></g><g><title>handle_mm_fault (69 samples, 0.04%)</title><rect x="7.5588%" y="597" width="0.0411%" height="15" fill="rgb(214,148,48)" fg:x="12675" fg:w="69"/><text x="7.8088%" y="607.50"></text></g><g><title>asm_exc_page_fault (84 samples, 0.05%)</title><rect x="7.5516%" y="645" width="0.0501%" height="15" fill="rgb(232,36,49)" fg:x="12663" fg:w="84"/><text x="7.8016%" y="655.50"></text></g><g><title>exc_page_fault (83 samples, 0.05%)</title><rect x="7.5522%" y="629" width="0.0495%" height="15" fill="rgb(209,103,24)" fg:x="12664" fg:w="83"/><text x="7.8022%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (7,103 samples, 4.24%)</title><rect x="3.3771%" y="709" width="4.2359%" height="15" fill="rgb(229,88,8)" fg:x="5663" fg:w="7103"/><text x="3.6271%" y="719.50">alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (7,103 samples, 4.24%)</title><rect x="3.3771%" y="693" width="4.2359%" height="15" fill="rgb(213,181,19)" fg:x="5663" fg:w="7103"/><text x="3.6271%" y="703.50">alloc..</text></g><g><title>core::intrinsics::copy_nonoverlapping (7,100 samples, 4.23%)</title><rect x="3.3789%" y="677" width="4.2341%" height="15" fill="rgb(254,191,54)" fg:x="5666" fg:w="7100"/><text x="3.6289%" y="687.50">core:..</text></g><g><title>__memcpy_avx_unaligned_erms (7,100 samples, 4.23%)</title><rect x="3.3789%" y="661" width="4.2341%" height="15" fill="rgb(241,83,37)" fg:x="5666" fg:w="7100"/><text x="3.6289%" y="671.50">__mem..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (25 samples, 0.01%)</title><rect x="7.6184%" y="693" width="0.0149%" height="15" fill="rgb(233,36,39)" fg:x="12775" fg:w="25"/><text x="7.8684%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (25 samples, 0.01%)</title><rect x="7.6184%" y="677" width="0.0149%" height="15" fill="rgb(226,3,54)" fg:x="12775" fg:w="25"/><text x="7.8684%" y="687.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.01%)</title><rect x="7.6184%" y="661" width="0.0149%" height="15" fill="rgb(245,192,40)" fg:x="12775" fg:w="25"/><text x="7.8684%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 0.01%)</title><rect x="7.6184%" y="645" width="0.0149%" height="15" fill="rgb(238,167,29)" fg:x="12775" fg:w="25"/><text x="7.8684%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.01%)</title><rect x="7.6184%" y="629" width="0.0149%" height="15" fill="rgb(232,182,51)" fg:x="12775" fg:w="25"/><text x="7.8684%" y="639.50"></text></g><g><title>__GI___libc_free (25 samples, 0.01%)</title><rect x="7.6184%" y="613" width="0.0149%" height="15" fill="rgb(231,60,39)" fg:x="12775" fg:w="25"/><text x="7.8684%" y="623.50"></text></g><g><title>__GI___munmap (25 samples, 0.01%)</title><rect x="7.6184%" y="597" width="0.0149%" height="15" fill="rgb(208,69,12)" fg:x="12775" fg:w="25"/><text x="7.8684%" y="607.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (25 samples, 0.01%)</title><rect x="7.6184%" y="581" width="0.0149%" height="15" fill="rgb(235,93,37)" fg:x="12775" fg:w="25"/><text x="7.8684%" y="591.50"></text></g><g><title>do_syscall_64 (25 samples, 0.01%)</title><rect x="7.6184%" y="565" width="0.0149%" height="15" fill="rgb(213,116,39)" fg:x="12775" fg:w="25"/><text x="7.8684%" y="575.50"></text></g><g><title>__x64_sys_munmap (25 samples, 0.01%)</title><rect x="7.6184%" y="549" width="0.0149%" height="15" fill="rgb(222,207,29)" fg:x="12775" fg:w="25"/><text x="7.8684%" y="559.50"></text></g><g><title>__vm_munmap (25 samples, 0.01%)</title><rect x="7.6184%" y="533" width="0.0149%" height="15" fill="rgb(206,96,30)" fg:x="12775" fg:w="25"/><text x="7.8684%" y="543.50"></text></g><g><title>__do_munmap (25 samples, 0.01%)</title><rect x="7.6184%" y="517" width="0.0149%" height="15" fill="rgb(218,138,4)" fg:x="12775" fg:w="25"/><text x="7.8684%" y="527.50"></text></g><g><title>unmap_region (25 samples, 0.01%)</title><rect x="7.6184%" y="501" width="0.0149%" height="15" fill="rgb(250,191,14)" fg:x="12775" fg:w="25"/><text x="7.8684%" y="511.50"></text></g><g><title>unmap_vmas (24 samples, 0.01%)</title><rect x="7.6190%" y="485" width="0.0143%" height="15" fill="rgb(239,60,40)" fg:x="12776" fg:w="24"/><text x="7.8690%" y="495.50"></text></g><g><title>unmap_single_vma (24 samples, 0.01%)</title><rect x="7.6190%" y="469" width="0.0143%" height="15" fill="rgb(206,27,48)" fg:x="12776" fg:w="24"/><text x="7.8690%" y="479.50"></text></g><g><title>unmap_page_range (24 samples, 0.01%)</title><rect x="7.6190%" y="453" width="0.0143%" height="15" fill="rgb(225,35,8)" fg:x="12776" fg:w="24"/><text x="7.8690%" y="463.50"></text></g><g><title>zap_pmd_range.isra.0 (24 samples, 0.01%)</title><rect x="7.6190%" y="437" width="0.0143%" height="15" fill="rgb(250,213,24)" fg:x="12776" fg:w="24"/><text x="7.8690%" y="447.50"></text></g><g><title>zap_pte_range (24 samples, 0.01%)</title><rect x="7.6190%" y="421" width="0.0143%" height="15" fill="rgb(247,123,22)" fg:x="12776" fg:w="24"/><text x="7.8690%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hprof_slurp::parser::record_stream_parser::HprofRecordStreamParser::start::{{closure}}&gt; (36 samples, 0.02%)</title><rect x="7.6148%" y="709" width="0.0215%" height="15" fill="rgb(231,138,38)" fg:x="12769" fg:w="36"/><text x="7.8648%" y="719.50"></text></g><g><title>__sysvec_apic_timer_interrupt (17 samples, 0.01%)</title><rect x="22.4664%" y="597" width="0.0101%" height="15" fill="rgb(231,145,46)" fg:x="37673" fg:w="17"/><text x="22.7164%" y="607.50"></text></g><g><title>hrtimer_interrupt (17 samples, 0.01%)</title><rect x="22.4664%" y="581" width="0.0101%" height="15" fill="rgb(251,118,11)" fg:x="37673" fg:w="17"/><text x="22.7164%" y="591.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (20 samples, 0.01%)</title><rect x="22.4664%" y="629" width="0.0119%" height="15" fill="rgb(217,147,25)" fg:x="37673" fg:w="20"/><text x="22.7164%" y="639.50"></text></g><g><title>sysvec_apic_timer_interrupt (20 samples, 0.01%)</title><rect x="22.4664%" y="613" width="0.0119%" height="15" fill="rgb(247,81,37)" fg:x="37673" fg:w="20"/><text x="22.7164%" y="623.50"></text></g><g><title>__sysvec_apic_timer_interrupt (28 samples, 0.02%)</title><rect x="36.5296%" y="581" width="0.0167%" height="15" fill="rgb(209,12,38)" fg:x="61255" fg:w="28"/><text x="36.7796%" y="591.50"></text></g><g><title>hrtimer_interrupt (28 samples, 0.02%)</title><rect x="36.5296%" y="565" width="0.0167%" height="15" fill="rgb(227,1,9)" fg:x="61255" fg:w="28"/><text x="36.7796%" y="575.50"></text></g><g><title>__hrtimer_run_queues (26 samples, 0.02%)</title><rect x="36.5308%" y="549" width="0.0155%" height="15" fill="rgb(248,47,43)" fg:x="61257" fg:w="26"/><text x="36.7808%" y="559.50"></text></g><g><title>tick_sched_timer (21 samples, 0.01%)</title><rect x="36.5338%" y="533" width="0.0125%" height="15" fill="rgb(221,10,30)" fg:x="61262" fg:w="21"/><text x="36.7838%" y="543.50"></text></g><g><title>tick_sched_handle (19 samples, 0.01%)</title><rect x="36.5350%" y="517" width="0.0113%" height="15" fill="rgb(210,229,1)" fg:x="61264" fg:w="19"/><text x="36.7850%" y="527.50"></text></g><g><title>update_process_times (19 samples, 0.01%)</title><rect x="36.5350%" y="501" width="0.0113%" height="15" fill="rgb(222,148,37)" fg:x="61264" fg:w="19"/><text x="36.7850%" y="511.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (37 samples, 0.02%)</title><rect x="36.5296%" y="613" width="0.0221%" height="15" fill="rgb(234,67,33)" fg:x="61255" fg:w="37"/><text x="36.7796%" y="623.50"></text></g><g><title>sysvec_apic_timer_interrupt (37 samples, 0.02%)</title><rect x="36.5296%" y="597" width="0.0221%" height="15" fill="rgb(247,98,35)" fg:x="61255" fg:w="37"/><text x="36.7796%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (34,213 samples, 20.40%)</title><rect x="16.1492%" y="645" width="20.4030%" height="15" fill="rgb(247,138,52)" fg:x="27080" fg:w="34213"/><text x="16.3992%" y="655.50">core::result::Result&lt;T,E&gt;::map</text></g><g><title>hprof_slurp::parser::record_parser::HprofRecordParser::parse_hprof_record::{{closure}}::{{closure}} (23,600 samples, 14.07%)</title><rect x="22.4783%" y="629" width="14.0739%" height="15" fill="rgb(213,79,30)" fg:x="37693" fg:w="23600"/><text x="22.7283%" y="639.50">hprof_slurp::parser::..</text></g><g><title>hprof_slurp::parser::primitive_parsers::parse_u8 (1,159 samples, 0.69%)</title><rect x="36.9357%" y="581" width="0.6912%" height="15" fill="rgb(246,177,23)" fg:x="61936" fg:w="1159"/><text x="37.1857%" y="591.50"></text></g><g><title>nom::number::streaming::be_u8 (1,159 samples, 0.69%)</title><rect x="36.9357%" y="565" width="0.6912%" height="15" fill="rgb(230,62,27)" fg:x="61936" fg:w="1159"/><text x="37.1857%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,157 samples, 0.69%)</title><rect x="36.9369%" y="549" width="0.6900%" height="15" fill="rgb(216,154,8)" fg:x="61938" fg:w="1157"/><text x="37.1869%" y="559.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (1,157 samples, 0.69%)</title><rect x="36.9369%" y="533" width="0.6900%" height="15" fill="rgb(244,35,45)" fg:x="61938" fg:w="1157"/><text x="37.1869%" y="543.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (563 samples, 0.34%)</title><rect x="43.9399%" y="517" width="0.3357%" height="15" fill="rgb(251,115,12)" fg:x="73681" fg:w="563"/><text x="44.1899%" y="527.50"></text></g><g><title>nom::bytes::streaming::take::{{closure}} (563 samples, 0.34%)</title><rect x="43.9399%" y="501" width="0.3357%" height="15" fill="rgb(240,54,50)" fg:x="73681" fg:w="563"/><text x="44.1899%" y="511.50"></text></g><g><title>&lt;&amp;[u8] as nom::traits::InputIter&gt;::slice_index (563 samples, 0.34%)</title><rect x="43.9399%" y="485" width="0.3357%" height="15" fill="rgb(233,84,52)" fg:x="73681" fg:w="563"/><text x="44.1899%" y="495.50"></text></g><g><title>nom::combinator::map::{{closure}} (1,717 samples, 1.02%)</title><rect x="43.2547%" y="533" width="1.0239%" height="15" fill="rgb(207,117,47)" fg:x="72532" fg:w="1717"/><text x="43.5047%" y="543.50"></text></g><g><title>hprof_slurp::parser::primitive_parsers::parse_u32 (1,876 samples, 1.12%)</title><rect x="46.2919%" y="469" width="1.1188%" height="15" fill="rgb(249,43,39)" fg:x="77625" fg:w="1876"/><text x="46.5419%" y="479.50"></text></g><g><title>nom::number::streaming::be_u32 (1,876 samples, 1.12%)</title><rect x="46.2919%" y="453" width="1.1188%" height="15" fill="rgb(209,38,44)" fg:x="77625" fg:w="1876"/><text x="46.5419%" y="463.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4,972 samples, 2.97%)</title><rect x="46.2919%" y="501" width="2.9651%" height="15" fill="rgb(236,212,23)" fg:x="77625" fg:w="4972"/><text x="46.5419%" y="511.50">&lt;F ..</text></g><g><title>core::ops::function::FnMut::call_mut (4,972 samples, 2.97%)</title><rect x="46.2919%" y="485" width="2.9651%" height="15" fill="rgb(242,79,21)" fg:x="77625" fg:w="4972"/><text x="46.5419%" y="495.50">cor..</text></g><g><title>hprof_slurp::parser::record_parser::parse_id (3,096 samples, 1.85%)</title><rect x="47.4106%" y="469" width="1.8463%" height="15" fill="rgb(211,96,35)" fg:x="79501" fg:w="3096"/><text x="47.6606%" y="479.50">h..</text></g><g><title>hprof_slurp::parser::primitive_parsers::parse_u64 (3,096 samples, 1.85%)</title><rect x="47.4106%" y="453" width="1.8463%" height="15" fill="rgb(253,215,40)" fg:x="79501" fg:w="3096"/><text x="47.6606%" y="463.50">h..</text></g><g><title>nom::number::streaming::be_u64 (3,096 samples, 1.85%)</title><rect x="47.4106%" y="437" width="1.8463%" height="15" fill="rgb(211,81,21)" fg:x="79501" fg:w="3096"/><text x="47.6606%" y="447.50">n..</text></g><g><title>&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (8,355 samples, 4.98%)</title><rect x="44.2786%" y="517" width="4.9825%" height="15" fill="rgb(208,190,38)" fg:x="74249" fg:w="8355"/><text x="44.5286%" y="527.50">&lt;(FnA,..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (10,073 samples, 6.01%)</title><rect x="43.2547%" y="549" width="6.0071%" height="15" fill="rgb(235,213,38)" fg:x="72532" fg:w="10073"/><text x="43.5047%" y="559.50">&lt;F as no..</text></g><g><title>nom::sequence::tuple::{{closure}} (8,356 samples, 4.98%)</title><rect x="44.2786%" y="533" width="4.9831%" height="15" fill="rgb(237,122,38)" fg:x="74249" fg:w="8356"/><text x="44.5286%" y="543.50">nom::s..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (594 samples, 0.35%)</title><rect x="49.2617%" y="549" width="0.3542%" height="15" fill="rgb(244,218,35)" fg:x="82605" fg:w="594"/><text x="49.5117%" y="559.50"></text></g><g><title>hprof_slurp::parser::record_parser::parse_gc_instance_dump (20,110 samples, 11.99%)</title><rect x="37.6310%" y="581" width="11.9927%" height="15" fill="rgb(240,68,47)" fg:x="63102" fg:w="20110"/><text x="37.8810%" y="591.50">hprof_slurp::parse..</text></g><g><title>nom::combinator::flat_map::{{closure}} (18,369 samples, 10.95%)</title><rect x="38.6693%" y="565" width="10.9544%" height="15" fill="rgb(210,16,53)" fg:x="64843" fg:w="18369"/><text x="38.9193%" y="575.50">nom::combinator:..</text></g><g><title>&lt;&amp;[T] as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (24 samples, 0.01%)</title><rect x="49.9624%" y="437" width="0.0143%" height="15" fill="rgb(235,124,12)" fg:x="83780" fg:w="24"/><text x="50.2124%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (24 samples, 0.01%)</title><rect x="49.9624%" y="421" width="0.0143%" height="15" fill="rgb(224,169,11)" fg:x="83780" fg:w="24"/><text x="50.2124%" y="431.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (24 samples, 0.01%)</title><rect x="49.9624%" y="405" width="0.0143%" height="15" fill="rgb(250,166,2)" fg:x="83780" fg:w="24"/><text x="50.2124%" y="415.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (24 samples, 0.01%)</title><rect x="49.9624%" y="389" width="0.0143%" height="15" fill="rgb(242,216,29)" fg:x="83780" fg:w="24"/><text x="50.2124%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (24 samples, 0.01%)</title><rect x="49.9624%" y="373" width="0.0143%" height="15" fill="rgb(230,116,27)" fg:x="83780" fg:w="24"/><text x="50.2124%" y="383.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (551 samples, 0.33%)</title><rect x="49.7382%" y="517" width="0.3286%" height="15" fill="rgb(228,99,48)" fg:x="83404" fg:w="551"/><text x="49.9882%" y="527.50"></text></g><g><title>core::ops::function::FnMut::call_mut (551 samples, 0.33%)</title><rect x="49.7382%" y="501" width="0.3286%" height="15" fill="rgb(253,11,6)" fg:x="83404" fg:w="551"/><text x="49.9882%" y="511.50"></text></g><g><title>hprof_slurp::parser::record_parser::parse_id (551 samples, 0.33%)</title><rect x="49.7382%" y="485" width="0.3286%" height="15" fill="rgb(247,143,39)" fg:x="83404" fg:w="551"/><text x="49.9882%" y="495.50"></text></g><g><title>hprof_slurp::parser::primitive_parsers::parse_u64 (502 samples, 0.30%)</title><rect x="49.7674%" y="469" width="0.2994%" height="15" fill="rgb(236,97,10)" fg:x="83453" fg:w="502"/><text x="50.0174%" y="479.50"></text></g><g><title>nom::number::streaming::be_u64 (482 samples, 0.29%)</title><rect x="49.7793%" y="453" width="0.2874%" height="15" fill="rgb(233,208,19)" fg:x="83473" fg:w="482"/><text x="50.0293%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (151 samples, 0.09%)</title><rect x="49.9767%" y="437" width="0.0900%" height="15" fill="rgb(216,164,2)" fg:x="83804" fg:w="151"/><text x="50.2267%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (151 samples, 0.09%)</title><rect x="49.9767%" y="421" width="0.0900%" height="15" fill="rgb(220,129,5)" fg:x="83804" fg:w="151"/><text x="50.2267%" y="431.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (151 samples, 0.09%)</title><rect x="49.9767%" y="405" width="0.0900%" height="15" fill="rgb(242,17,10)" fg:x="83804" fg:w="151"/><text x="50.2267%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (20 samples, 0.01%)</title><rect x="50.1145%" y="501" width="0.0119%" height="15" fill="rgb(242,107,0)" fg:x="84035" fg:w="20"/><text x="50.3645%" y="511.50"></text></g><g><title>__mem_cgroup_charge (19 samples, 0.01%)</title><rect x="50.1640%" y="373" width="0.0113%" height="15" fill="rgb(251,28,31)" fg:x="84118" fg:w="19"/><text x="50.4140%" y="383.50"></text></g><g><title>clear_page_erms (19 samples, 0.01%)</title><rect x="50.1789%" y="325" width="0.0113%" height="15" fill="rgb(233,223,10)" fg:x="84143" fg:w="19"/><text x="50.4289%" y="335.50"></text></g><g><title>alloc_pages_vma (31 samples, 0.02%)</title><rect x="50.1765%" y="373" width="0.0185%" height="15" fill="rgb(215,21,27)" fg:x="84139" fg:w="31"/><text x="50.4265%" y="383.50"></text></g><g><title>__alloc_pages (30 samples, 0.02%)</title><rect x="50.1771%" y="357" width="0.0179%" height="15" fill="rgb(232,23,21)" fg:x="84140" fg:w="30"/><text x="50.4271%" y="367.50"></text></g><g><title>get_page_from_freelist (28 samples, 0.02%)</title><rect x="50.1783%" y="341" width="0.0167%" height="15" fill="rgb(244,5,23)" fg:x="84142" fg:w="28"/><text x="50.4283%" y="351.50"></text></g><g><title>do_anonymous_page (68 samples, 0.04%)</title><rect x="50.1616%" y="389" width="0.0406%" height="15" fill="rgb(226,81,46)" fg:x="84114" fg:w="68"/><text x="50.4116%" y="399.50"></text></g><g><title>handle_pte_fault (69 samples, 0.04%)</title><rect x="50.1616%" y="405" width="0.0411%" height="15" fill="rgb(247,70,30)" fg:x="84114" fg:w="69"/><text x="50.4116%" y="415.50"></text></g><g><title>do_user_addr_fault (78 samples, 0.05%)</title><rect x="50.1568%" y="453" width="0.0465%" height="15" fill="rgb(212,68,19)" fg:x="84106" fg:w="78"/><text x="50.4068%" y="463.50"></text></g><g><title>handle_mm_fault (75 samples, 0.04%)</title><rect x="50.1586%" y="437" width="0.0447%" height="15" fill="rgb(240,187,13)" fg:x="84109" fg:w="75"/><text x="50.4086%" y="447.50"></text></g><g><title>__handle_mm_fault (71 samples, 0.04%)</title><rect x="50.1610%" y="421" width="0.0423%" height="15" fill="rgb(223,113,26)" fg:x="84113" fg:w="71"/><text x="50.4110%" y="431.50"></text></g><g><title>exc_page_fault (81 samples, 0.05%)</title><rect x="50.1568%" y="469" width="0.0483%" height="15" fill="rgb(206,192,2)" fg:x="84106" fg:w="81"/><text x="50.4068%" y="479.50"></text></g><g><title>asm_exc_page_fault (83 samples, 0.05%)</title><rect x="50.1562%" y="485" width="0.0495%" height="15" fill="rgb(241,108,4)" fg:x="84105" fg:w="83"/><text x="50.4062%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (246 samples, 0.15%)</title><rect x="50.0668%" y="517" width="0.1467%" height="15" fill="rgb(247,173,49)" fg:x="83955" fg:w="246"/><text x="50.3168%" y="527.50"></text></g><g><title>core::ptr::write (146 samples, 0.09%)</title><rect x="50.1264%" y="501" width="0.0871%" height="15" fill="rgb(224,114,35)" fg:x="84055" fg:w="146"/><text x="50.3764%" y="511.50"></text></g><g><title>__x64_sys_futex (23 samples, 0.01%)</title><rect x="50.3310%" y="341" width="0.0137%" height="15" fill="rgb(245,159,27)" fg:x="84398" fg:w="23"/><text x="50.5810%" y="351.50"></text></g><g><title>do_futex (23 samples, 0.01%)</title><rect x="50.3310%" y="325" width="0.0137%" height="15" fill="rgb(245,172,44)" fg:x="84398" fg:w="23"/><text x="50.5810%" y="335.50"></text></g><g><title>futex_wake (23 samples, 0.01%)</title><rect x="50.3310%" y="309" width="0.0137%" height="15" fill="rgb(236,23,11)" fg:x="84398" fg:w="23"/><text x="50.5810%" y="319.50"></text></g><g><title>__GI___lll_lock_wake_private (24 samples, 0.01%)</title><rect x="50.3310%" y="389" width="0.0143%" height="15" fill="rgb(205,117,38)" fg:x="84398" fg:w="24"/><text x="50.5810%" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (24 samples, 0.01%)</title><rect x="50.3310%" y="373" width="0.0143%" height="15" fill="rgb(237,72,25)" fg:x="84398" fg:w="24"/><text x="50.5810%" y="383.50"></text></g><g><title>do_syscall_64 (24 samples, 0.01%)</title><rect x="50.3310%" y="357" width="0.0143%" height="15" fill="rgb(244,70,9)" fg:x="84398" fg:w="24"/><text x="50.5810%" y="367.50"></text></g><g><title>malloc_consolidate (404 samples, 0.24%)</title><rect x="50.8087%" y="373" width="0.2409%" height="15" fill="rgb(217,125,39)" fg:x="85199" fg:w="404"/><text x="51.0587%" y="383.50"></text></g><g><title>unlink_chunk (100 samples, 0.06%)</title><rect x="50.9899%" y="357" width="0.0596%" height="15" fill="rgb(235,36,10)" fg:x="85503" fg:w="100"/><text x="51.2399%" y="367.50"></text></g><g><title>_int_malloc (1,270 samples, 0.76%)</title><rect x="50.3453%" y="389" width="0.7574%" height="15" fill="rgb(251,123,47)" fg:x="84422" fg:w="1270"/><text x="50.5953%" y="399.50"></text></g><g><title>unlink_chunk (78 samples, 0.05%)</title><rect x="51.0561%" y="373" width="0.0465%" height="15" fill="rgb(221,13,13)" fg:x="85614" fg:w="78"/><text x="51.3061%" y="383.50"></text></g><g><title>__GI___libc_malloc (1,563 samples, 0.93%)</title><rect x="50.2195%" y="405" width="0.9321%" height="15" fill="rgb(238,131,9)" fg:x="84211" fg:w="1563"/><text x="50.4695%" y="415.50"></text></g><g><title>tcache_get (76 samples, 0.05%)</title><rect x="51.1062%" y="389" width="0.0453%" height="15" fill="rgb(211,50,8)" fg:x="85698" fg:w="76"/><text x="51.3562%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,579 samples, 0.94%)</title><rect x="50.2195%" y="453" width="0.9416%" height="15" fill="rgb(245,182,24)" fg:x="84211" fg:w="1579"/><text x="50.4695%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,579 samples, 0.94%)</title><rect x="50.2195%" y="437" width="0.9416%" height="15" fill="rgb(242,14,37)" fg:x="84211" fg:w="1579"/><text x="50.4695%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1,579 samples, 0.94%)</title><rect x="50.2195%" y="421" width="0.9416%" height="15" fill="rgb(246,228,12)" fg:x="84211" fg:w="1579"/><text x="50.4695%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,585 samples, 0.95%)</title><rect x="50.2165%" y="485" width="0.9452%" height="15" fill="rgb(213,55,15)" fg:x="84206" fg:w="1585"/><text x="50.4665%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,585 samples, 0.95%)</title><rect x="50.2165%" y="469" width="0.9452%" height="15" fill="rgb(209,9,3)" fg:x="84206" fg:w="1585"/><text x="50.4665%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,591 samples, 0.95%)</title><rect x="50.2135%" y="517" width="0.9488%" height="15" fill="rgb(230,59,30)" fg:x="84201" fg:w="1591"/><text x="50.4635%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,591 samples, 0.95%)</title><rect x="50.2135%" y="501" width="0.9488%" height="15" fill="rgb(209,121,21)" fg:x="84201" fg:w="1591"/><text x="50.4635%" y="511.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2,498 samples, 1.49%)</title><rect x="49.6821%" y="549" width="1.4897%" height="15" fill="rgb(220,109,13)" fg:x="83310" fg:w="2498"/><text x="49.9321%" y="559.50"></text></g><g><title>nom::multi::count::{{closure}} (2,494 samples, 1.49%)</title><rect x="49.6845%" y="533" width="1.4873%" height="15" fill="rgb(232,18,1)" fg:x="83314" fg:w="2494"/><text x="49.9345%" y="543.50"></text></g><g><title>nom::combinator::map::{{closure}} (2,526 samples, 1.51%)</title><rect x="49.6726%" y="565" width="1.5064%" height="15" fill="rgb(215,41,42)" fg:x="83294" fg:w="2526"/><text x="49.9226%" y="575.50"></text></g><g><title>hprof_slurp::parser::record_parser::parse_gc_object_array_dump (2,621 samples, 1.56%)</title><rect x="49.6237%" y="581" width="1.5630%" height="15" fill="rgb(224,123,36)" fg:x="83212" fg:w="2621"/><text x="49.8737%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (97 samples, 0.06%)</title><rect x="51.2321%" y="533" width="0.0578%" height="15" fill="rgb(240,125,3)" fg:x="85909" fg:w="97"/><text x="51.4821%" y="543.50"></text></g><g><title>hprof_slurp::parser::primitive_parsers::parse_i32 (27 samples, 0.02%)</title><rect x="51.3591%" y="453" width="0.0161%" height="15" fill="rgb(205,98,50)" fg:x="86122" fg:w="27"/><text x="51.6091%" y="463.50"></text></g><g><title>nom::number::streaming::be_i32 (27 samples, 0.02%)</title><rect x="51.3591%" y="437" width="0.0161%" height="15" fill="rgb(205,185,37)" fg:x="86122" fg:w="27"/><text x="51.6091%" y="447.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (27 samples, 0.02%)</title><rect x="51.3591%" y="421" width="0.0161%" height="15" fill="rgb(238,207,15)" fg:x="86122" fg:w="27"/><text x="51.6091%" y="431.50"></text></g><g><title>nom::combinator::map::{{closure}} (27 samples, 0.02%)</title><rect x="51.3591%" y="405" width="0.0161%" height="15" fill="rgb(213,199,42)" fg:x="86122" fg:w="27"/><text x="51.6091%" y="415.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (27 samples, 0.02%)</title><rect x="51.3591%" y="389" width="0.0161%" height="15" fill="rgb(235,201,11)" fg:x="86122" fg:w="27"/><text x="51.6091%" y="399.50"></text></g><g><title>nom::number::streaming::be_i32::{{closure}} (27 samples, 0.02%)</title><rect x="51.3591%" y="373" width="0.0161%" height="15" fill="rgb(207,46,11)" fg:x="86122" fg:w="27"/><text x="51.6091%" y="383.50"></text></g><g><title>nom::number::streaming::be_u32 (27 samples, 0.02%)</title><rect x="51.3591%" y="357" width="0.0161%" height="15" fill="rgb(241,35,35)" fg:x="86122" fg:w="27"/><text x="51.6091%" y="367.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (313 samples, 0.19%)</title><rect x="51.3585%" y="485" width="0.1867%" height="15" fill="rgb(243,32,47)" fg:x="86121" fg:w="313"/><text x="51.6085%" y="495.50"></text></g><g><title>core::ops::function::FnMut::call_mut (313 samples, 0.19%)</title><rect x="51.3585%" y="469" width="0.1867%" height="15" fill="rgb(247,202,23)" fg:x="86121" fg:w="313"/><text x="51.6085%" y="479.50"></text></g><g><title>hprof_slurp::parser::primitive_parsers::parse_i8 (281 samples, 0.17%)</title><rect x="51.3776%" y="453" width="0.1676%" height="15" fill="rgb(219,102,11)" fg:x="86153" fg:w="281"/><text x="51.6276%" y="463.50"></text></g><g><title>nom::number::streaming::be_i8 (281 samples, 0.17%)</title><rect x="51.3776%" y="437" width="0.1676%" height="15" fill="rgb(243,110,44)" fg:x="86153" fg:w="281"/><text x="51.6276%" y="447.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (281 samples, 0.17%)</title><rect x="51.3776%" y="421" width="0.1676%" height="15" fill="rgb(222,74,54)" fg:x="86153" fg:w="281"/><text x="51.6276%" y="431.50"></text></g><g><title>nom::combinator::map::{{closure}} (281 samples, 0.17%)</title><rect x="51.3776%" y="405" width="0.1676%" height="15" fill="rgb(216,99,12)" fg:x="86153" fg:w="281"/><text x="51.6276%" y="415.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (281 samples, 0.17%)</title><rect x="51.3776%" y="389" width="0.1676%" height="15" fill="rgb(226,22,26)" fg:x="86153" fg:w="281"/><text x="51.6276%" y="399.50"></text></g><g><title>nom::number::streaming::be_i8::{{closure}} (281 samples, 0.17%)</title><rect x="51.3776%" y="373" width="0.1676%" height="15" fill="rgb(217,163,10)" fg:x="86153" fg:w="281"/><text x="51.6276%" y="383.50"></text></g><g><title>nom::number::streaming::be_u8 (281 samples, 0.17%)</title><rect x="51.3776%" y="357" width="0.1676%" height="15" fill="rgb(213,25,53)" fg:x="86153" fg:w="281"/><text x="51.6276%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (108 samples, 0.06%)</title><rect x="51.4807%" y="341" width="0.0644%" height="15" fill="rgb(252,105,26)" fg:x="86326" fg:w="108"/><text x="51.7307%" y="351.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (108 samples, 0.06%)</title><rect x="51.4807%" y="325" width="0.0644%" height="15" fill="rgb(220,39,43)" fg:x="86326" fg:w="108"/><text x="51.7307%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (115 samples, 0.07%)</title><rect x="51.9471%" y="469" width="0.0686%" height="15" fill="rgb(229,68,48)" fg:x="87108" fg:w="115"/><text x="52.1971%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,178 samples, 0.70%)</title><rect x="51.5451%" y="485" width="0.7025%" height="15" fill="rgb(252,8,32)" fg:x="86434" fg:w="1178"/><text x="51.7951%" y="495.50"></text></g><g><title>core::ptr::write (387 samples, 0.23%)</title><rect x="52.0169%" y="469" width="0.2308%" height="15" fill="rgb(223,20,43)" fg:x="87225" fg:w="387"/><text x="52.2669%" y="479.50"></text></g><g><title>futex_wake (20 samples, 0.01%)</title><rect x="52.6597%" y="277" width="0.0119%" height="15" fill="rgb(229,81,49)" fg:x="88303" fg:w="20"/><text x="52.9097%" y="287.50"></text></g><g><title>__x64_sys_futex (23 samples, 0.01%)</title><rect x="52.6585%" y="309" width="0.0137%" height="15" fill="rgb(236,28,36)" fg:x="88301" fg:w="23"/><text x="52.9085%" y="319.50"></text></g><g><title>do_futex (22 samples, 0.01%)</title><rect x="52.6591%" y="293" width="0.0131%" height="15" fill="rgb(249,185,26)" fg:x="88302" fg:w="22"/><text x="52.9091%" y="303.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (27 samples, 0.02%)</title><rect x="52.6579%" y="341" width="0.0161%" height="15" fill="rgb(249,174,33)" fg:x="88300" fg:w="27"/><text x="52.9079%" y="351.50"></text></g><g><title>do_syscall_64 (27 samples, 0.02%)</title><rect x="52.6579%" y="325" width="0.0161%" height="15" fill="rgb(233,201,37)" fg:x="88300" fg:w="27"/><text x="52.9079%" y="335.50"></text></g><g><title>__GI___lll_lock_wake_private (35 samples, 0.02%)</title><rect x="52.6544%" y="357" width="0.0209%" height="15" fill="rgb(221,78,26)" fg:x="88294" fg:w="35"/><text x="52.9044%" y="367.50"></text></g><g><title>checked_request2size (17 samples, 0.01%)</title><rect x="53.5543%" y="341" width="0.0101%" height="15" fill="rgb(250,127,30)" fg:x="89803" fg:w="17"/><text x="53.8043%" y="351.50"></text></g><g><title>malloc_consolidate (351 samples, 0.21%)</title><rect x="53.5644%" y="341" width="0.2093%" height="15" fill="rgb(230,49,44)" fg:x="89820" fg:w="351"/><text x="53.8144%" y="351.50"></text></g><g><title>unlink_chunk (83 samples, 0.05%)</title><rect x="53.7242%" y="325" width="0.0495%" height="15" fill="rgb(229,67,23)" fg:x="90088" fg:w="83"/><text x="53.9742%" y="335.50"></text></g><g><title>tcache_put (23 samples, 0.01%)</title><rect x="53.7761%" y="341" width="0.0137%" height="15" fill="rgb(249,83,47)" fg:x="90175" fg:w="23"/><text x="54.0261%" y="351.50"></text></g><g><title>_int_malloc (1,989 samples, 1.19%)</title><rect x="52.6752%" y="357" width="1.1861%" height="15" fill="rgb(215,43,3)" fg:x="88329" fg:w="1989"/><text x="52.9252%" y="367.50"></text></g><g><title>unlink_chunk (120 samples, 0.07%)</title><rect x="53.7898%" y="341" width="0.0716%" height="15" fill="rgb(238,154,13)" fg:x="90198" fg:w="120"/><text x="54.0398%" y="351.50"></text></g><g><title>arena_for_chunk (31 samples, 0.02%)</title><rect x="53.8614%" y="357" width="0.0185%" height="15" fill="rgb(219,56,2)" fg:x="90318" fg:w="31"/><text x="54.1114%" y="367.50"></text></g><g><title>arena_for_chunk (23 samples, 0.01%)</title><rect x="53.8662%" y="341" width="0.0137%" height="15" fill="rgb(233,0,4)" fg:x="90326" fg:w="23"/><text x="54.1162%" y="351.50"></text></g><g><title>__GI___libc_malloc (2,779 samples, 1.66%)</title><rect x="52.2709%" y="373" width="1.6573%" height="15" fill="rgb(235,30,7)" fg:x="87651" fg:w="2779"/><text x="52.5209%" y="383.50"></text></g><g><title>tcache_get (70 samples, 0.04%)</title><rect x="53.8864%" y="357" width="0.0417%" height="15" fill="rgb(250,79,13)" fg:x="90360" fg:w="70"/><text x="54.1364%" y="367.50"></text></g><g><title>__rdl_alloc (27 samples, 0.02%)</title><rect x="53.9282%" y="373" width="0.0161%" height="15" fill="rgb(211,146,34)" fg:x="90430" fg:w="27"/><text x="54.1782%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (27 samples, 0.02%)</title><rect x="53.9282%" y="357" width="0.0161%" height="15" fill="rgb(228,22,38)" fg:x="90430" fg:w="27"/><text x="54.1782%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,830 samples, 1.69%)</title><rect x="52.2685%" y="421" width="1.6877%" height="15" fill="rgb(235,168,5)" fg:x="87647" fg:w="2830"/><text x="52.5185%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,830 samples, 1.69%)</title><rect x="52.2685%" y="405" width="1.6877%" height="15" fill="rgb(221,155,16)" fg:x="87647" fg:w="2830"/><text x="52.5185%" y="415.50"></text></g><g><title>alloc::alloc::alloc (2,830 samples, 1.69%)</title><rect x="52.2685%" y="389" width="1.6877%" height="15" fill="rgb(215,215,53)" fg:x="87647" fg:w="2830"/><text x="52.5185%" y="399.50"></text></g><g><title>__rust_alloc (20 samples, 0.01%)</title><rect x="53.9443%" y="373" width="0.0119%" height="15" fill="rgb(223,4,10)" fg:x="90457" fg:w="20"/><text x="54.1943%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,867 samples, 1.71%)</title><rect x="52.2477%" y="485" width="1.7097%" height="15" fill="rgb(234,103,6)" fg:x="87612" fg:w="2867"/><text x="52.4977%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,867 samples, 1.71%)</title><rect x="52.2477%" y="469" width="1.7097%" height="15" fill="rgb(227,97,0)" fg:x="87612" fg:w="2867"/><text x="52.4977%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,849 samples, 1.70%)</title><rect x="52.2584%" y="453" width="1.6990%" height="15" fill="rgb(234,150,53)" fg:x="87630" fg:w="2849"/><text x="52.5084%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2,849 samples, 1.70%)</title><rect x="52.2584%" y="437" width="1.6990%" height="15" fill="rgb(228,201,54)" fg:x="87630" fg:w="2849"/><text x="52.5084%" y="447.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (58 samples, 0.03%)</title><rect x="53.9610%" y="453" width="0.0346%" height="15" fill="rgb(222,22,37)" fg:x="90485" fg:w="58"/><text x="54.2110%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (58 samples, 0.03%)</title><rect x="53.9610%" y="437" width="0.0346%" height="15" fill="rgb(237,53,32)" fg:x="90485" fg:w="58"/><text x="54.2110%" y="447.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4,666 samples, 2.78%)</title><rect x="51.2977%" y="517" width="2.7826%" height="15" fill="rgb(233,25,53)" fg:x="86019" fg:w="4666"/><text x="51.5477%" y="527.50">&lt;F..</text></g><g><title>nom::multi::count::{{closure}} (4,651 samples, 2.77%)</title><rect x="51.3066%" y="501" width="2.7736%" height="15" fill="rgb(210,40,34)" fg:x="86034" fg:w="4651"/><text x="51.5566%" y="511.50">no..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (206 samples, 0.12%)</title><rect x="53.9574%" y="485" width="0.1228%" height="15" fill="rgb(241,220,44)" fg:x="90479" fg:w="206"/><text x="54.2074%" y="495.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (206 samples, 0.12%)</title><rect x="53.9574%" y="469" width="0.1228%" height="15" fill="rgb(235,28,35)" fg:x="90479" fg:w="206"/><text x="54.2074%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (142 samples, 0.08%)</title><rect x="53.9956%" y="453" width="0.0847%" height="15" fill="rgb(210,56,17)" fg:x="90543" fg:w="142"/><text x="54.2456%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (4,881 samples, 2.91%)</title><rect x="51.1951%" y="565" width="2.9108%" height="15" fill="rgb(224,130,29)" fg:x="85847" fg:w="4881"/><text x="51.4451%" y="575.50">co..</text></g><g><title>hprof_slurp::parser::record_parser::parse_gc_primitive_array_dump::{{closure}} (4,869 samples, 2.90%)</title><rect x="51.2022%" y="549" width="2.9036%" height="15" fill="rgb(235,212,8)" fg:x="85859" fg:w="4869"/><text x="51.4522%" y="559.50">hp..</text></g><g><title>nom::combinator::map::{{closure}} (4,722 samples, 2.82%)</title><rect x="51.2899%" y="533" width="2.8160%" height="15" fill="rgb(223,33,50)" fg:x="86006" fg:w="4722"/><text x="51.5399%" y="543.50">no..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (43 samples, 0.03%)</title><rect x="54.0802%" y="517" width="0.0256%" height="15" fill="rgb(219,149,13)" fg:x="90685" fg:w="43"/><text x="54.3302%" y="527.50"></text></g><g><title>hprof_slurp::parser::primitive_parsers::parse_u32 (32 samples, 0.02%)</title><rect x="54.1059%" y="501" width="0.0191%" height="15" fill="rgb(250,156,29)" fg:x="90728" fg:w="32"/><text x="54.3559%" y="511.50"></text></g><g><title>nom::number::streaming::be_u32 (32 samples, 0.02%)</title><rect x="54.1059%" y="485" width="0.0191%" height="15" fill="rgb(216,193,19)" fg:x="90728" fg:w="32"/><text x="54.3559%" y="495.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (55 samples, 0.03%)</title><rect x="54.1250%" y="469" width="0.0328%" height="15" fill="rgb(216,135,14)" fg:x="90760" fg:w="55"/><text x="54.3750%" y="479.50"></text></g><g><title>core::ops::function::FnMut::call_mut (55 samples, 0.03%)</title><rect x="54.1250%" y="453" width="0.0328%" height="15" fill="rgb(241,47,5)" fg:x="90760" fg:w="55"/><text x="54.3750%" y="463.50"></text></g><g><title>hprof_slurp::parser::primitive_parsers::parse_i8 (55 samples, 0.03%)</title><rect x="54.1250%" y="437" width="0.0328%" height="15" fill="rgb(233,42,35)" fg:x="90760" fg:w="55"/><text x="54.3750%" y="447.50"></text></g><g><title>nom::number::streaming::be_i8 (55 samples, 0.03%)</title><rect x="54.1250%" y="421" width="0.0328%" height="15" fill="rgb(231,13,6)" fg:x="90760" fg:w="55"/><text x="54.3750%" y="431.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (55 samples, 0.03%)</title><rect x="54.1250%" y="405" width="0.0328%" height="15" fill="rgb(207,181,40)" fg:x="90760" fg:w="55"/><text x="54.3750%" y="415.50"></text></g><g><title>nom::combinator::map::{{closure}} (55 samples, 0.03%)</title><rect x="54.1250%" y="389" width="0.0328%" height="15" fill="rgb(254,173,49)" fg:x="90760" fg:w="55"/><text x="54.3750%" y="399.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (55 samples, 0.03%)</title><rect x="54.1250%" y="373" width="0.0328%" height="15" fill="rgb(221,1,38)" fg:x="90760" fg:w="55"/><text x="54.3750%" y="383.50"></text></g><g><title>nom::number::streaming::be_i8::{{closure}} (55 samples, 0.03%)</title><rect x="54.1250%" y="357" width="0.0328%" height="15" fill="rgb(206,124,46)" fg:x="90760" fg:w="55"/><text x="54.3750%" y="367.50"></text></g><g><title>nom::number::streaming::be_u8 (55 samples, 0.03%)</title><rect x="54.1250%" y="341" width="0.0328%" height="15" fill="rgb(249,21,11)" fg:x="90760" fg:w="55"/><text x="54.3750%" y="351.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (29,433 samples, 17.55%)</title><rect x="36.6125%" y="613" width="17.5524%" height="15" fill="rgb(222,201,40)" fg:x="61394" fg:w="29433"/><text x="36.8625%" y="623.50">&lt;F as nom::internal::Parser..</text></g><g><title>core::ops::function::FnMut::call_mut (29,433 samples, 17.55%)</title><rect x="36.6125%" y="597" width="17.5524%" height="15" fill="rgb(235,61,29)" fg:x="61394" fg:w="29433"/><text x="36.8625%" y="607.50">core::ops::function::FnMut:..</text></g><g><title>hprof_slurp::parser::record_parser::parse_gc_primitive_array_dump (4,994 samples, 2.98%)</title><rect x="51.1867%" y="581" width="2.9782%" height="15" fill="rgb(219,207,3)" fg:x="85833" fg:w="4994"/><text x="51.4367%" y="591.50">hpr..</text></g><g><title>nom::sequence::tuple::{{closure}} (99 samples, 0.06%)</title><rect x="54.1059%" y="565" width="0.0590%" height="15" fill="rgb(222,56,46)" fg:x="90728" fg:w="99"/><text x="54.3559%" y="575.50"></text></g><g><title>&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (99 samples, 0.06%)</title><rect x="54.1059%" y="549" width="0.0590%" height="15" fill="rgb(239,76,54)" fg:x="90728" fg:w="99"/><text x="54.3559%" y="559.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (99 samples, 0.06%)</title><rect x="54.1059%" y="533" width="0.0590%" height="15" fill="rgb(231,124,27)" fg:x="90728" fg:w="99"/><text x="54.3559%" y="543.50"></text></g><g><title>core::ops::function::FnMut::call_mut (99 samples, 0.06%)</title><rect x="54.1059%" y="517" width="0.0590%" height="15" fill="rgb(249,195,6)" fg:x="90728" fg:w="99"/><text x="54.3559%" y="527.50"></text></g><g><title>hprof_slurp::parser::record_parser::parse_field_type (67 samples, 0.04%)</title><rect x="54.1250%" y="501" width="0.0400%" height="15" fill="rgb(237,174,47)" fg:x="90760" fg:w="67"/><text x="54.3750%" y="511.50"></text></g><g><title>nom::combinator::map::{{closure}} (67 samples, 0.04%)</title><rect x="54.1250%" y="485" width="0.0400%" height="15" fill="rgb(206,201,31)" fg:x="90760" fg:w="67"/><text x="54.3750%" y="495.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (67,471 samples, 40.24%)</title><rect x="14.2755%" y="677" width="40.2365%" height="15" fill="rgb(231,57,52)" fg:x="23938" fg:w="67471"/><text x="14.5255%" y="687.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>hprof_slurp::parser::record_parser::HprofRecordParser::parse_hprof_record::{{closure}} (66,899 samples, 39.90%)</title><rect x="14.6166%" y="661" width="39.8954%" height="15" fill="rgb(248,177,22)" fg:x="24510" fg:w="66899"/><text x="14.8666%" y="671.50">hprof_slurp::parser::record_parser::HprofRecordParser::parse_hpro..</text></g><g><title>hprof_slurp::parser::record_parser::parse_gc_record (30,116 samples, 17.96%)</title><rect x="36.5522%" y="645" width="17.9598%" height="15" fill="rgb(215,211,37)" fg:x="61293" fg:w="30116"/><text x="36.8022%" y="655.50">hprof_slurp::parser::record_..</text></g><g><title>nom::combinator::flat_map::{{closure}} (30,116 samples, 17.96%)</title><rect x="36.5522%" y="629" width="17.9598%" height="15" fill="rgb(241,128,51)" fg:x="61293" fg:w="30116"/><text x="36.8022%" y="639.50">nom::combinator::flat_map::{..</text></g><g><title>hprof_slurp::parser::record_parser::parse_gc_record::{{closure}} (582 samples, 0.35%)</title><rect x="54.1649%" y="613" width="0.3471%" height="15" fill="rgb(227,165,31)" fg:x="90827" fg:w="582"/><text x="54.4149%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (373 samples, 0.22%)</title><rect x="54.5508%" y="661" width="0.2224%" height="15" fill="rgb(228,167,24)" fg:x="91474" fg:w="373"/><text x="54.8008%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (373 samples, 0.22%)</title><rect x="54.5508%" y="645" width="0.2224%" height="15" fill="rgb(228,143,12)" fg:x="91474" fg:w="373"/><text x="54.8008%" y="655.50"></text></g><g><title>do_anonymous_page (17 samples, 0.01%)</title><rect x="55.1119%" y="549" width="0.0101%" height="15" fill="rgb(249,149,8)" fg:x="92415" fg:w="17"/><text x="55.3619%" y="559.50"></text></g><g><title>asm_exc_page_fault (23 samples, 0.01%)</title><rect x="55.1090%" y="645" width="0.0137%" height="15" fill="rgb(243,35,44)" fg:x="92410" fg:w="23"/><text x="55.3590%" y="655.50"></text></g><g><title>exc_page_fault (22 samples, 0.01%)</title><rect x="55.1095%" y="629" width="0.0131%" height="15" fill="rgb(246,89,9)" fg:x="92411" fg:w="22"/><text x="55.3595%" y="639.50"></text></g><g><title>do_user_addr_fault (22 samples, 0.01%)</title><rect x="55.1095%" y="613" width="0.0131%" height="15" fill="rgb(233,213,13)" fg:x="92411" fg:w="22"/><text x="55.3595%" y="623.50"></text></g><g><title>handle_mm_fault (20 samples, 0.01%)</title><rect x="55.1107%" y="597" width="0.0119%" height="15" fill="rgb(233,141,41)" fg:x="92413" fg:w="20"/><text x="55.3607%" y="607.50"></text></g><g><title>__handle_mm_fault (19 samples, 0.01%)</title><rect x="55.1113%" y="581" width="0.0113%" height="15" fill="rgb(239,167,4)" fg:x="92414" fg:w="19"/><text x="55.3613%" y="591.50"></text></g><g><title>handle_pte_fault (19 samples, 0.01%)</title><rect x="55.1113%" y="565" width="0.0113%" height="15" fill="rgb(209,217,16)" fg:x="92414" fg:w="19"/><text x="55.3613%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,031 samples, 0.61%)</title><rect x="54.5120%" y="677" width="0.6148%" height="15" fill="rgb(219,88,35)" fg:x="91409" fg:w="1031"/><text x="54.7620%" y="687.50"></text></g><g><title>core::ptr::write (593 samples, 0.35%)</title><rect x="54.7732%" y="661" width="0.3536%" height="15" fill="rgb(220,193,23)" fg:x="91847" fg:w="593"/><text x="55.0232%" y="671.50"></text></g><g><title>__sysvec_apic_timer_interrupt (17 samples, 0.01%)</title><rect x="55.1268%" y="645" width="0.0101%" height="15" fill="rgb(230,90,52)" fg:x="92440" fg:w="17"/><text x="55.3768%" y="655.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (19 samples, 0.01%)</title><rect x="55.1268%" y="677" width="0.0113%" height="15" fill="rgb(252,106,19)" fg:x="92440" fg:w="19"/><text x="55.3768%" y="687.50"></text></g><g><title>sysvec_apic_timer_interrupt (19 samples, 0.01%)</title><rect x="55.1268%" y="661" width="0.0113%" height="15" fill="rgb(206,74,20)" fg:x="92440" fg:w="19"/><text x="55.3768%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (615 samples, 0.37%)</title><rect x="55.1382%" y="677" width="0.3668%" height="15" fill="rgb(230,138,44)" fg:x="92459" fg:w="615"/><text x="55.3882%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (615 samples, 0.37%)</title><rect x="55.1382%" y="661" width="0.3668%" height="15" fill="rgb(235,182,43)" fg:x="92459" fg:w="615"/><text x="55.3882%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (615 samples, 0.37%)</title><rect x="55.1382%" y="645" width="0.3668%" height="15" fill="rgb(242,16,51)" fg:x="92459" fg:w="615"/><text x="55.3882%" y="655.50"></text></g><g><title>hprof_slurp::parser::record_parser::HprofRecordParser::parse_streaming (80,260 samples, 47.86%)</title><rect x="7.6423%" y="709" width="47.8633%" height="15" fill="rgb(248,9,4)" fg:x="12815" fg:w="80260"/><text x="7.8923%" y="719.50">hprof_slurp::parser::record_parser::HprofRecordParser::parse_streaming</text></g><g><title>hprof_slurp::parser::record_parser::lazy_many1::{{closure}} (80,260 samples, 47.86%)</title><rect x="7.6423%" y="693" width="47.8633%" height="15" fill="rgb(210,31,22)" fg:x="12815" fg:w="80260"/><text x="7.8923%" y="703.50">hprof_slurp::parser::record_parser::lazy_many1::{{closure}}</text></g><g><title>__clone3 (87,424 samples, 52.14%)</title><rect x="3.3771%" y="933" width="52.1355%" height="15" fill="rgb(239,54,39)" fg:x="5663" fg:w="87424"/><text x="3.6271%" y="943.50">__clone3</text></g><g><title>start_thread (87,424 samples, 52.14%)</title><rect x="3.3771%" y="917" width="52.1355%" height="15" fill="rgb(230,99,41)" fg:x="5663" fg:w="87424"/><text x="3.6271%" y="927.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (87,424 samples, 52.14%)</title><rect x="3.3771%" y="901" width="52.1355%" height="15" fill="rgb(253,106,12)" fg:x="5663" fg:w="87424"/><text x="3.6271%" y="911.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (87,424 samples, 52.14%)</title><rect x="3.3771%" y="885" width="52.1355%" height="15" fill="rgb(213,46,41)" fg:x="5663" fg:w="87424"/><text x="3.6271%" y="895.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (87,424 samples, 52.14%)</title><rect x="3.3771%" y="869" width="52.1355%" height="15" fill="rgb(215,133,35)" fg:x="5663" fg:w="87424"/><text x="3.6271%" y="879.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (87,424 samples, 52.14%)</title><rect x="3.3771%" y="853" width="52.1355%" height="15" fill="rgb(213,28,5)" fg:x="5663" fg:w="87424"/><text x="3.6271%" y="863.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (87,424 samples, 52.14%)</title><rect x="3.3771%" y="837" width="52.1355%" height="15" fill="rgb(215,77,49)" fg:x="5663" fg:w="87424"/><text x="3.6271%" y="847.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (87,424 samples, 52.14%)</title><rect x="3.3771%" y="821" width="52.1355%" height="15" fill="rgb(248,100,22)" fg:x="5663" fg:w="87424"/><text x="3.6271%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (87,424 samples, 52.14%)</title><rect x="3.3771%" y="805" width="52.1355%" height="15" fill="rgb(208,67,9)" fg:x="5663" fg:w="87424"/><text x="3.6271%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (87,424 samples, 52.14%)</title><rect x="3.3771%" y="789" width="52.1355%" height="15" fill="rgb(219,133,21)" fg:x="5663" fg:w="87424"/><text x="3.6271%" y="799.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (87,424 samples, 52.14%)</title><rect x="3.3771%" y="773" width="52.1355%" height="15" fill="rgb(246,46,29)" fg:x="5663" fg:w="87424"/><text x="3.6271%" y="783.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::ca..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (87,424 samples, 52.14%)</title><rect x="3.3771%" y="757" width="52.1355%" height="15" fill="rgb(246,185,52)" fg:x="5663" fg:w="87424"/><text x="3.6271%" y="767.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (87,424 samples, 52.14%)</title><rect x="3.3771%" y="741" width="52.1355%" height="15" fill="rgb(252,136,11)" fg:x="5663" fg:w="87424"/><text x="3.6271%" y="751.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>hprof_slurp::parser::record_stream_parser::HprofRecordStreamParser::start::{{closure}} (87,424 samples, 52.14%)</title><rect x="3.3771%" y="725" width="52.1355%" height="15" fill="rgb(219,138,53)" fg:x="5663" fg:w="87424"/><text x="3.6271%" y="735.50">hprof_slurp::parser::record_stream_parser::HprofRecordStreamParser::start::{{closure}}</text></g><g><title>asm_exc_page_fault (69 samples, 0.04%)</title><rect x="55.5151%" y="933" width="0.0411%" height="15" fill="rgb(211,51,23)" fg:x="93091" fg:w="69"/><text x="55.7651%" y="943.50"></text></g><g><title>hprof-parser (93,176 samples, 55.57%)</title><rect x="0.0000%" y="949" width="55.5658%" height="15" fill="rgb(247,221,28)" fg:x="0" fg:w="93176"/><text x="0.2500%" y="959.50">hprof-parser</text></g><g><title>copy_page_to_iter (17 samples, 0.01%)</title><rect x="55.5699%" y="485" width="0.0101%" height="15" fill="rgb(251,222,45)" fg:x="93183" fg:w="17"/><text x="55.8199%" y="495.50"></text></g><g><title>__cond_resched (29 samples, 0.02%)</title><rect x="55.9719%" y="469" width="0.0173%" height="15" fill="rgb(217,162,53)" fg:x="93857" fg:w="29"/><text x="56.2219%" y="479.50"></text></g><g><title>__cond_resched (22 samples, 0.01%)</title><rect x="56.1991%" y="453" width="0.0131%" height="15" fill="rgb(229,93,14)" fg:x="94238" fg:w="22"/><text x="56.4491%" y="463.50"></text></g><g><title>copy_page_to_iter (374 samples, 0.22%)</title><rect x="55.9999%" y="469" width="0.2230%" height="15" fill="rgb(209,67,49)" fg:x="93904" fg:w="374"/><text x="56.2499%" y="479.50"></text></g><g><title>__read_end_io (23 samples, 0.01%)</title><rect x="64.1276%" y="229" width="0.0137%" height="15" fill="rgb(213,87,29)" fg:x="107533" fg:w="23"/><text x="64.3776%" y="239.50"></text></g><g><title>nvme_complete_rq (42 samples, 0.03%)</title><rect x="64.1234%" y="309" width="0.0250%" height="15" fill="rgb(205,151,52)" fg:x="107526" fg:w="42"/><text x="64.3734%" y="319.50"></text></g><g><title>blk_mq_end_request (42 samples, 0.03%)</title><rect x="64.1234%" y="293" width="0.0250%" height="15" fill="rgb(253,215,39)" fg:x="107526" fg:w="42"/><text x="64.3734%" y="303.50"></text></g><g><title>blk_update_request (38 samples, 0.02%)</title><rect x="64.1258%" y="277" width="0.0227%" height="15" fill="rgb(221,220,41)" fg:x="107530" fg:w="38"/><text x="64.3758%" y="287.50"></text></g><g><title>bio_endio (36 samples, 0.02%)</title><rect x="64.1270%" y="261" width="0.0215%" height="15" fill="rgb(218,133,21)" fg:x="107532" fg:w="36"/><text x="64.3770%" y="271.50"></text></g><g><title>mpage_end_io (35 samples, 0.02%)</title><rect x="64.1276%" y="245" width="0.0209%" height="15" fill="rgb(221,193,43)" fg:x="107533" fg:w="35"/><text x="64.3776%" y="255.50"></text></g><g><title>__handle_irq_event_percpu (60 samples, 0.04%)</title><rect x="64.1216%" y="373" width="0.0358%" height="15" fill="rgb(240,128,52)" fg:x="107523" fg:w="60"/><text x="64.3716%" y="383.50"></text></g><g><title>nvme_irq (60 samples, 0.04%)</title><rect x="64.1216%" y="357" width="0.0358%" height="15" fill="rgb(253,114,12)" fg:x="107523" fg:w="60"/><text x="64.3716%" y="367.50"></text></g><g><title>nvme_process_cq (60 samples, 0.04%)</title><rect x="64.1216%" y="341" width="0.0358%" height="15" fill="rgb(215,223,47)" fg:x="107523" fg:w="60"/><text x="64.3716%" y="351.50"></text></g><g><title>nvme_pci_complete_rq (57 samples, 0.03%)</title><rect x="64.1234%" y="325" width="0.0340%" height="15" fill="rgb(248,225,23)" fg:x="107526" fg:w="57"/><text x="64.3734%" y="335.50"></text></g><g><title>asm_common_interrupt (65 samples, 0.04%)</title><rect x="64.1198%" y="453" width="0.0388%" height="15" fill="rgb(250,108,0)" fg:x="107520" fg:w="65"/><text x="64.3698%" y="463.50"></text></g><g><title>common_interrupt (65 samples, 0.04%)</title><rect x="64.1198%" y="437" width="0.0388%" height="15" fill="rgb(228,208,7)" fg:x="107520" fg:w="65"/><text x="64.3698%" y="447.50"></text></g><g><title>__common_interrupt (65 samples, 0.04%)</title><rect x="64.1198%" y="421" width="0.0388%" height="15" fill="rgb(244,45,10)" fg:x="107520" fg:w="65"/><text x="64.3698%" y="431.50"></text></g><g><title>handle_edge_irq (62 samples, 0.04%)</title><rect x="64.1216%" y="405" width="0.0370%" height="15" fill="rgb(207,125,25)" fg:x="107523" fg:w="62"/><text x="64.3716%" y="415.50"></text></g><g><title>handle_irq_event (62 samples, 0.04%)</title><rect x="64.1216%" y="389" width="0.0370%" height="15" fill="rgb(210,195,18)" fg:x="107523" fg:w="62"/><text x="64.3716%" y="399.50"></text></g><g><title>__hrtimer_run_queues (23 samples, 0.01%)</title><rect x="64.1598%" y="389" width="0.0137%" height="15" fill="rgb(249,80,12)" fg:x="107587" fg:w="23"/><text x="64.4098%" y="399.50"></text></g><g><title>tick_sched_timer (20 samples, 0.01%)</title><rect x="64.1616%" y="373" width="0.0119%" height="15" fill="rgb(221,65,9)" fg:x="107590" fg:w="20"/><text x="64.4116%" y="383.50"></text></g><g><title>tick_sched_handle (18 samples, 0.01%)</title><rect x="64.1628%" y="357" width="0.0107%" height="15" fill="rgb(235,49,36)" fg:x="107592" fg:w="18"/><text x="64.4128%" y="367.50"></text></g><g><title>update_process_times (17 samples, 0.01%)</title><rect x="64.1634%" y="341" width="0.0101%" height="15" fill="rgb(225,32,20)" fg:x="107593" fg:w="17"/><text x="64.4134%" y="351.50"></text></g><g><title>__sysvec_apic_timer_interrupt (26 samples, 0.02%)</title><rect x="64.1586%" y="421" width="0.0155%" height="15" fill="rgb(215,141,46)" fg:x="107585" fg:w="26"/><text x="64.4086%" y="431.50"></text></g><g><title>hrtimer_interrupt (26 samples, 0.02%)</title><rect x="64.1586%" y="405" width="0.0155%" height="15" fill="rgb(250,160,47)" fg:x="107585" fg:w="26"/><text x="64.4086%" y="415.50"></text></g><g><title>copy_user_enhanced_fast_string (13,343 samples, 7.96%)</title><rect x="56.2229%" y="469" width="7.9571%" height="15" fill="rgb(216,222,40)" fg:x="94278" fg:w="13343"/><text x="56.4729%" y="479.50">copy_user_e..</text></g><g><title>asm_sysvec_apic_timer_interrupt (36 samples, 0.02%)</title><rect x="64.1586%" y="453" width="0.0215%" height="15" fill="rgb(234,217,39)" fg:x="107585" fg:w="36"/><text x="64.4086%" y="463.50"></text></g><g><title>sysvec_apic_timer_interrupt (36 samples, 0.02%)</title><rect x="64.1586%" y="437" width="0.0215%" height="15" fill="rgb(207,178,40)" fg:x="107585" fg:w="36"/><text x="64.4086%" y="447.50"></text></g><g><title>xas_load (44 samples, 0.03%)</title><rect x="64.4049%" y="437" width="0.0262%" height="15" fill="rgb(221,136,13)" fg:x="107998" fg:w="44"/><text x="64.6549%" y="447.50"></text></g><g><title>filemap_get_read_batch (404 samples, 0.24%)</title><rect x="64.1908%" y="453" width="0.2409%" height="15" fill="rgb(249,199,10)" fg:x="107639" fg:w="404"/><text x="64.4408%" y="463.50"></text></g><g><title>io_schedule (51 samples, 0.03%)</title><rect x="64.4407%" y="421" width="0.0304%" height="15" fill="rgb(249,222,13)" fg:x="108058" fg:w="51"/><text x="64.6907%" y="431.50"></text></g><g><title>schedule (51 samples, 0.03%)</title><rect x="64.4407%" y="405" width="0.0304%" height="15" fill="rgb(244,185,38)" fg:x="108058" fg:w="51"/><text x="64.6907%" y="415.50"></text></g><g><title>__schedule (50 samples, 0.03%)</title><rect x="64.4413%" y="389" width="0.0298%" height="15" fill="rgb(236,202,9)" fg:x="108059" fg:w="50"/><text x="64.6913%" y="399.50"></text></g><g><title>filemap_update_page (67 samples, 0.04%)</title><rect x="64.4317%" y="453" width="0.0400%" height="15" fill="rgb(250,229,37)" fg:x="108043" fg:w="67"/><text x="64.6817%" y="463.50"></text></g><g><title>wait_on_page_bit_common (60 samples, 0.04%)</title><rect x="64.4359%" y="437" width="0.0358%" height="15" fill="rgb(206,174,23)" fg:x="108050" fg:w="60"/><text x="64.6859%" y="447.50"></text></g><g><title>__add_to_page_cache_locked (20 samples, 0.01%)</title><rect x="64.6309%" y="405" width="0.0119%" height="15" fill="rgb(211,33,43)" fg:x="108377" fg:w="20"/><text x="64.8809%" y="415.50"></text></g><g><title>__alloc_pages (19 samples, 0.01%)</title><rect x="64.6703%" y="389" width="0.0113%" height="15" fill="rgb(245,58,50)" fg:x="108443" fg:w="19"/><text x="64.9203%" y="399.50"></text></g><g><title>_find_first_bit (33 samples, 0.02%)</title><rect x="64.6816%" y="389" width="0.0197%" height="15" fill="rgb(244,68,36)" fg:x="108462" fg:w="33"/><text x="64.9316%" y="399.50"></text></g><g><title>clear_page_erms (43 samples, 0.03%)</title><rect x="64.9464%" y="325" width="0.0256%" height="15" fill="rgb(232,229,15)" fg:x="108906" fg:w="43"/><text x="65.1964%" y="335.50"></text></g><g><title>get_page_from_freelist (58 samples, 0.03%)</title><rect x="64.9434%" y="341" width="0.0346%" height="15" fill="rgb(254,30,23)" fg:x="108901" fg:w="58"/><text x="65.1934%" y="351.50"></text></g><g><title>__alloc_pages_slowpath.constprop.0 (75 samples, 0.04%)</title><rect x="64.9398%" y="357" width="0.0447%" height="15" fill="rgb(235,160,14)" fg:x="108895" fg:w="75"/><text x="65.1898%" y="367.50"></text></g><g><title>__cond_resched (17 samples, 0.01%)</title><rect x="64.9846%" y="357" width="0.0101%" height="15" fill="rgb(212,155,44)" fg:x="108970" fg:w="17"/><text x="65.2346%" y="367.50"></text></g><g><title>__next_zones_zonelist (120 samples, 0.07%)</title><rect x="64.9947%" y="357" width="0.0716%" height="15" fill="rgb(226,2,50)" fg:x="108987" fg:w="120"/><text x="65.2447%" y="367.50"></text></g><g><title>__read_end_io (31 samples, 0.02%)</title><rect x="67.2066%" y="101" width="0.0185%" height="15" fill="rgb(234,177,6)" fg:x="112696" fg:w="31"/><text x="67.4566%" y="111.50"></text></g><g><title>nvme_complete_rq (64 samples, 0.04%)</title><rect x="67.2030%" y="181" width="0.0382%" height="15" fill="rgb(217,24,9)" fg:x="112690" fg:w="64"/><text x="67.4530%" y="191.50"></text></g><g><title>blk_mq_end_request (64 samples, 0.04%)</title><rect x="67.2030%" y="165" width="0.0382%" height="15" fill="rgb(220,13,46)" fg:x="112690" fg:w="64"/><text x="67.4530%" y="175.50"></text></g><g><title>blk_update_request (61 samples, 0.04%)</title><rect x="67.2048%" y="149" width="0.0364%" height="15" fill="rgb(239,221,27)" fg:x="112693" fg:w="61"/><text x="67.4548%" y="159.50"></text></g><g><title>bio_endio (60 samples, 0.04%)</title><rect x="67.2054%" y="133" width="0.0358%" height="15" fill="rgb(222,198,25)" fg:x="112694" fg:w="60"/><text x="67.4554%" y="143.50"></text></g><g><title>mpage_end_io (58 samples, 0.03%)</title><rect x="67.2066%" y="117" width="0.0346%" height="15" fill="rgb(211,99,13)" fg:x="112696" fg:w="58"/><text x="67.4566%" y="127.50"></text></g><g><title>unlock_page (27 samples, 0.02%)</title><rect x="67.2251%" y="101" width="0.0161%" height="15" fill="rgb(232,111,31)" fg:x="112727" fg:w="27"/><text x="67.4751%" y="111.50"></text></g><g><title>dma_unmap_sg_attrs (19 samples, 0.01%)</title><rect x="67.2412%" y="165" width="0.0113%" height="15" fill="rgb(245,82,37)" fg:x="112754" fg:w="19"/><text x="67.4912%" y="175.50"></text></g><g><title>iommu_dma_unmap_sg (18 samples, 0.01%)</title><rect x="67.2417%" y="149" width="0.0107%" height="15" fill="rgb(227,149,46)" fg:x="112755" fg:w="18"/><text x="67.4917%" y="159.50"></text></g><g><title>__iommu_dma_unmap (18 samples, 0.01%)</title><rect x="67.2417%" y="133" width="0.0107%" height="15" fill="rgb(218,36,50)" fg:x="112755" fg:w="18"/><text x="67.4917%" y="143.50"></text></g><g><title>__handle_irq_event_percpu (92 samples, 0.05%)</title><rect x="67.2006%" y="245" width="0.0549%" height="15" fill="rgb(226,80,48)" fg:x="112686" fg:w="92"/><text x="67.4506%" y="255.50"></text></g><g><title>nvme_irq (89 samples, 0.05%)</title><rect x="67.2024%" y="229" width="0.0531%" height="15" fill="rgb(238,224,15)" fg:x="112689" fg:w="89"/><text x="67.4524%" y="239.50"></text></g><g><title>nvme_process_cq (89 samples, 0.05%)</title><rect x="67.2024%" y="213" width="0.0531%" height="15" fill="rgb(241,136,10)" fg:x="112689" fg:w="89"/><text x="67.4524%" y="223.50"></text></g><g><title>nvme_pci_complete_rq (88 samples, 0.05%)</title><rect x="67.2030%" y="197" width="0.0525%" height="15" fill="rgb(208,32,45)" fg:x="112690" fg:w="88"/><text x="67.4530%" y="207.50"></text></g><g><title>nvme_unmap_data (24 samples, 0.01%)</title><rect x="67.2412%" y="181" width="0.0143%" height="15" fill="rgb(207,135,9)" fg:x="112754" fg:w="24"/><text x="67.4912%" y="191.50"></text></g><g><title>handle_irq_event (93 samples, 0.06%)</title><rect x="67.2006%" y="261" width="0.0555%" height="15" fill="rgb(206,86,44)" fg:x="112686" fg:w="93"/><text x="67.4506%" y="271.50"></text></g><g><title>asm_common_interrupt (94 samples, 0.06%)</title><rect x="67.2006%" y="325" width="0.0561%" height="15" fill="rgb(245,177,15)" fg:x="112686" fg:w="94"/><text x="67.4506%" y="335.50"></text></g><g><title>common_interrupt (94 samples, 0.06%)</title><rect x="67.2006%" y="309" width="0.0561%" height="15" fill="rgb(206,64,50)" fg:x="112686" fg:w="94"/><text x="67.4506%" y="319.50"></text></g><g><title>__common_interrupt (94 samples, 0.06%)</title><rect x="67.2006%" y="293" width="0.0561%" height="15" fill="rgb(234,36,40)" fg:x="112686" fg:w="94"/><text x="67.4506%" y="303.50"></text></g><g><title>handle_edge_irq (94 samples, 0.06%)</title><rect x="67.2006%" y="277" width="0.0561%" height="15" fill="rgb(213,64,8)" fg:x="112686" fg:w="94"/><text x="67.4506%" y="287.50"></text></g><g><title>clear_page_erms (3,366 samples, 2.01%)</title><rect x="65.2541%" y="341" width="2.0073%" height="15" fill="rgb(210,75,36)" fg:x="109422" fg:w="3366"/><text x="65.5041%" y="351.50">c..</text></g><g><title>kernel_init_free_pages.part.0 (71 samples, 0.04%)</title><rect x="67.2620%" y="341" width="0.0423%" height="15" fill="rgb(229,88,21)" fg:x="112789" fg:w="71"/><text x="67.5120%" y="351.50"></text></g><g><title>__handle_irq_event_percpu (23 samples, 0.01%)</title><rect x="67.5095%" y="245" width="0.0137%" height="15" fill="rgb(252,204,47)" fg:x="113204" fg:w="23"/><text x="67.7595%" y="255.50"></text></g><g><title>nvme_irq (23 samples, 0.01%)</title><rect x="67.5095%" y="229" width="0.0137%" height="15" fill="rgb(208,77,27)" fg:x="113204" fg:w="23"/><text x="67.7595%" y="239.50"></text></g><g><title>nvme_process_cq (22 samples, 0.01%)</title><rect x="67.5101%" y="213" width="0.0131%" height="15" fill="rgb(221,76,26)" fg:x="113205" fg:w="22"/><text x="67.7601%" y="223.50"></text></g><g><title>nvme_pci_complete_rq (21 samples, 0.01%)</title><rect x="67.5107%" y="197" width="0.0125%" height="15" fill="rgb(225,139,18)" fg:x="113206" fg:w="21"/><text x="67.7607%" y="207.50"></text></g><g><title>asm_common_interrupt (24 samples, 0.01%)</title><rect x="67.5095%" y="325" width="0.0143%" height="15" fill="rgb(230,137,11)" fg:x="113204" fg:w="24"/><text x="67.7595%" y="335.50"></text></g><g><title>common_interrupt (24 samples, 0.01%)</title><rect x="67.5095%" y="309" width="0.0143%" height="15" fill="rgb(212,28,1)" fg:x="113204" fg:w="24"/><text x="67.7595%" y="319.50"></text></g><g><title>__common_interrupt (24 samples, 0.01%)</title><rect x="67.5095%" y="293" width="0.0143%" height="15" fill="rgb(248,164,17)" fg:x="113204" fg:w="24"/><text x="67.7595%" y="303.50"></text></g><g><title>handle_edge_irq (24 samples, 0.01%)</title><rect x="67.5095%" y="277" width="0.0143%" height="15" fill="rgb(222,171,42)" fg:x="113204" fg:w="24"/><text x="67.7595%" y="287.50"></text></g><g><title>handle_irq_event (24 samples, 0.01%)</title><rect x="67.5095%" y="261" width="0.0143%" height="15" fill="rgb(243,84,45)" fg:x="113204" fg:w="24"/><text x="67.7595%" y="271.50"></text></g><g><title>rmqueue (959 samples, 0.57%)</title><rect x="67.3044%" y="341" width="0.5719%" height="15" fill="rgb(252,49,23)" fg:x="112860" fg:w="959"/><text x="67.5544%" y="351.50"></text></g><g><title>rmqueue_bulk (587 samples, 0.35%)</title><rect x="67.5262%" y="325" width="0.3501%" height="15" fill="rgb(215,19,7)" fg:x="113232" fg:w="587"/><text x="67.7762%" y="335.50"></text></g><g><title>get_page_from_freelist (4,704 samples, 2.81%)</title><rect x="65.0734%" y="357" width="2.8052%" height="15" fill="rgb(238,81,41)" fg:x="109119" fg:w="4704"/><text x="65.3234%" y="367.50">ge..</text></g><g><title>__alloc_pages (5,243 samples, 3.13%)</title><rect x="64.7770%" y="373" width="3.1267%" height="15" fill="rgb(210,199,37)" fg:x="108622" fg:w="5243"/><text x="65.0270%" y="383.50">__a..</text></g><g><title>policy_nodemask (34 samples, 0.02%)</title><rect x="67.9299%" y="373" width="0.0203%" height="15" fill="rgb(244,192,49)" fg:x="113909" fg:w="34"/><text x="68.1799%" y="383.50"></text></g><g><title>alloc_pages (5,460 samples, 3.26%)</title><rect x="64.7013%" y="389" width="3.2561%" height="15" fill="rgb(226,211,11)" fg:x="108495" fg:w="5460"/><text x="64.9513%" y="399.50">all..</text></g><g><title>__page_cache_alloc (5,568 samples, 3.32%)</title><rect x="64.6428%" y="405" width="3.3205%" height="15" fill="rgb(236,162,54)" fg:x="108397" fg:w="5568"/><text x="64.8928%" y="415.50">__p..</text></g><g><title>PageHuge (48 samples, 0.03%)</title><rect x="68.0450%" y="389" width="0.0286%" height="15" fill="rgb(220,229,9)" fg:x="114102" fg:w="48"/><text x="68.2950%" y="399.50"></text></g><g><title>PageHuge (31 samples, 0.02%)</title><rect x="69.5532%" y="373" width="0.0185%" height="15" fill="rgb(250,87,22)" fg:x="116631" fg:w="31"/><text x="69.8032%" y="383.50"></text></g><g><title>mem_cgroup_charge_statistics.constprop.0 (143 samples, 0.09%)</title><rect x="69.6898%" y="341" width="0.0853%" height="15" fill="rgb(239,43,17)" fg:x="116860" fg:w="143"/><text x="69.9398%" y="351.50"></text></g><g><title>cgroup_rstat_updated (58 samples, 0.03%)</title><rect x="69.7405%" y="325" width="0.0346%" height="15" fill="rgb(231,177,25)" fg:x="116945" fg:w="58"/><text x="69.9905%" y="335.50"></text></g><g><title>page_counter_try_charge (64 samples, 0.04%)</title><rect x="69.8961%" y="325" width="0.0382%" height="15" fill="rgb(219,179,1)" fg:x="117206" fg:w="64"/><text x="70.1461%" y="335.50"></text></g><g><title>charge_memcg (555 samples, 0.33%)</title><rect x="69.6069%" y="357" width="0.3310%" height="15" fill="rgb(238,219,53)" fg:x="116721" fg:w="555"/><text x="69.8569%" y="367.50"></text></g><g><title>try_charge_memcg (246 samples, 0.15%)</title><rect x="69.7912%" y="341" width="0.1467%" height="15" fill="rgb(232,167,36)" fg:x="117030" fg:w="246"/><text x="70.0412%" y="351.50"></text></g><g><title>get_mem_cgroup_from_mm (120 samples, 0.07%)</title><rect x="69.9379%" y="357" width="0.0716%" height="15" fill="rgb(244,19,51)" fg:x="117276" fg:w="120"/><text x="70.1879%" y="367.50"></text></g><g><title>memcg_check_events (21 samples, 0.01%)</title><rect x="70.0142%" y="357" width="0.0125%" height="15" fill="rgb(224,6,22)" fg:x="117404" fg:w="21"/><text x="70.2642%" y="367.50"></text></g><g><title>rcu_read_unlock_strict (27 samples, 0.02%)</title><rect x="70.0267%" y="357" width="0.0161%" height="15" fill="rgb(224,145,5)" fg:x="117425" fg:w="27"/><text x="70.2767%" y="367.50"></text></g><g><title>__mem_cgroup_charge (799 samples, 0.48%)</title><rect x="69.5717%" y="373" width="0.4765%" height="15" fill="rgb(234,130,49)" fg:x="116662" fg:w="799"/><text x="69.8217%" y="383.50"></text></g><g><title>__mod_memcg_lruvec_state (157 samples, 0.09%)</title><rect x="70.1430%" y="341" width="0.0936%" height="15" fill="rgb(254,6,2)" fg:x="117620" fg:w="157"/><text x="70.3930%" y="351.50"></text></g><g><title>cgroup_rstat_updated (45 samples, 0.03%)</title><rect x="70.2098%" y="325" width="0.0268%" height="15" fill="rgb(208,96,46)" fg:x="117732" fg:w="45"/><text x="70.4598%" y="335.50"></text></g><g><title>__mod_node_page_state (148 samples, 0.09%)</title><rect x="70.2366%" y="341" width="0.0883%" height="15" fill="rgb(239,3,39)" fg:x="117777" fg:w="148"/><text x="70.4866%" y="351.50"></text></g><g><title>__mod_lruvec_state (342 samples, 0.20%)</title><rect x="70.1239%" y="357" width="0.2040%" height="15" fill="rgb(233,210,1)" fg:x="117588" fg:w="342"/><text x="70.3739%" y="367.50"></text></g><g><title>__mod_node_page_state (17 samples, 0.01%)</title><rect x="70.3344%" y="357" width="0.0101%" height="15" fill="rgb(244,137,37)" fg:x="117941" fg:w="17"/><text x="70.5844%" y="367.50"></text></g><g><title>__mod_lruvec_page_state (505 samples, 0.30%)</title><rect x="70.0482%" y="373" width="0.3012%" height="15" fill="rgb(240,136,2)" fg:x="117461" fg:w="505"/><text x="70.2982%" y="383.50"></text></g><g><title>_raw_spin_lock_irq (341 samples, 0.20%)</title><rect x="70.3571%" y="373" width="0.2034%" height="15" fill="rgb(239,18,37)" fg:x="117979" fg:w="341"/><text x="70.6071%" y="383.50"></text></g><g><title>native_queued_spin_lock_slowpath (173 samples, 0.10%)</title><rect x="70.4573%" y="357" width="0.1032%" height="15" fill="rgb(218,185,22)" fg:x="118147" fg:w="173"/><text x="70.7073%" y="367.50"></text></g><g><title>native_queued_spin_lock_slowpath.part.0 (173 samples, 0.10%)</title><rect x="70.4573%" y="341" width="0.1032%" height="15" fill="rgb(225,218,4)" fg:x="118147" fg:w="173"/><text x="70.7073%" y="351.50"></text></g><g><title>__read_end_io (43 samples, 0.03%)</title><rect x="70.5736%" y="149" width="0.0256%" height="15" fill="rgb(230,182,32)" fg:x="118342" fg:w="43"/><text x="70.8236%" y="159.50"></text></g><g><title>blk_update_request (79 samples, 0.05%)</title><rect x="70.5694%" y="197" width="0.0471%" height="15" fill="rgb(242,56,43)" fg:x="118335" fg:w="79"/><text x="70.8194%" y="207.50"></text></g><g><title>bio_endio (73 samples, 0.04%)</title><rect x="70.5730%" y="181" width="0.0435%" height="15" fill="rgb(233,99,24)" fg:x="118341" fg:w="73"/><text x="70.8230%" y="191.50"></text></g><g><title>mpage_end_io (72 samples, 0.04%)</title><rect x="70.5736%" y="165" width="0.0429%" height="15" fill="rgb(234,209,42)" fg:x="118342" fg:w="72"/><text x="70.8236%" y="175.50"></text></g><g><title>unlock_page (28 samples, 0.02%)</title><rect x="70.5998%" y="149" width="0.0167%" height="15" fill="rgb(227,7,12)" fg:x="118386" fg:w="28"/><text x="70.8498%" y="159.50"></text></g><g><title>nvme_complete_rq (84 samples, 0.05%)</title><rect x="70.5670%" y="229" width="0.0501%" height="15" fill="rgb(245,203,43)" fg:x="118331" fg:w="84"/><text x="70.8170%" y="239.50"></text></g><g><title>blk_mq_end_request (83 samples, 0.05%)</title><rect x="70.5676%" y="213" width="0.0495%" height="15" fill="rgb(238,205,33)" fg:x="118332" fg:w="83"/><text x="70.8176%" y="223.50"></text></g><g><title>domain_unmap (18 samples, 0.01%)</title><rect x="70.6219%" y="101" width="0.0107%" height="15" fill="rgb(231,56,7)" fg:x="118423" fg:w="18"/><text x="70.8719%" y="111.50"></text></g><g><title>dma_pte_clear_level (18 samples, 0.01%)</title><rect x="70.6219%" y="85" width="0.0107%" height="15" fill="rgb(244,186,29)" fg:x="118423" fg:w="18"/><text x="70.8719%" y="95.50"></text></g><g><title>dma_pte_clear_level (18 samples, 0.01%)</title><rect x="70.6219%" y="69" width="0.0107%" height="15" fill="rgb(234,111,31)" fg:x="118423" fg:w="18"/><text x="70.8719%" y="79.50"></text></g><g><title>dma_pte_clear_level (18 samples, 0.01%)</title><rect x="70.6219%" y="53" width="0.0107%" height="15" fill="rgb(241,149,10)" fg:x="118423" fg:w="18"/><text x="70.8719%" y="63.50"></text></g><g><title>dma_pte_clear_level (17 samples, 0.01%)</title><rect x="70.6225%" y="37" width="0.0101%" height="15" fill="rgb(249,206,44)" fg:x="118424" fg:w="17"/><text x="70.8725%" y="47.50"></text></g><g><title>__iommu_dma_unmap (26 samples, 0.02%)</title><rect x="70.6183%" y="181" width="0.0155%" height="15" fill="rgb(251,153,30)" fg:x="118417" fg:w="26"/><text x="70.8683%" y="191.50"></text></g><g><title>iommu_unmap_fast (21 samples, 0.01%)</title><rect x="70.6213%" y="165" width="0.0125%" height="15" fill="rgb(239,152,38)" fg:x="118422" fg:w="21"/><text x="70.8713%" y="175.50"></text></g><g><title>__iommu_unmap (21 samples, 0.01%)</title><rect x="70.6213%" y="149" width="0.0125%" height="15" fill="rgb(249,139,47)" fg:x="118422" fg:w="21"/><text x="70.8713%" y="159.50"></text></g><g><title>intel_iommu_unmap_pages (20 samples, 0.01%)</title><rect x="70.6219%" y="133" width="0.0119%" height="15" fill="rgb(244,64,35)" fg:x="118423" fg:w="20"/><text x="70.8719%" y="143.50"></text></g><g><title>intel_iommu_unmap (20 samples, 0.01%)</title><rect x="70.6219%" y="117" width="0.0119%" height="15" fill="rgb(216,46,15)" fg:x="118423" fg:w="20"/><text x="70.8719%" y="127.50"></text></g><g><title>dma_unmap_sg_attrs (28 samples, 0.02%)</title><rect x="70.6183%" y="213" width="0.0167%" height="15" fill="rgb(250,74,19)" fg:x="118417" fg:w="28"/><text x="70.8683%" y="223.50"></text></g><g><title>iommu_dma_unmap_sg (28 samples, 0.02%)</title><rect x="70.6183%" y="197" width="0.0167%" height="15" fill="rgb(249,42,33)" fg:x="118417" fg:w="28"/><text x="70.8683%" y="207.50"></text></g><g><title>asm_common_interrupt (127 samples, 0.08%)</title><rect x="70.5605%" y="373" width="0.0757%" height="15" fill="rgb(242,149,17)" fg:x="118320" fg:w="127"/><text x="70.8105%" y="383.50"></text></g><g><title>common_interrupt (127 samples, 0.08%)</title><rect x="70.5605%" y="357" width="0.0757%" height="15" fill="rgb(244,29,21)" fg:x="118320" fg:w="127"/><text x="70.8105%" y="367.50"></text></g><g><title>__common_interrupt (127 samples, 0.08%)</title><rect x="70.5605%" y="341" width="0.0757%" height="15" fill="rgb(220,130,37)" fg:x="118320" fg:w="127"/><text x="70.8105%" y="351.50"></text></g><g><title>handle_edge_irq (126 samples, 0.08%)</title><rect x="70.5610%" y="325" width="0.0751%" height="15" fill="rgb(211,67,2)" fg:x="118321" fg:w="126"/><text x="70.8110%" y="335.50"></text></g><g><title>handle_irq_event (125 samples, 0.07%)</title><rect x="70.5616%" y="309" width="0.0745%" height="15" fill="rgb(235,68,52)" fg:x="118322" fg:w="125"/><text x="70.8116%" y="319.50"></text></g><g><title>__handle_irq_event_percpu (125 samples, 0.07%)</title><rect x="70.5616%" y="293" width="0.0745%" height="15" fill="rgb(246,142,3)" fg:x="118322" fg:w="125"/><text x="70.8116%" y="303.50"></text></g><g><title>nvme_irq (125 samples, 0.07%)</title><rect x="70.5616%" y="277" width="0.0745%" height="15" fill="rgb(241,25,7)" fg:x="118322" fg:w="125"/><text x="70.8116%" y="287.50"></text></g><g><title>nvme_process_cq (125 samples, 0.07%)</title><rect x="70.5616%" y="261" width="0.0745%" height="15" fill="rgb(242,119,39)" fg:x="118322" fg:w="125"/><text x="70.8116%" y="271.50"></text></g><g><title>nvme_pci_complete_rq (118 samples, 0.07%)</title><rect x="70.5658%" y="245" width="0.0704%" height="15" fill="rgb(241,98,45)" fg:x="118329" fg:w="118"/><text x="70.8158%" y="255.50"></text></g><g><title>nvme_unmap_data (31 samples, 0.02%)</title><rect x="70.6177%" y="229" width="0.0185%" height="15" fill="rgb(254,28,30)" fg:x="118416" fg:w="31"/><text x="70.8677%" y="239.50"></text></g><g><title>get_mem_cgroup_from_mm (22 samples, 0.01%)</title><rect x="70.6469%" y="373" width="0.0131%" height="15" fill="rgb(241,142,54)" fg:x="118465" fg:w="22"/><text x="70.8969%" y="383.50"></text></g><g><title>rcu_read_unlock_strict (29 samples, 0.02%)</title><rect x="70.6612%" y="373" width="0.0173%" height="15" fill="rgb(222,85,15)" fg:x="118489" fg:w="29"/><text x="70.9112%" y="383.50"></text></g><g><title>workingset_update_node (27 samples, 0.02%)</title><rect x="70.6785%" y="373" width="0.0161%" height="15" fill="rgb(210,85,47)" fg:x="118518" fg:w="27"/><text x="70.9285%" y="383.50"></text></g><g><title>xas_load (503 samples, 0.30%)</title><rect x="70.7477%" y="357" width="0.3000%" height="15" fill="rgb(224,206,25)" fg:x="118634" fg:w="503"/><text x="70.9977%" y="367.50"></text></g><g><title>xas_start (105 samples, 0.06%)</title><rect x="70.9851%" y="341" width="0.0626%" height="15" fill="rgb(243,201,19)" fg:x="119032" fg:w="105"/><text x="71.2351%" y="351.50"></text></g><g><title>xa_get_order (604 samples, 0.36%)</title><rect x="70.6946%" y="373" width="0.3602%" height="15" fill="rgb(236,59,4)" fg:x="118545" fg:w="604"/><text x="70.9446%" y="383.50"></text></g><g><title>xas_descend (41 samples, 0.02%)</title><rect x="71.0578%" y="373" width="0.0245%" height="15" fill="rgb(254,179,45)" fg:x="119154" fg:w="41"/><text x="71.3078%" y="383.50"></text></g><g><title>xas_descend (274 samples, 0.16%)</title><rect x="71.1771%" y="357" width="0.1634%" height="15" fill="rgb(226,14,10)" fg:x="119354" fg:w="274"/><text x="71.4271%" y="367.50"></text></g><g><title>xas_find_conflict (504 samples, 0.30%)</title><rect x="71.0823%" y="373" width="0.3006%" height="15" fill="rgb(244,27,41)" fg:x="119195" fg:w="504"/><text x="71.3323%" y="383.50"></text></g><g><title>xas_start (71 samples, 0.04%)</title><rect x="71.3405%" y="357" width="0.0423%" height="15" fill="rgb(235,35,32)" fg:x="119628" fg:w="71"/><text x="71.5905%" y="367.50"></text></g><g><title>xas_nomem (17 samples, 0.01%)</title><rect x="71.3834%" y="373" width="0.0101%" height="15" fill="rgb(218,68,31)" fg:x="119700" fg:w="17"/><text x="71.6334%" y="383.50"></text></g><g><title>workingset_update_node (19 samples, 0.01%)</title><rect x="71.5391%" y="357" width="0.0113%" height="15" fill="rgb(207,120,37)" fg:x="119961" fg:w="19"/><text x="71.7891%" y="367.50"></text></g><g><title>___slab_alloc (32 samples, 0.02%)</title><rect x="71.6071%" y="309" width="0.0191%" height="15" fill="rgb(227,98,0)" fg:x="120075" fg:w="32"/><text x="71.8571%" y="319.50"></text></g><g><title>new_slab (28 samples, 0.02%)</title><rect x="71.6094%" y="293" width="0.0167%" height="15" fill="rgb(207,7,3)" fg:x="120079" fg:w="28"/><text x="71.8594%" y="303.50"></text></g><g><title>allocate_slab (28 samples, 0.02%)</title><rect x="71.6094%" y="277" width="0.0167%" height="15" fill="rgb(206,98,19)" fg:x="120079" fg:w="28"/><text x="71.8594%" y="287.50"></text></g><g><title>memcg_slab_post_alloc_hook (27 samples, 0.02%)</title><rect x="71.6339%" y="309" width="0.0161%" height="15" fill="rgb(217,5,26)" fg:x="120120" fg:w="27"/><text x="71.8839%" y="319.50"></text></g><g><title>kmem_cache_alloc (88 samples, 0.05%)</title><rect x="71.6011%" y="325" width="0.0525%" height="15" fill="rgb(235,190,38)" fg:x="120065" fg:w="88"/><text x="71.8511%" y="335.50"></text></g><g><title>__add_to_page_cache_locked (6,004 samples, 3.58%)</title><rect x="68.0737%" y="389" width="3.5805%" height="15" fill="rgb(247,86,24)" fg:x="114150" fg:w="6004"/><text x="68.3237%" y="399.50">__ad..</text></g><g><title>xas_store (429 samples, 0.26%)</title><rect x="71.3983%" y="373" width="0.2558%" height="15" fill="rgb(205,101,16)" fg:x="119725" fg:w="429"/><text x="71.6483%" y="383.50"></text></g><g><title>xas_create (174 samples, 0.10%)</title><rect x="71.5504%" y="357" width="0.1038%" height="15" fill="rgb(246,168,33)" fg:x="119980" fg:w="174"/><text x="71.8004%" y="367.50"></text></g><g><title>xas_alloc (97 samples, 0.06%)</title><rect x="71.5963%" y="341" width="0.0578%" height="15" fill="rgb(231,114,1)" fg:x="120057" fg:w="97"/><text x="71.8463%" y="351.50"></text></g><g><title>_raw_spin_lock_irq (17 samples, 0.01%)</title><rect x="71.6750%" y="389" width="0.0101%" height="15" fill="rgb(207,184,53)" fg:x="120189" fg:w="17"/><text x="71.9250%" y="399.50"></text></g><g><title>__read_end_io (18 samples, 0.01%)</title><rect x="71.8736%" y="117" width="0.0107%" height="15" fill="rgb(224,95,51)" fg:x="120522" fg:w="18"/><text x="72.1236%" y="127.50"></text></g><g><title>nvme_complete_rq (29 samples, 0.02%)</title><rect x="71.8706%" y="197" width="0.0173%" height="15" fill="rgb(212,188,45)" fg:x="120517" fg:w="29"/><text x="72.1206%" y="207.50"></text></g><g><title>blk_mq_end_request (29 samples, 0.02%)</title><rect x="71.8706%" y="181" width="0.0173%" height="15" fill="rgb(223,154,38)" fg:x="120517" fg:w="29"/><text x="72.1206%" y="191.50"></text></g><g><title>blk_update_request (26 samples, 0.02%)</title><rect x="71.8724%" y="165" width="0.0155%" height="15" fill="rgb(251,22,52)" fg:x="120520" fg:w="26"/><text x="72.1224%" y="175.50"></text></g><g><title>bio_endio (24 samples, 0.01%)</title><rect x="71.8736%" y="149" width="0.0143%" height="15" fill="rgb(229,209,22)" fg:x="120522" fg:w="24"/><text x="72.1236%" y="159.50"></text></g><g><title>mpage_end_io (24 samples, 0.01%)</title><rect x="71.8736%" y="133" width="0.0143%" height="15" fill="rgb(234,138,34)" fg:x="120522" fg:w="24"/><text x="72.1236%" y="143.50"></text></g><g><title>asm_common_interrupt (43 samples, 0.03%)</title><rect x="71.8689%" y="341" width="0.0256%" height="15" fill="rgb(212,95,11)" fg:x="120514" fg:w="43"/><text x="72.1189%" y="351.50"></text></g><g><title>common_interrupt (43 samples, 0.03%)</title><rect x="71.8689%" y="325" width="0.0256%" height="15" fill="rgb(240,179,47)" fg:x="120514" fg:w="43"/><text x="72.1189%" y="335.50"></text></g><g><title>__common_interrupt (42 samples, 0.03%)</title><rect x="71.8694%" y="309" width="0.0250%" height="15" fill="rgb(240,163,11)" fg:x="120515" fg:w="42"/><text x="72.1194%" y="319.50"></text></g><g><title>handle_edge_irq (42 samples, 0.03%)</title><rect x="71.8694%" y="293" width="0.0250%" height="15" fill="rgb(236,37,12)" fg:x="120515" fg:w="42"/><text x="72.1194%" y="303.50"></text></g><g><title>handle_irq_event (42 samples, 0.03%)</title><rect x="71.8694%" y="277" width="0.0250%" height="15" fill="rgb(232,164,16)" fg:x="120515" fg:w="42"/><text x="72.1194%" y="287.50"></text></g><g><title>__handle_irq_event_percpu (42 samples, 0.03%)</title><rect x="71.8694%" y="261" width="0.0250%" height="15" fill="rgb(244,205,15)" fg:x="120515" fg:w="42"/><text x="72.1194%" y="271.50"></text></g><g><title>nvme_irq (42 samples, 0.03%)</title><rect x="71.8694%" y="245" width="0.0250%" height="15" fill="rgb(223,117,47)" fg:x="120515" fg:w="42"/><text x="72.1194%" y="255.50"></text></g><g><title>nvme_process_cq (42 samples, 0.03%)</title><rect x="71.8694%" y="229" width="0.0250%" height="15" fill="rgb(244,107,35)" fg:x="120515" fg:w="42"/><text x="72.1194%" y="239.50"></text></g><g><title>nvme_pci_complete_rq (40 samples, 0.02%)</title><rect x="71.8706%" y="213" width="0.0239%" height="15" fill="rgb(205,140,8)" fg:x="120517" fg:w="40"/><text x="72.1206%" y="223.50"></text></g><g><title>__lock_text_start (51 samples, 0.03%)</title><rect x="71.8659%" y="357" width="0.0304%" height="15" fill="rgb(228,84,46)" fg:x="120509" fg:w="51"/><text x="72.1159%" y="367.50"></text></g><g><title>__mod_zone_page_state (21 samples, 0.01%)</title><rect x="71.8993%" y="357" width="0.0125%" height="15" fill="rgb(254,188,9)" fg:x="120565" fg:w="21"/><text x="72.1493%" y="367.50"></text></g><g><title>__mod_memcg_lruvec_state (152 samples, 0.09%)</title><rect x="72.3430%" y="325" width="0.0906%" height="15" fill="rgb(206,112,54)" fg:x="121309" fg:w="152"/><text x="72.5930%" y="335.50"></text></g><g><title>cgroup_rstat_updated (33 samples, 0.02%)</title><rect x="72.4139%" y="309" width="0.0197%" height="15" fill="rgb(216,84,49)" fg:x="121428" fg:w="33"/><text x="72.6639%" y="319.50"></text></g><g><title>__mod_node_page_state (55 samples, 0.03%)</title><rect x="72.4336%" y="325" width="0.0328%" height="15" fill="rgb(214,194,35)" fg:x="121461" fg:w="55"/><text x="72.6836%" y="335.50"></text></g><g><title>__mod_lruvec_state (253 samples, 0.15%)</title><rect x="72.3203%" y="341" width="0.1509%" height="15" fill="rgb(249,28,3)" fg:x="121271" fg:w="253"/><text x="72.5703%" y="351.50"></text></g><g><title>__mod_node_page_state (26 samples, 0.02%)</title><rect x="72.4747%" y="341" width="0.0155%" height="15" fill="rgb(222,56,52)" fg:x="121530" fg:w="26"/><text x="72.7247%" y="351.50"></text></g><g><title>__mod_zone_page_state (68 samples, 0.04%)</title><rect x="72.4902%" y="341" width="0.0406%" height="15" fill="rgb(245,217,50)" fg:x="121556" fg:w="68"/><text x="72.7402%" y="351.50"></text></g><g><title>mem_cgroup_update_lru_size (65 samples, 0.04%)</title><rect x="72.5308%" y="341" width="0.0388%" height="15" fill="rgb(213,201,24)" fg:x="121624" fg:w="65"/><text x="72.7808%" y="351.50"></text></g><g><title>__pagevec_lru_add_fn (1,233 samples, 0.74%)</title><rect x="71.9118%" y="357" width="0.7353%" height="15" fill="rgb(248,116,28)" fg:x="120586" fg:w="1233"/><text x="72.1618%" y="367.50"></text></g><g><title>page_mapping (130 samples, 0.08%)</title><rect x="72.5696%" y="341" width="0.0775%" height="15" fill="rgb(219,72,43)" fg:x="121689" fg:w="130"/><text x="72.8196%" y="351.50"></text></g><g><title>lock_page_lruvec_irqsave (46 samples, 0.03%)</title><rect x="72.6483%" y="357" width="0.0274%" height="15" fill="rgb(209,138,14)" fg:x="121821" fg:w="46"/><text x="72.8983%" y="367.50"></text></g><g><title>_raw_spin_lock_irqsave (33 samples, 0.02%)</title><rect x="72.6560%" y="341" width="0.0197%" height="15" fill="rgb(222,18,33)" fg:x="121834" fg:w="33"/><text x="72.9060%" y="351.50"></text></g><g><title>page_mapping (23 samples, 0.01%)</title><rect x="72.6787%" y="357" width="0.0137%" height="15" fill="rgb(213,199,7)" fg:x="121872" fg:w="23"/><text x="72.9287%" y="367.50"></text></g><g><title>release_pages (216 samples, 0.13%)</title><rect x="72.6936%" y="357" width="0.1288%" height="15" fill="rgb(250,110,10)" fg:x="121897" fg:w="216"/><text x="72.9436%" y="367.50"></text></g><g><title>__pagevec_lru_add (1,674 samples, 1.00%)</title><rect x="71.8247%" y="373" width="0.9983%" height="15" fill="rgb(248,123,6)" fg:x="120440" fg:w="1674"/><text x="72.0747%" y="383.50"></text></g><g><title>lru_cache_add (1,922 samples, 1.15%)</title><rect x="71.6882%" y="389" width="1.1462%" height="15" fill="rgb(206,91,31)" fg:x="120211" fg:w="1922"/><text x="71.9382%" y="399.50"></text></g><g><title>xa_get_order (27 samples, 0.02%)</title><rect x="72.8343%" y="389" width="0.0161%" height="15" fill="rgb(211,154,13)" fg:x="122133" fg:w="27"/><text x="73.0843%" y="399.50"></text></g><g><title>add_to_page_cache_lru (8,245 samples, 4.92%)</title><rect x="67.9633%" y="405" width="4.9169%" height="15" fill="rgb(225,148,7)" fg:x="113965" fg:w="8245"/><text x="68.2133%" y="415.50">add_to..</text></g><g><title>xas_store (25 samples, 0.01%)</title><rect x="72.8654%" y="389" width="0.0149%" height="15" fill="rgb(220,160,43)" fg:x="122185" fg:w="25"/><text x="73.1154%" y="399.50"></text></g><g><title>__blk_rq_map_sg (19 samples, 0.01%)</title><rect x="72.9250%" y="261" width="0.0113%" height="15" fill="rgb(213,52,39)" fg:x="122285" fg:w="19"/><text x="73.1750%" y="271.50"></text></g><g><title>iommu_dma_alloc_iova (29 samples, 0.02%)</title><rect x="72.9477%" y="213" width="0.0173%" height="15" fill="rgb(243,137,7)" fg:x="122323" fg:w="29"/><text x="73.1977%" y="223.50"></text></g><g><title>alloc_iova_fast (28 samples, 0.02%)</title><rect x="72.9482%" y="197" width="0.0167%" height="15" fill="rgb(230,79,13)" fg:x="122324" fg:w="28"/><text x="73.1982%" y="207.50"></text></g><g><title>alloc_iova (28 samples, 0.02%)</title><rect x="72.9482%" y="181" width="0.0167%" height="15" fill="rgb(247,105,23)" fg:x="122324" fg:w="28"/><text x="73.1982%" y="191.50"></text></g><g><title>clflush_cache_range (109 samples, 0.07%)</title><rect x="73.0788%" y="133" width="0.0650%" height="15" fill="rgb(223,179,41)" fg:x="122543" fg:w="109"/><text x="73.3288%" y="143.50"></text></g><g><title>__domain_mapping (302 samples, 0.18%)</title><rect x="72.9822%" y="149" width="0.1801%" height="15" fill="rgb(218,9,34)" fg:x="122381" fg:w="302"/><text x="73.2322%" y="159.50"></text></g><g><title>pfn_to_dma_pte (31 samples, 0.02%)</title><rect x="73.1439%" y="133" width="0.0185%" height="15" fill="rgb(222,106,8)" fg:x="122652" fg:w="31"/><text x="73.3939%" y="143.50"></text></g><g><title>intel_iommu_map_pages (318 samples, 0.19%)</title><rect x="72.9781%" y="165" width="0.1896%" height="15" fill="rgb(211,220,0)" fg:x="122374" fg:w="318"/><text x="73.2281%" y="175.50"></text></g><g><title>__iommu_map (346 samples, 0.21%)</title><rect x="72.9715%" y="181" width="0.2063%" height="15" fill="rgb(229,52,16)" fg:x="122363" fg:w="346"/><text x="73.2215%" y="191.50"></text></g><g><title>iommu_pgsize (17 samples, 0.01%)</title><rect x="73.1677%" y="165" width="0.0101%" height="15" fill="rgb(212,155,18)" fg:x="122692" fg:w="17"/><text x="73.4177%" y="175.50"></text></g><g><title>intel_iommu_iotlb_sync_map (22 samples, 0.01%)</title><rect x="73.1778%" y="181" width="0.0131%" height="15" fill="rgb(242,21,14)" fg:x="122709" fg:w="22"/><text x="73.4278%" y="191.50"></text></g><g><title>__iommu_map_sg (382 samples, 0.23%)</title><rect x="72.9661%" y="197" width="0.2278%" height="15" fill="rgb(222,19,48)" fg:x="122354" fg:w="382"/><text x="73.2161%" y="207.50"></text></g><g><title>iommu_dma_map_sg (428 samples, 0.26%)</title><rect x="72.9399%" y="229" width="0.2552%" height="15" fill="rgb(232,45,27)" fg:x="122310" fg:w="428"/><text x="73.1899%" y="239.50"></text></g><g><title>iommu_map_sg_atomic (386 samples, 0.23%)</title><rect x="72.9649%" y="213" width="0.2302%" height="15" fill="rgb(249,103,42)" fg:x="122352" fg:w="386"/><text x="73.2149%" y="223.50"></text></g><g><title>__dma_map_sg_attrs (432 samples, 0.26%)</title><rect x="72.9387%" y="245" width="0.2576%" height="15" fill="rgb(246,81,33)" fg:x="122308" fg:w="432"/><text x="73.1887%" y="255.50"></text></g><g><title>dma_map_sg_attrs (433 samples, 0.26%)</title><rect x="72.9387%" y="261" width="0.2582%" height="15" fill="rgb(252,33,42)" fg:x="122308" fg:w="433"/><text x="73.1887%" y="271.50"></text></g><g><title>nvme_map_data (537 samples, 0.32%)</title><rect x="72.9202%" y="277" width="0.3202%" height="15" fill="rgb(209,212,41)" fg:x="122277" fg:w="537"/><text x="73.1702%" y="287.50"></text></g><g><title>nvme_pci_setup_prps (54 samples, 0.03%)</title><rect x="73.2083%" y="261" width="0.0322%" height="15" fill="rgb(207,154,6)" fg:x="122760" fg:w="54"/><text x="73.4583%" y="271.50"></text></g><g><title>nvme_queue_rq (558 samples, 0.33%)</title><rect x="72.9113%" y="293" width="0.3328%" height="15" fill="rgb(223,64,47)" fg:x="122262" fg:w="558"/><text x="73.1613%" y="303.50"></text></g><g><title>__blk_mq_try_issue_directly (566 samples, 0.34%)</title><rect x="72.9077%" y="309" width="0.3375%" height="15" fill="rgb(211,161,38)" fg:x="122256" fg:w="566"/><text x="73.1577%" y="319.50"></text></g><g><title>blk_mq_flush_plug_list (569 samples, 0.34%)</title><rect x="72.9065%" y="357" width="0.3393%" height="15" fill="rgb(219,138,40)" fg:x="122254" fg:w="569"/><text x="73.1565%" y="367.50"></text></g><g><title>blk_mq_sched_insert_requests (569 samples, 0.34%)</title><rect x="72.9065%" y="341" width="0.3393%" height="15" fill="rgb(241,228,46)" fg:x="122254" fg:w="569"/><text x="73.1565%" y="351.50"></text></g><g><title>blk_mq_try_issue_list_directly (568 samples, 0.34%)</title><rect x="72.9071%" y="325" width="0.3387%" height="15" fill="rgb(223,209,38)" fg:x="122255" fg:w="568"/><text x="73.1571%" y="335.50"></text></g><g><title>blk_flush_plug_list (570 samples, 0.34%)</title><rect x="72.9065%" y="373" width="0.3399%" height="15" fill="rgb(236,164,45)" fg:x="122254" fg:w="570"/><text x="73.1565%" y="383.50"></text></g><g><title>blk_finish_plug (571 samples, 0.34%)</title><rect x="72.9065%" y="389" width="0.3405%" height="15" fill="rgb(231,15,5)" fg:x="122254" fg:w="571"/><text x="73.1565%" y="399.50"></text></g><g><title>nvme_complete_rq (20 samples, 0.01%)</title><rect x="73.7098%" y="213" width="0.0119%" height="15" fill="rgb(252,35,15)" fg:x="123601" fg:w="20"/><text x="73.9598%" y="223.50"></text></g><g><title>blk_mq_end_request (20 samples, 0.01%)</title><rect x="73.7098%" y="197" width="0.0119%" height="15" fill="rgb(248,181,18)" fg:x="123601" fg:w="20"/><text x="73.9598%" y="207.50"></text></g><g><title>blk_update_request (19 samples, 0.01%)</title><rect x="73.7104%" y="181" width="0.0113%" height="15" fill="rgb(233,39,42)" fg:x="123602" fg:w="19"/><text x="73.9604%" y="191.50"></text></g><g><title>bio_endio (18 samples, 0.01%)</title><rect x="73.7110%" y="165" width="0.0107%" height="15" fill="rgb(238,110,33)" fg:x="123603" fg:w="18"/><text x="73.9610%" y="175.50"></text></g><g><title>mpage_end_io (18 samples, 0.01%)</title><rect x="73.7110%" y="149" width="0.0107%" height="15" fill="rgb(233,195,10)" fg:x="123603" fg:w="18"/><text x="73.9610%" y="159.50"></text></g><g><title>handle_irq_event (28 samples, 0.02%)</title><rect x="73.7092%" y="293" width="0.0167%" height="15" fill="rgb(254,105,3)" fg:x="123600" fg:w="28"/><text x="73.9592%" y="303.50"></text></g><g><title>__handle_irq_event_percpu (28 samples, 0.02%)</title><rect x="73.7092%" y="277" width="0.0167%" height="15" fill="rgb(221,225,9)" fg:x="123600" fg:w="28"/><text x="73.9592%" y="287.50"></text></g><g><title>nvme_irq (28 samples, 0.02%)</title><rect x="73.7092%" y="261" width="0.0167%" height="15" fill="rgb(224,227,45)" fg:x="123600" fg:w="28"/><text x="73.9592%" y="271.50"></text></g><g><title>nvme_process_cq (28 samples, 0.02%)</title><rect x="73.7092%" y="245" width="0.0167%" height="15" fill="rgb(229,198,43)" fg:x="123600" fg:w="28"/><text x="73.9592%" y="255.50"></text></g><g><title>nvme_pci_complete_rq (27 samples, 0.02%)</title><rect x="73.7098%" y="229" width="0.0161%" height="15" fill="rgb(206,209,35)" fg:x="123601" fg:w="27"/><text x="73.9598%" y="239.50"></text></g><g><title>asm_common_interrupt (29 samples, 0.02%)</title><rect x="73.7092%" y="357" width="0.0173%" height="15" fill="rgb(245,195,53)" fg:x="123600" fg:w="29"/><text x="73.9592%" y="367.50"></text></g><g><title>common_interrupt (29 samples, 0.02%)</title><rect x="73.7092%" y="341" width="0.0173%" height="15" fill="rgb(240,92,26)" fg:x="123600" fg:w="29"/><text x="73.9592%" y="351.50"></text></g><g><title>__common_interrupt (29 samples, 0.02%)</title><rect x="73.7092%" y="325" width="0.0173%" height="15" fill="rgb(207,40,23)" fg:x="123600" fg:w="29"/><text x="73.9592%" y="335.50"></text></g><g><title>handle_edge_irq (29 samples, 0.02%)</title><rect x="73.7092%" y="309" width="0.0173%" height="15" fill="rgb(223,111,35)" fg:x="123600" fg:w="29"/><text x="73.9592%" y="319.50"></text></g><g><title>__bio_try_merge_page (148 samples, 0.09%)</title><rect x="73.7790%" y="341" width="0.0883%" height="15" fill="rgb(229,147,28)" fg:x="123717" fg:w="148"/><text x="74.0290%" y="351.50"></text></g><g><title>bio_add_page (238 samples, 0.14%)</title><rect x="73.7283%" y="357" width="0.1419%" height="15" fill="rgb(211,29,28)" fg:x="123632" fg:w="238"/><text x="73.9783%" y="367.50"></text></g><g><title>bio_alloc_bioset (23 samples, 0.01%)</title><rect x="73.8702%" y="357" width="0.0137%" height="15" fill="rgb(228,72,33)" fg:x="123870" fg:w="23"/><text x="74.1202%" y="367.50"></text></g><g><title>__check_block_validity.constprop.0 (19 samples, 0.01%)</title><rect x="73.8964%" y="341" width="0.0113%" height="15" fill="rgb(205,214,31)" fg:x="123914" fg:w="19"/><text x="74.1464%" y="351.50"></text></g><g><title>ext4_map_blocks (57 samples, 0.03%)</title><rect x="73.8917%" y="357" width="0.0340%" height="15" fill="rgb(224,111,15)" fg:x="123906" fg:w="57"/><text x="74.1417%" y="367.50"></text></g><g><title>ext4_es_lookup_extent (28 samples, 0.02%)</title><rect x="73.9090%" y="341" width="0.0167%" height="15" fill="rgb(253,21,26)" fg:x="123935" fg:w="28"/><text x="74.1590%" y="351.50"></text></g><g><title>fscrypt_mergeable_bio (71 samples, 0.04%)</title><rect x="73.9257%" y="357" width="0.0423%" height="15" fill="rgb(245,139,43)" fg:x="123963" fg:w="71"/><text x="74.1757%" y="367.50"></text></g><g><title>__blk_mq_alloc_request (26 samples, 0.02%)</title><rect x="73.9841%" y="293" width="0.0155%" height="15" fill="rgb(252,170,7)" fg:x="124061" fg:w="26"/><text x="74.2341%" y="303.50"></text></g><g><title>blk_bio_segment_split (22 samples, 0.01%)</title><rect x="74.0092%" y="277" width="0.0131%" height="15" fill="rgb(231,118,14)" fg:x="124103" fg:w="22"/><text x="74.2592%" y="287.50"></text></g><g><title>__blk_queue_split (28 samples, 0.02%)</title><rect x="74.0062%" y="293" width="0.0167%" height="15" fill="rgb(238,83,0)" fg:x="124098" fg:w="28"/><text x="74.2562%" y="303.50"></text></g><g><title>clflush_cache_range (27 samples, 0.02%)</title><rect x="74.0658%" y="53" width="0.0161%" height="15" fill="rgb(221,39,39)" fg:x="124198" fg:w="27"/><text x="74.3158%" y="63.50"></text></g><g><title>__domain_mapping (62 samples, 0.04%)</title><rect x="74.0497%" y="69" width="0.0370%" height="15" fill="rgb(222,119,46)" fg:x="124171" fg:w="62"/><text x="74.2997%" y="79.50"></text></g><g><title>intel_iommu_map_pages (65 samples, 0.04%)</title><rect x="74.0491%" y="85" width="0.0388%" height="15" fill="rgb(222,165,49)" fg:x="124170" fg:w="65"/><text x="74.2991%" y="95.50"></text></g><g><title>__iommu_map (71 samples, 0.04%)</title><rect x="74.0467%" y="101" width="0.0423%" height="15" fill="rgb(219,113,52)" fg:x="124166" fg:w="71"/><text x="74.2967%" y="111.50"></text></g><g><title>iommu_dma_map_sg (78 samples, 0.05%)</title><rect x="74.0432%" y="149" width="0.0465%" height="15" fill="rgb(214,7,15)" fg:x="124160" fg:w="78"/><text x="74.2932%" y="159.50"></text></g><g><title>iommu_map_sg_atomic (75 samples, 0.04%)</title><rect x="74.0449%" y="133" width="0.0447%" height="15" fill="rgb(235,32,4)" fg:x="124163" fg:w="75"/><text x="74.2949%" y="143.50"></text></g><g><title>__iommu_map_sg (75 samples, 0.04%)</title><rect x="74.0449%" y="117" width="0.0447%" height="15" fill="rgb(238,90,54)" fg:x="124163" fg:w="75"/><text x="74.2949%" y="127.50"></text></g><g><title>__dma_map_sg_attrs (79 samples, 0.05%)</title><rect x="74.0432%" y="165" width="0.0471%" height="15" fill="rgb(213,208,19)" fg:x="124160" fg:w="79"/><text x="74.2932%" y="175.50"></text></g><g><title>dma_map_sg_attrs (80 samples, 0.05%)</title><rect x="74.0432%" y="181" width="0.0477%" height="15" fill="rgb(233,156,4)" fg:x="124160" fg:w="80"/><text x="74.2932%" y="191.50"></text></g><g><title>nvme_map_data (87 samples, 0.05%)</title><rect x="74.0402%" y="197" width="0.0519%" height="15" fill="rgb(207,194,5)" fg:x="124155" fg:w="87"/><text x="74.2902%" y="207.50"></text></g><g><title>__blk_mq_try_issue_directly (90 samples, 0.05%)</title><rect x="74.0390%" y="229" width="0.0537%" height="15" fill="rgb(206,111,30)" fg:x="124153" fg:w="90"/><text x="74.2890%" y="239.50"></text></g><g><title>nvme_queue_rq (90 samples, 0.05%)</title><rect x="74.0390%" y="213" width="0.0537%" height="15" fill="rgb(243,70,54)" fg:x="124153" fg:w="90"/><text x="74.2890%" y="223.50"></text></g><g><title>blk_flush_plug_list (91 samples, 0.05%)</title><rect x="74.0390%" y="293" width="0.0543%" height="15" fill="rgb(242,28,8)" fg:x="124153" fg:w="91"/><text x="74.2890%" y="303.50"></text></g><g><title>blk_mq_flush_plug_list (91 samples, 0.05%)</title><rect x="74.0390%" y="277" width="0.0543%" height="15" fill="rgb(219,106,18)" fg:x="124153" fg:w="91"/><text x="74.2890%" y="287.50"></text></g><g><title>blk_mq_sched_insert_requests (91 samples, 0.05%)</title><rect x="74.0390%" y="261" width="0.0543%" height="15" fill="rgb(244,222,10)" fg:x="124153" fg:w="91"/><text x="74.2890%" y="271.50"></text></g><g><title>blk_mq_try_issue_list_directly (91 samples, 0.05%)</title><rect x="74.0390%" y="245" width="0.0543%" height="15" fill="rgb(236,179,52)" fg:x="124153" fg:w="91"/><text x="74.2890%" y="255.50"></text></g><g><title>blk_mq_submit_bio (189 samples, 0.11%)</title><rect x="73.9817%" y="309" width="0.1127%" height="15" fill="rgb(213,23,39)" fg:x="124057" fg:w="189"/><text x="74.2317%" y="319.50"></text></g><g><title>__submit_bio (212 samples, 0.13%)</title><rect x="73.9787%" y="325" width="0.1264%" height="15" fill="rgb(238,48,10)" fg:x="124052" fg:w="212"/><text x="74.2287%" y="335.50"></text></g><g><title>submit_bio_checks (17 samples, 0.01%)</title><rect x="74.0950%" y="309" width="0.0101%" height="15" fill="rgb(251,196,23)" fg:x="124247" fg:w="17"/><text x="74.3450%" y="319.50"></text></g><g><title>submit_bio (221 samples, 0.13%)</title><rect x="73.9740%" y="357" width="0.1318%" height="15" fill="rgb(250,152,24)" fg:x="124044" fg:w="221"/><text x="74.2240%" y="367.50"></text></g><g><title>submit_bio_noacct (218 samples, 0.13%)</title><rect x="73.9758%" y="341" width="0.1300%" height="15" fill="rgb(209,150,17)" fg:x="124047" fg:w="218"/><text x="74.2258%" y="351.50"></text></g><g><title>xas_load (318 samples, 0.19%)</title><rect x="74.1481%" y="341" width="0.1896%" height="15" fill="rgb(234,202,34)" fg:x="124336" fg:w="318"/><text x="74.3981%" y="351.50"></text></g><g><title>xas_start (81 samples, 0.05%)</title><rect x="74.2894%" y="325" width="0.0483%" height="15" fill="rgb(253,148,53)" fg:x="124573" fg:w="81"/><text x="74.5394%" y="335.50"></text></g><g><title>xa_load (398 samples, 0.24%)</title><rect x="74.1058%" y="357" width="0.2373%" height="15" fill="rgb(218,129,16)" fg:x="124265" fg:w="398"/><text x="74.3558%" y="367.50"></text></g><g><title>ext4_mpage_readpages (1,841 samples, 1.10%)</title><rect x="73.2554%" y="373" width="1.0979%" height="15" fill="rgb(216,85,19)" fg:x="122839" fg:w="1841"/><text x="73.5054%" y="383.50"></text></g><g><title>xas_load (17 samples, 0.01%)</title><rect x="74.3431%" y="357" width="0.0101%" height="15" fill="rgb(235,228,7)" fg:x="124663" fg:w="17"/><text x="74.5931%" y="367.50"></text></g><g><title>read_pages (2,449 samples, 1.46%)</title><rect x="72.9059%" y="405" width="1.4605%" height="15" fill="rgb(245,175,0)" fg:x="122253" fg:w="2449"/><text x="73.1559%" y="415.50"></text></g><g><title>ext4_readahead (1,875 samples, 1.12%)</title><rect x="73.2482%" y="389" width="1.1182%" height="15" fill="rgb(208,168,36)" fg:x="122827" fg:w="1875"/><text x="73.4982%" y="399.50"></text></g><g><title>xas_load (414 samples, 0.25%)</title><rect x="74.3932%" y="389" width="0.2469%" height="15" fill="rgb(246,171,24)" fg:x="124747" fg:w="414"/><text x="74.6432%" y="399.50"></text></g><g><title>xas_start (65 samples, 0.04%)</title><rect x="74.6013%" y="373" width="0.0388%" height="15" fill="rgb(215,142,24)" fg:x="125096" fg:w="65"/><text x="74.8513%" y="383.50"></text></g><g><title>xa_load (471 samples, 0.28%)</title><rect x="74.3664%" y="405" width="0.2809%" height="15" fill="rgb(250,187,7)" fg:x="124702" fg:w="471"/><text x="74.6164%" y="415.50"></text></g><g><title>page_cache_ra_unbounded (17,016 samples, 10.15%)</title><rect x="64.5021%" y="421" width="10.1475%" height="15" fill="rgb(228,66,33)" fg:x="108161" fg:w="17016"/><text x="64.7521%" y="431.50">page_cache_ra_u..</text></g><g><title>page_cache_async_ra (17,079 samples, 10.19%)</title><rect x="64.4723%" y="453" width="10.1851%" height="15" fill="rgb(234,215,21)" fg:x="108111" fg:w="17079"/><text x="64.7223%" y="463.50">page_cache_asyn..</text></g><g><title>ondemand_readahead (17,060 samples, 10.17%)</title><rect x="64.4836%" y="437" width="10.1738%" height="15" fill="rgb(222,191,20)" fg:x="108130" fg:w="17060"/><text x="64.7336%" y="447.50">ondemand_readah..</text></g><g><title>filemap_get_pages (17,572 samples, 10.48%)</title><rect x="64.1801%" y="469" width="10.4791%" height="15" fill="rgb(245,79,54)" fg:x="107621" fg:w="17572"/><text x="64.4301%" y="479.50">filemap_get_pag..</text></g><g><title>filemap_read (34,692 samples, 20.69%)</title><rect x="55.5825%" y="485" width="20.6887%" height="15" fill="rgb(240,10,37)" fg:x="93204" fg:w="34692"/><text x="55.8325%" y="495.50">filemap_read</text></g><g><title>mark_page_accessed (2,702 samples, 1.61%)</title><rect x="74.6598%" y="469" width="1.6113%" height="15" fill="rgb(214,192,32)" fg:x="125194" fg:w="2702"/><text x="74.9098%" y="479.50"></text></g><g><title>__x64_sys_read (34,729 samples, 20.71%)</title><rect x="55.5687%" y="581" width="20.7107%" height="15" fill="rgb(209,36,54)" fg:x="93181" fg:w="34729"/><text x="55.8187%" y="591.50">__x64_sys_read</text></g><g><title>ksys_read (34,729 samples, 20.71%)</title><rect x="55.5687%" y="565" width="20.7107%" height="15" fill="rgb(220,10,11)" fg:x="93181" fg:w="34729"/><text x="55.8187%" y="575.50">ksys_read</text></g><g><title>vfs_read (34,729 samples, 20.71%)</title><rect x="55.5687%" y="549" width="20.7107%" height="15" fill="rgb(221,106,17)" fg:x="93181" fg:w="34729"/><text x="55.8187%" y="559.50">vfs_read</text></g><g><title>new_sync_read (34,728 samples, 20.71%)</title><rect x="55.5693%" y="533" width="20.7101%" height="15" fill="rgb(251,142,44)" fg:x="93182" fg:w="34728"/><text x="55.8193%" y="543.50">new_sync_read</text></g><g><title>ext4_file_read_iter (34,728 samples, 20.71%)</title><rect x="55.5693%" y="517" width="20.7101%" height="15" fill="rgb(238,13,15)" fg:x="93182" fg:w="34728"/><text x="55.8193%" y="527.50">ext4_file_read_iter</text></g><g><title>generic_file_read_iter (34,728 samples, 20.71%)</title><rect x="55.5693%" y="501" width="20.7101%" height="15" fill="rgb(208,107,27)" fg:x="93182" fg:w="34728"/><text x="55.8193%" y="511.50">generic_file_read_iter</text></g><g><title>entry_SYSCALL_64_after_hwframe (34,732 samples, 20.71%)</title><rect x="55.5681%" y="613" width="20.7125%" height="15" fill="rgb(205,136,37)" fg:x="93180" fg:w="34732"/><text x="55.8181%" y="623.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>do_syscall_64 (34,731 samples, 20.71%)</title><rect x="55.5687%" y="597" width="20.7119%" height="15" fill="rgb(250,205,27)" fg:x="93181" fg:w="34731"/><text x="55.8187%" y="607.50">do_syscall_64</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (34,739 samples, 20.72%)</title><rect x="55.5664%" y="709" width="20.7167%" height="15" fill="rgb(210,80,43)" fg:x="93177" fg:w="34739"/><text x="55.8164%" y="719.50">&lt;std::io::buffered::bufreader::Bu..</text></g><g><title>std::io::default_read_exact (34,739 samples, 20.72%)</title><rect x="55.5664%" y="693" width="20.7167%" height="15" fill="rgb(247,160,36)" fg:x="93177" fg:w="34739"/><text x="55.8164%" y="703.50">std::io::default_read_exact</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (34,738 samples, 20.72%)</title><rect x="55.5670%" y="677" width="20.7161%" height="15" fill="rgb(234,13,49)" fg:x="93178" fg:w="34738"/><text x="55.8170%" y="687.50">&lt;std::io::buffered::bufreader::Bu..</text></g><g><title>std::sys::unix::fd::FileDesc::read (34,738 samples, 20.72%)</title><rect x="55.5670%" y="661" width="20.7161%" height="15" fill="rgb(234,122,0)" fg:x="93178" fg:w="34738"/><text x="55.8170%" y="671.50">std::sys::unix::fd::FileDesc::read</text></g><g><title>__GI___libc_read (34,738 samples, 20.72%)</title><rect x="55.5670%" y="645" width="20.7161%" height="15" fill="rgb(207,146,38)" fg:x="93178" fg:w="34738"/><text x="55.8170%" y="655.50">__GI___libc_read</text></g><g><title>__GI___libc_read (34,738 samples, 20.72%)</title><rect x="55.5670%" y="629" width="20.7161%" height="15" fill="rgb(207,177,25)" fg:x="93178" fg:w="34738"/><text x="55.8170%" y="639.50">__GI___libc_read</text></g><g><title>asm_exc_page_fault (24 samples, 0.01%)</title><rect x="76.8210%" y="645" width="0.0143%" height="15" fill="rgb(211,178,42)" fg:x="128818" fg:w="24"/><text x="77.0710%" y="655.50"></text></g><g><title>exc_page_fault (24 samples, 0.01%)</title><rect x="76.8210%" y="629" width="0.0143%" height="15" fill="rgb(230,69,54)" fg:x="128818" fg:w="24"/><text x="77.0710%" y="639.50"></text></g><g><title>do_user_addr_fault (24 samples, 0.01%)</title><rect x="76.8210%" y="613" width="0.0143%" height="15" fill="rgb(214,135,41)" fg:x="128818" fg:w="24"/><text x="77.0710%" y="623.50"></text></g><g><title>handle_mm_fault (17 samples, 0.01%)</title><rect x="76.8251%" y="597" width="0.0101%" height="15" fill="rgb(237,67,25)" fg:x="128825" fg:w="17"/><text x="77.0751%" y="607.50"></text></g><g><title>__handle_mm_fault (17 samples, 0.01%)</title><rect x="76.8251%" y="581" width="0.0101%" height="15" fill="rgb(222,189,50)" fg:x="128825" fg:w="17"/><text x="77.0751%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (934 samples, 0.56%)</title><rect x="76.2831%" y="709" width="0.5570%" height="15" fill="rgb(245,148,34)" fg:x="127916" fg:w="934"/><text x="76.5331%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (934 samples, 0.56%)</title><rect x="76.2831%" y="693" width="0.5570%" height="15" fill="rgb(222,29,6)" fg:x="127916" fg:w="934"/><text x="76.5331%" y="703.50"></text></g><g><title>core::ptr::write (934 samples, 0.56%)</title><rect x="76.2831%" y="677" width="0.5570%" height="15" fill="rgb(221,189,43)" fg:x="127916" fg:w="934"/><text x="76.5331%" y="687.50"></text></g><g><title>__memset_avx2_unaligned_erms (934 samples, 0.56%)</title><rect x="76.2831%" y="661" width="0.5570%" height="15" fill="rgb(207,36,27)" fg:x="127916" fg:w="934"/><text x="76.5331%" y="671.50"></text></g><g><title>__clone3 (35,684 samples, 21.28%)</title><rect x="55.5664%" y="933" width="21.2802%" height="15" fill="rgb(217,90,24)" fg:x="93177" fg:w="35684"/><text x="55.8164%" y="943.50">__clone3</text></g><g><title>start_thread (35,684 samples, 21.28%)</title><rect x="55.5664%" y="917" width="21.2802%" height="15" fill="rgb(224,66,35)" fg:x="93177" fg:w="35684"/><text x="55.8164%" y="927.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (35,684 samples, 21.28%)</title><rect x="55.5664%" y="901" width="21.2802%" height="15" fill="rgb(221,13,50)" fg:x="93177" fg:w="35684"/><text x="55.8164%" y="911.50">std::sys::unix::thread::Thread::ne..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (35,684 samples, 21.28%)</title><rect x="55.5664%" y="885" width="21.2802%" height="15" fill="rgb(236,68,49)" fg:x="93177" fg:w="35684"/><text x="55.8164%" y="895.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::o..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (35,684 samples, 21.28%)</title><rect x="55.5664%" y="869" width="21.2802%" height="15" fill="rgb(229,146,28)" fg:x="93177" fg:w="35684"/><text x="55.8164%" y="879.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::o..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (35,684 samples, 21.28%)</title><rect x="55.5664%" y="853" width="21.2802%" height="15" fill="rgb(225,31,38)" fg:x="93177" fg:w="35684"/><text x="55.8164%" y="863.50">core::ops::function::FnOnce::call_..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (35,684 samples, 21.28%)</title><rect x="55.5664%" y="837" width="21.2802%" height="15" fill="rgb(250,208,3)" fg:x="93177" fg:w="35684"/><text x="55.8164%" y="847.50">std::thread::Builder::spawn_unchec..</text></g><g><title>std::panic::catch_unwind (35,684 samples, 21.28%)</title><rect x="55.5664%" y="821" width="21.2802%" height="15" fill="rgb(246,54,23)" fg:x="93177" fg:w="35684"/><text x="55.8164%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (35,684 samples, 21.28%)</title><rect x="55.5664%" y="805" width="21.2802%" height="15" fill="rgb(243,76,11)" fg:x="93177" fg:w="35684"/><text x="55.8164%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (35,684 samples, 21.28%)</title><rect x="55.5664%" y="789" width="21.2802%" height="15" fill="rgb(245,21,50)" fg:x="93177" fg:w="35684"/><text x="55.8164%" y="799.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (35,684 samples, 21.28%)</title><rect x="55.5664%" y="773" width="21.2802%" height="15" fill="rgb(228,9,43)" fg:x="93177" fg:w="35684"/><text x="55.8164%" y="783.50">&lt;core::panic::unwind_safe::AssertU..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (35,684 samples, 21.28%)</title><rect x="55.5664%" y="757" width="21.2802%" height="15" fill="rgb(208,100,47)" fg:x="93177" fg:w="35684"/><text x="55.8164%" y="767.50">std::thread::Builder::spawn_unchec..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (35,684 samples, 21.28%)</title><rect x="55.5664%" y="741" width="21.2802%" height="15" fill="rgb(232,26,8)" fg:x="93177" fg:w="35684"/><text x="55.8164%" y="751.50">std::sys_common::backtrace::__rust..</text></g><g><title>hprof_slurp::prefetch_reader::PrefetchReader::start::{{closure}} (35,684 samples, 21.28%)</title><rect x="55.5664%" y="725" width="21.2802%" height="15" fill="rgb(216,166,38)" fg:x="93177" fg:w="35684"/><text x="55.8164%" y="735.50">hprof_slurp::prefetch_reader::Pref..</text></g><g><title>asm_sysvec_apic_timer_interrupt (933 samples, 0.56%)</title><rect x="76.8520%" y="933" width="0.5564%" height="15" fill="rgb(251,202,51)" fg:x="128870" fg:w="933"/><text x="77.1020%" y="943.50"></text></g><g><title>copy_user_enhanced_fast_string (55 samples, 0.03%)</title><rect x="77.4161%" y="789" width="0.0328%" height="15" fill="rgb(254,216,34)" fg:x="129816" fg:w="55"/><text x="77.6661%" y="799.50"></text></g><g><title>clear_page_erms (18 samples, 0.01%)</title><rect x="77.4537%" y="661" width="0.0107%" height="15" fill="rgb(251,32,27)" fg:x="129879" fg:w="18"/><text x="77.7037%" y="671.50"></text></g><g><title>__alloc_pages (27 samples, 0.02%)</title><rect x="77.4519%" y="693" width="0.0161%" height="15" fill="rgb(208,127,28)" fg:x="129876" fg:w="27"/><text x="77.7019%" y="703.50"></text></g><g><title>get_page_from_freelist (25 samples, 0.01%)</title><rect x="77.4531%" y="677" width="0.0149%" height="15" fill="rgb(224,137,22)" fg:x="129878" fg:w="25"/><text x="77.7031%" y="687.50"></text></g><g><title>__page_cache_alloc (29 samples, 0.02%)</title><rect x="77.4513%" y="725" width="0.0173%" height="15" fill="rgb(254,70,32)" fg:x="129875" fg:w="29"/><text x="77.7013%" y="735.50"></text></g><g><title>alloc_pages (28 samples, 0.02%)</title><rect x="77.4519%" y="709" width="0.0167%" height="15" fill="rgb(229,75,37)" fg:x="129876" fg:w="28"/><text x="77.7019%" y="719.50"></text></g><g><title>__add_to_page_cache_locked (19 samples, 0.01%)</title><rect x="77.4698%" y="709" width="0.0113%" height="15" fill="rgb(252,64,23)" fg:x="129906" fg:w="19"/><text x="77.7198%" y="719.50"></text></g><g><title>add_to_page_cache_lru (32 samples, 0.02%)</title><rect x="77.4686%" y="725" width="0.0191%" height="15" fill="rgb(232,162,48)" fg:x="129904" fg:w="32"/><text x="77.7186%" y="735.50"></text></g><g><title>filemap_get_pages (71 samples, 0.04%)</title><rect x="77.4489%" y="789" width="0.0423%" height="15" fill="rgb(246,160,12)" fg:x="129871" fg:w="71"/><text x="77.6989%" y="799.50"></text></g><g><title>page_cache_async_ra (68 samples, 0.04%)</title><rect x="77.4507%" y="773" width="0.0406%" height="15" fill="rgb(247,166,0)" fg:x="129874" fg:w="68"/><text x="77.7007%" y="783.50"></text></g><g><title>ondemand_readahead (68 samples, 0.04%)</title><rect x="77.4507%" y="757" width="0.0406%" height="15" fill="rgb(249,219,21)" fg:x="129874" fg:w="68"/><text x="77.7007%" y="767.50"></text></g><g><title>page_cache_ra_unbounded (68 samples, 0.04%)</title><rect x="77.4507%" y="741" width="0.0406%" height="15" fill="rgb(205,209,3)" fg:x="129874" fg:w="68"/><text x="77.7007%" y="751.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (145 samples, 0.09%)</title><rect x="77.4119%" y="933" width="0.0865%" height="15" fill="rgb(243,44,1)" fg:x="129809" fg:w="145"/><text x="77.6619%" y="943.50"></text></g><g><title>do_syscall_64 (145 samples, 0.09%)</title><rect x="77.4119%" y="917" width="0.0865%" height="15" fill="rgb(206,159,16)" fg:x="129809" fg:w="145"/><text x="77.6619%" y="927.50"></text></g><g><title>__x64_sys_read (145 samples, 0.09%)</title><rect x="77.4119%" y="901" width="0.0865%" height="15" fill="rgb(244,77,30)" fg:x="129809" fg:w="145"/><text x="77.6619%" y="911.50"></text></g><g><title>ksys_read (145 samples, 0.09%)</title><rect x="77.4119%" y="885" width="0.0865%" height="15" fill="rgb(218,69,12)" fg:x="129809" fg:w="145"/><text x="77.6619%" y="895.50"></text></g><g><title>vfs_read (145 samples, 0.09%)</title><rect x="77.4119%" y="869" width="0.0865%" height="15" fill="rgb(212,87,7)" fg:x="129809" fg:w="145"/><text x="77.6619%" y="879.50"></text></g><g><title>new_sync_read (145 samples, 0.09%)</title><rect x="77.4119%" y="853" width="0.0865%" height="15" fill="rgb(245,114,25)" fg:x="129809" fg:w="145"/><text x="77.6619%" y="863.50"></text></g><g><title>ext4_file_read_iter (145 samples, 0.09%)</title><rect x="77.4119%" y="837" width="0.0865%" height="15" fill="rgb(210,61,42)" fg:x="129809" fg:w="145"/><text x="77.6619%" y="847.50"></text></g><g><title>generic_file_read_iter (145 samples, 0.09%)</title><rect x="77.4119%" y="821" width="0.0865%" height="15" fill="rgb(211,52,33)" fg:x="129809" fg:w="145"/><text x="77.6619%" y="831.50"></text></g><g><title>filemap_read (145 samples, 0.09%)</title><rect x="77.4119%" y="805" width="0.0865%" height="15" fill="rgb(234,58,33)" fg:x="129809" fg:w="145"/><text x="77.6619%" y="815.50"></text></g><g><title>hprof-prefetch (36,779 samples, 21.93%)</title><rect x="55.5658%" y="949" width="21.9333%" height="15" fill="rgb(220,115,36)" fg:x="93176" fg:w="36779"/><text x="55.8158%" y="959.50">hprof-prefetch</text></g><g><title>[anon] (45 samples, 0.03%)</title><rect x="77.4990%" y="933" width="0.0268%" height="15" fill="rgb(243,153,54)" fg:x="129955" fg:w="45"/><text x="77.7490%" y="943.50"></text></g><g><title>_int_free (40 samples, 0.02%)</title><rect x="77.5020%" y="917" width="0.0239%" height="15" fill="rgb(251,47,18)" fg:x="129960" fg:w="40"/><text x="77.7520%" y="927.50"></text></g><g><title>__GI___libc_free (22 samples, 0.01%)</title><rect x="77.5259%" y="917" width="0.0131%" height="15" fill="rgb(242,102,42)" fg:x="130000" fg:w="22"/><text x="77.7759%" y="927.50"></text></g><g><title>_int_free (26 samples, 0.02%)</title><rect x="77.5390%" y="917" width="0.0155%" height="15" fill="rgb(234,31,38)" fg:x="130022" fg:w="26"/><text x="77.7890%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;hprof_slurp::parser::record::Record&gt; (1,211 samples, 0.72%)</title><rect x="77.5545%" y="917" width="0.7222%" height="15" fill="rgb(221,117,51)" fg:x="130048" fg:w="1211"/><text x="77.8045%" y="927.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (612 samples, 0.36%)</title><rect x="78.2790%" y="917" width="0.3650%" height="15" fill="rgb(212,20,18)" fg:x="131263" fg:w="612"/><text x="78.5290%" y="927.50"></text></g><g><title>hprof_slurp::result_recorder::ResultRecorder::start::{{closure}} (612 samples, 0.36%)</title><rect x="78.2790%" y="901" width="0.3650%" height="15" fill="rgb(245,133,36)" fg:x="131263" fg:w="612"/><text x="78.5290%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (612 samples, 0.36%)</title><rect x="78.2790%" y="885" width="0.3650%" height="15" fill="rgb(212,6,19)" fg:x="131263" fg:w="612"/><text x="78.5290%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (612 samples, 0.36%)</title><rect x="78.2790%" y="869" width="0.3650%" height="15" fill="rgb(218,1,36)" fg:x="131263" fg:w="612"/><text x="78.5290%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;[hprof_slurp::parser::record::Record]&gt; (612 samples, 0.36%)</title><rect x="78.2790%" y="853" width="0.3650%" height="15" fill="rgb(246,84,54)" fg:x="131263" fg:w="612"/><text x="78.5290%" y="863.50"></text></g><g><title>[unknown] (1,882 samples, 1.12%)</title><rect x="77.5259%" y="933" width="1.1223%" height="15" fill="rgb(242,110,6)" fg:x="130000" fg:w="1882"/><text x="77.7759%" y="943.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.05%)</title><rect x="79.0191%" y="661" width="0.0453%" height="15" fill="rgb(214,47,5)" fg:x="132504" fg:w="76"/><text x="79.2691%" y="671.50"></text></g><g><title>__GI___lll_lock_wake_private (21 samples, 0.01%)</title><rect x="79.6518%" y="645" width="0.0125%" height="15" fill="rgb(218,159,25)" fg:x="133565" fg:w="21"/><text x="79.9018%" y="655.50"></text></g><g><title>__GI___munmap (19 samples, 0.01%)</title><rect x="79.6644%" y="645" width="0.0113%" height="15" fill="rgb(215,211,28)" fg:x="133586" fg:w="19"/><text x="79.9144%" y="655.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (19 samples, 0.01%)</title><rect x="79.6644%" y="629" width="0.0113%" height="15" fill="rgb(238,59,32)" fg:x="133586" fg:w="19"/><text x="79.9144%" y="639.50"></text></g><g><title>do_syscall_64 (19 samples, 0.01%)</title><rect x="79.6644%" y="613" width="0.0113%" height="15" fill="rgb(226,82,3)" fg:x="133586" fg:w="19"/><text x="79.9144%" y="623.50"></text></g><g><title>__x64_sys_munmap (19 samples, 0.01%)</title><rect x="79.6644%" y="597" width="0.0113%" height="15" fill="rgb(240,164,32)" fg:x="133586" fg:w="19"/><text x="79.9144%" y="607.50"></text></g><g><title>__vm_munmap (19 samples, 0.01%)</title><rect x="79.6644%" y="581" width="0.0113%" height="15" fill="rgb(232,46,7)" fg:x="133586" fg:w="19"/><text x="79.9144%" y="591.50"></text></g><g><title>__do_munmap (19 samples, 0.01%)</title><rect x="79.6644%" y="565" width="0.0113%" height="15" fill="rgb(229,129,53)" fg:x="133586" fg:w="19"/><text x="79.9144%" y="575.50"></text></g><g><title>unmap_region (19 samples, 0.01%)</title><rect x="79.6644%" y="549" width="0.0113%" height="15" fill="rgb(234,188,29)" fg:x="133586" fg:w="19"/><text x="79.9144%" y="559.50"></text></g><g><title>unmap_vmas (17 samples, 0.01%)</title><rect x="79.6656%" y="533" width="0.0101%" height="15" fill="rgb(246,141,4)" fg:x="133588" fg:w="17"/><text x="79.9156%" y="543.50"></text></g><g><title>unmap_single_vma (17 samples, 0.01%)</title><rect x="79.6656%" y="517" width="0.0101%" height="15" fill="rgb(229,23,39)" fg:x="133588" fg:w="17"/><text x="79.9156%" y="527.50"></text></g><g><title>unmap_page_range (17 samples, 0.01%)</title><rect x="79.6656%" y="501" width="0.0101%" height="15" fill="rgb(206,12,3)" fg:x="133588" fg:w="17"/><text x="79.9156%" y="511.50"></text></g><g><title>zap_pmd_range.isra.0 (17 samples, 0.01%)</title><rect x="79.6656%" y="485" width="0.0101%" height="15" fill="rgb(252,226,20)" fg:x="133588" fg:w="17"/><text x="79.9156%" y="495.50"></text></g><g><title>zap_pte_range (17 samples, 0.01%)</title><rect x="79.6656%" y="469" width="0.0101%" height="15" fill="rgb(216,123,35)" fg:x="133588" fg:w="17"/><text x="79.9156%" y="479.50"></text></g><g><title>dequeue_entity (23 samples, 0.01%)</title><rect x="80.6603%" y="437" width="0.0137%" height="15" fill="rgb(212,68,40)" fg:x="135256" fg:w="23"/><text x="80.9103%" y="447.50"></text></g><g><title>dequeue_task (29 samples, 0.02%)</title><rect x="80.6585%" y="469" width="0.0173%" height="15" fill="rgb(254,125,32)" fg:x="135253" fg:w="29"/><text x="80.9085%" y="479.50"></text></g><g><title>dequeue_task_fair (28 samples, 0.02%)</title><rect x="80.6591%" y="453" width="0.0167%" height="15" fill="rgb(253,97,22)" fg:x="135254" fg:w="28"/><text x="80.9091%" y="463.50"></text></g><g><title>futex_wait_queue_me (68 samples, 0.04%)</title><rect x="80.6537%" y="517" width="0.0406%" height="15" fill="rgb(241,101,14)" fg:x="135245" fg:w="68"/><text x="80.9037%" y="527.50"></text></g><g><title>schedule (67 samples, 0.04%)</title><rect x="80.6543%" y="501" width="0.0400%" height="15" fill="rgb(238,103,29)" fg:x="135246" fg:w="67"/><text x="80.9043%" y="511.50"></text></g><g><title>__schedule (66 samples, 0.04%)</title><rect x="80.6549%" y="485" width="0.0394%" height="15" fill="rgb(233,195,47)" fg:x="135247" fg:w="66"/><text x="80.9049%" y="495.50"></text></g><g><title>futex_wait (91 samples, 0.05%)</title><rect x="80.6472%" y="533" width="0.0543%" height="15" fill="rgb(246,218,30)" fg:x="135234" fg:w="91"/><text x="80.8972%" y="543.50"></text></g><g><title>__x64_sys_futex (96 samples, 0.06%)</title><rect x="80.6448%" y="565" width="0.0572%" height="15" fill="rgb(219,145,47)" fg:x="135230" fg:w="96"/><text x="80.8948%" y="575.50"></text></g><g><title>do_futex (93 samples, 0.06%)</title><rect x="80.6466%" y="549" width="0.0555%" height="15" fill="rgb(243,12,26)" fg:x="135233" fg:w="93"/><text x="80.8966%" y="559.50"></text></g><g><title>__GI___lll_lock_wait_private (125 samples, 0.07%)</title><rect x="80.6352%" y="629" width="0.0745%" height="15" fill="rgb(214,87,16)" fg:x="135214" fg:w="125"/><text x="80.8852%" y="639.50"></text></g><g><title>futex_wait (113 samples, 0.07%)</title><rect x="80.6424%" y="613" width="0.0674%" height="15" fill="rgb(208,99,42)" fg:x="135226" fg:w="113"/><text x="80.8924%" y="623.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (109 samples, 0.07%)</title><rect x="80.6448%" y="597" width="0.0650%" height="15" fill="rgb(253,99,2)" fg:x="135230" fg:w="109"/><text x="80.8948%" y="607.50"></text></g><g><title>do_syscall_64 (109 samples, 0.07%)</title><rect x="80.6448%" y="581" width="0.0650%" height="15" fill="rgb(220,168,23)" fg:x="135230" fg:w="109"/><text x="80.8948%" y="591.50"></text></g><g><title>malloc_consolidate (339 samples, 0.20%)</title><rect x="80.7205%" y="629" width="0.2022%" height="15" fill="rgb(242,38,24)" fg:x="135357" fg:w="339"/><text x="80.9705%" y="639.50"></text></g><g><title>unlink_chunk (80 samples, 0.05%)</title><rect x="80.8750%" y="613" width="0.0477%" height="15" fill="rgb(225,182,9)" fg:x="135616" fg:w="80"/><text x="81.1250%" y="623.50"></text></g><g><title>_int_free (2,123 samples, 1.27%)</title><rect x="79.6757%" y="645" width="1.2661%" height="15" fill="rgb(243,178,37)" fg:x="133605" fg:w="2123"/><text x="79.9257%" y="655.50"></text></g><g><title>unlink_chunk (32 samples, 0.02%)</title><rect x="80.9227%" y="629" width="0.0191%" height="15" fill="rgb(232,139,19)" fg:x="135696" fg:w="32"/><text x="81.1727%" y="639.50"></text></g><g><title>arena_for_chunk (144 samples, 0.09%)</title><rect x="80.9418%" y="645" width="0.0859%" height="15" fill="rgb(225,201,24)" fg:x="135728" fg:w="144"/><text x="81.1918%" y="655.50"></text></g><g><title>arena_for_chunk (131 samples, 0.08%)</title><rect x="80.9495%" y="629" width="0.0781%" height="15" fill="rgb(221,47,46)" fg:x="135741" fg:w="131"/><text x="81.1995%" y="639.50"></text></g><g><title>heap_for_ptr (21 samples, 0.01%)</title><rect x="81.0151%" y="613" width="0.0125%" height="15" fill="rgb(249,23,13)" fg:x="135851" fg:w="21"/><text x="81.2651%" y="623.50"></text></g><g><title>__GI___libc_free (3,296 samples, 1.97%)</title><rect x="79.0644%" y="661" width="1.9656%" height="15" fill="rgb(219,9,5)" fg:x="132580" fg:w="3296"/><text x="79.3144%" y="671.50">_..</text></g><g><title>__rust_dealloc (18 samples, 0.01%)</title><rect x="81.0390%" y="661" width="0.0107%" height="15" fill="rgb(254,171,16)" fg:x="135891" fg:w="18"/><text x="81.2890%" y="671.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (26 samples, 0.02%)</title><rect x="86.3596%" y="645" width="0.0155%" height="15" fill="rgb(230,171,20)" fg:x="144813" fg:w="26"/><text x="86.6096%" y="655.50"></text></g><g><title>sysvec_apic_timer_interrupt (25 samples, 0.01%)</title><rect x="86.3602%" y="629" width="0.0149%" height="15" fill="rgb(210,71,41)" fg:x="144814" fg:w="25"/><text x="86.6102%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;hprof_slurp::parser::gc_record::GcRecord&gt; (1,199 samples, 0.72%)</title><rect x="86.3751%" y="645" width="0.7150%" height="15" fill="rgb(206,173,20)" fg:x="144839" fg:w="1199"/><text x="86.6251%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;hprof_slurp::parser::gc_record::ArrayValue&gt; (147 samples, 0.09%)</title><rect x="87.0025%" y="629" width="0.0877%" height="15" fill="rgb(233,88,34)" fg:x="145891" fg:w="147"/><text x="87.2525%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (14,157 samples, 8.44%)</title><rect x="78.6482%" y="709" width="8.4426%" height="15" fill="rgb(223,209,46)" fg:x="131882" fg:w="14157"/><text x="78.8982%" y="719.50">alloc::vec::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (14,157 samples, 8.44%)</title><rect x="78.6482%" y="693" width="8.4426%" height="15" fill="rgb(250,43,18)" fg:x="131882" fg:w="14157"/><text x="78.8982%" y="703.50">alloc::vec::..</text></g><g><title>core::ptr::drop_in_place&lt;[hprof_slurp::parser::record::Record]&gt; (14,157 samples, 8.44%)</title><rect x="78.6482%" y="677" width="8.4426%" height="15" fill="rgb(208,13,10)" fg:x="131882" fg:w="14157"/><text x="78.8982%" y="687.50">core::ptr::d..</text></g><g><title>core::ptr::drop_in_place&lt;hprof_slurp::parser::record::Record&gt; (10,127 samples, 6.04%)</title><rect x="81.0515%" y="661" width="6.0393%" height="15" fill="rgb(212,200,36)" fg:x="135912" fg:w="10127"/><text x="81.3015%" y="671.50">core::pt..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.01%)</title><rect x="87.0908%" y="613" width="0.0113%" height="15" fill="rgb(225,90,30)" fg:x="146039" fg:w="19"/><text x="87.3408%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (19 samples, 0.01%)</title><rect x="87.0908%" y="597" width="0.0113%" height="15" fill="rgb(236,182,39)" fg:x="146039" fg:w="19"/><text x="87.3408%" y="607.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (19 samples, 0.01%)</title><rect x="87.0908%" y="581" width="0.0113%" height="15" fill="rgb(212,144,35)" fg:x="146039" fg:w="19"/><text x="87.3408%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (19 samples, 0.01%)</title><rect x="87.0908%" y="565" width="0.0113%" height="15" fill="rgb(228,63,44)" fg:x="146039" fg:w="19"/><text x="87.3408%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u64,alloc::string::String)&gt; (19 samples, 0.01%)</title><rect x="87.0908%" y="549" width="0.0113%" height="15" fill="rgb(228,109,6)" fg:x="146039" fg:w="19"/><text x="87.3408%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (19 samples, 0.01%)</title><rect x="87.0908%" y="533" width="0.0113%" height="15" fill="rgb(238,117,24)" fg:x="146039" fg:w="19"/><text x="87.3408%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (19 samples, 0.01%)</title><rect x="87.0908%" y="517" width="0.0113%" height="15" fill="rgb(242,26,26)" fg:x="146039" fg:w="19"/><text x="87.3408%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (19 samples, 0.01%)</title><rect x="87.0908%" y="501" width="0.0113%" height="15" fill="rgb(221,92,48)" fg:x="146039" fg:w="19"/><text x="87.3408%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.01%)</title><rect x="87.0908%" y="485" width="0.0113%" height="15" fill="rgb(209,209,32)" fg:x="146039" fg:w="19"/><text x="87.3408%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.01%)</title><rect x="87.0919%" y="469" width="0.0101%" height="15" fill="rgb(221,70,22)" fg:x="146041" fg:w="17"/><text x="87.3419%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.01%)</title><rect x="87.0919%" y="453" width="0.0101%" height="15" fill="rgb(248,145,5)" fg:x="146041" fg:w="17"/><text x="87.3419%" y="463.50"></text></g><g><title>__GI___libc_free (17 samples, 0.01%)</title><rect x="87.0919%" y="437" width="0.0101%" height="15" fill="rgb(226,116,26)" fg:x="146041" fg:w="17"/><text x="87.3419%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;ahash::hash_map::AHashMap&lt;u64,alloc::string::String&gt;&gt; (20 samples, 0.01%)</title><rect x="87.0908%" y="677" width="0.0119%" height="15" fill="rgb(244,5,17)" fg:x="146039" fg:w="20"/><text x="87.3408%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u64,alloc::string::String,ahash::random_state::RandomState&gt;&gt; (20 samples, 0.01%)</title><rect x="87.0908%" y="661" width="0.0119%" height="15" fill="rgb(252,159,33)" fg:x="146039" fg:w="20"/><text x="87.3408%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u64,alloc::string::String,ahash::random_state::RandomState&gt;&gt; (20 samples, 0.01%)</title><rect x="87.0908%" y="645" width="0.0119%" height="15" fill="rgb(206,71,0)" fg:x="146039" fg:w="20"/><text x="87.3408%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u64,alloc::string::String)&gt;&gt; (20 samples, 0.01%)</title><rect x="87.0908%" y="629" width="0.0119%" height="15" fill="rgb(233,118,54)" fg:x="146039" fg:w="20"/><text x="87.3408%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;hprof_slurp::result_recorder::ResultRecorder::start::{{closure}}&gt; (38 samples, 0.02%)</title><rect x="87.0908%" y="709" width="0.0227%" height="15" fill="rgb(234,83,48)" fg:x="146039" fg:w="38"/><text x="87.3408%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;hprof_slurp::result_recorder::ResultRecorder&gt; (38 samples, 0.02%)</title><rect x="87.0908%" y="693" width="0.0227%" height="15" fill="rgb(228,3,54)" fg:x="146039" fg:w="38"/><text x="87.3408%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;ahash::hash_map::AHashMap&lt;u64,u64&gt;&gt; (18 samples, 0.01%)</title><rect x="87.1027%" y="677" width="0.0107%" height="15" fill="rgb(226,155,13)" fg:x="146059" fg:w="18"/><text x="87.3527%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u64,u64,ahash::random_state::RandomState&gt;&gt; (18 samples, 0.01%)</title><rect x="87.1027%" y="661" width="0.0107%" height="15" fill="rgb(241,28,37)" fg:x="146059" fg:w="18"/><text x="87.3527%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u64,u64,ahash::random_state::RandomState&gt;&gt; (18 samples, 0.01%)</title><rect x="87.1027%" y="645" width="0.0107%" height="15" fill="rgb(233,93,10)" fg:x="146059" fg:w="18"/><text x="87.3527%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u64,u64)&gt;&gt; (18 samples, 0.01%)</title><rect x="87.1027%" y="629" width="0.0107%" height="15" fill="rgb(225,113,19)" fg:x="146059" fg:w="18"/><text x="87.3527%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="87.1027%" y="613" width="0.0107%" height="15" fill="rgb(241,2,18)" fg:x="146059" fg:w="18"/><text x="87.3527%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (18 samples, 0.01%)</title><rect x="87.1027%" y="597" width="0.0107%" height="15" fill="rgb(228,207,21)" fg:x="146059" fg:w="18"/><text x="87.3527%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (18 samples, 0.01%)</title><rect x="87.1027%" y="581" width="0.0107%" height="15" fill="rgb(213,211,35)" fg:x="146059" fg:w="18"/><text x="87.3527%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.01%)</title><rect x="87.1027%" y="565" width="0.0107%" height="15" fill="rgb(209,83,10)" fg:x="146059" fg:w="18"/><text x="87.3527%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.01%)</title><rect x="87.1027%" y="549" width="0.0107%" height="15" fill="rgb(209,164,1)" fg:x="146059" fg:w="18"/><text x="87.3527%" y="559.50"></text></g><g><title>__GI___libc_free (18 samples, 0.01%)</title><rect x="87.1027%" y="533" width="0.0107%" height="15" fill="rgb(213,184,43)" fg:x="146059" fg:w="18"/><text x="87.3527%" y="543.50"></text></g><g><title>_int_free (18 samples, 0.01%)</title><rect x="87.1027%" y="517" width="0.0107%" height="15" fill="rgb(231,61,34)" fg:x="146059" fg:w="18"/><text x="87.3527%" y="527.50"></text></g><g><title>malloc_consolidate (18 samples, 0.01%)</title><rect x="87.1027%" y="501" width="0.0107%" height="15" fill="rgb(235,75,3)" fg:x="146059" fg:w="18"/><text x="87.3527%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (316 samples, 0.19%)</title><rect x="87.1134%" y="677" width="0.1884%" height="15" fill="rgb(220,106,47)" fg:x="146077" fg:w="316"/><text x="87.3634%" y="687.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (313 samples, 0.19%)</title><rect x="87.1152%" y="661" width="0.1867%" height="15" fill="rgb(210,196,33)" fg:x="146080" fg:w="313"/><text x="87.3652%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (313 samples, 0.19%)</title><rect x="87.1152%" y="645" width="0.1867%" height="15" fill="rgb(229,154,42)" fg:x="146080" fg:w="313"/><text x="87.3652%" y="655.50"></text></g><g><title>__sysvec_apic_timer_interrupt (17 samples, 0.01%)</title><rect x="93.7103%" y="629" width="0.0101%" height="15" fill="rgb(228,114,26)" fg:x="157139" fg:w="17"/><text x="93.9603%" y="639.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (25 samples, 0.01%)</title><rect x="93.7085%" y="661" width="0.0149%" height="15" fill="rgb(208,144,1)" fg:x="157136" fg:w="25"/><text x="93.9585%" y="671.50"></text></g><g><title>sysvec_apic_timer_interrupt (22 samples, 0.01%)</title><rect x="93.7103%" y="645" width="0.0131%" height="15" fill="rgb(239,112,37)" fg:x="157139" fg:w="22"/><text x="93.9603%" y="655.50"></text></g><g><title>hprof_slurp::result_recorder::ArrayCounter::add_elements_from_array (49 samples, 0.03%)</title><rect x="93.7240%" y="661" width="0.0292%" height="15" fill="rgb(210,96,50)" fg:x="157162" fg:w="49"/><text x="93.9740%" y="671.50"></text></g><g><title>hprof_slurp::result_recorder::ClassInstanceCounter::add_instance (724 samples, 0.43%)</title><rect x="93.7532%" y="661" width="0.4318%" height="15" fill="rgb(222,178,2)" fg:x="157211" fg:w="724"/><text x="94.0032%" y="671.50"></text></g><g><title>ahash::operations::folded_multiply (1,033 samples, 0.62%)</title><rect x="94.1856%" y="581" width="0.6160%" height="15" fill="rgb(226,74,18)" fg:x="157936" fg:w="1033"/><text x="94.4356%" y="591.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (682 samples, 0.41%)</title><rect x="94.3949%" y="565" width="0.4067%" height="15" fill="rgb(225,67,54)" fg:x="158287" fg:w="682"/><text x="94.6449%" y="575.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1,390 samples, 0.83%)</title><rect x="94.1856%" y="597" width="0.8289%" height="15" fill="rgb(251,92,32)" fg:x="157936" fg:w="1390"/><text x="94.4356%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (357 samples, 0.21%)</title><rect x="94.8016%" y="581" width="0.2129%" height="15" fill="rgb(228,149,22)" fg:x="158969" fg:w="357"/><text x="95.0516%" y="591.50"></text></g><g><title>&lt;hprof_slurp::parser::gc_record::FieldType as core::hash::Hash&gt;::hash (21 samples, 0.01%)</title><rect x="95.0145%" y="581" width="0.0125%" height="15" fill="rgb(243,54,13)" fg:x="159326" fg:w="21"/><text x="95.2645%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (21 samples, 0.01%)</title><rect x="95.0145%" y="565" width="0.0125%" height="15" fill="rgb(243,180,28)" fg:x="159326" fg:w="21"/><text x="95.2645%" y="575.50"></text></g><g><title>core::hash::Hasher::write_isize (21 samples, 0.01%)</title><rect x="95.0145%" y="549" width="0.0125%" height="15" fill="rgb(208,167,24)" fg:x="159326" fg:w="21"/><text x="95.2645%" y="559.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (21 samples, 0.01%)</title><rect x="95.0145%" y="533" width="0.0125%" height="15" fill="rgb(245,73,45)" fg:x="159326" fg:w="21"/><text x="95.2645%" y="543.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (21 samples, 0.01%)</title><rect x="95.0145%" y="517" width="0.0125%" height="15" fill="rgb(237,203,48)" fg:x="159326" fg:w="21"/><text x="95.2645%" y="527.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (21 samples, 0.01%)</title><rect x="95.0145%" y="501" width="0.0125%" height="15" fill="rgb(211,197,16)" fg:x="159326" fg:w="21"/><text x="95.2645%" y="511.50"></text></g><g><title>hashbrown::map::make_insert_hash (2,077 samples, 1.24%)</title><rect x="94.1856%" y="629" width="1.2386%" height="15" fill="rgb(243,99,51)" fg:x="157936" fg:w="2077"/><text x="94.4356%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,077 samples, 1.24%)</title><rect x="94.1856%" y="613" width="1.2386%" height="15" fill="rgb(215,123,29)" fg:x="157936" fg:w="2077"/><text x="94.4356%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (687 samples, 0.41%)</title><rect x="95.0145%" y="597" width="0.4097%" height="15" fill="rgb(239,186,37)" fg:x="159326" fg:w="687"/><text x="95.2645%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (666 samples, 0.40%)</title><rect x="95.0270%" y="581" width="0.3972%" height="15" fill="rgb(252,136,39)" fg:x="159347" fg:w="666"/><text x="95.2770%" y="591.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (666 samples, 0.40%)</title><rect x="95.0270%" y="565" width="0.3972%" height="15" fill="rgb(223,213,32)" fg:x="159347" fg:w="666"/><text x="95.2770%" y="575.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (666 samples, 0.40%)</title><rect x="95.0270%" y="549" width="0.3972%" height="15" fill="rgb(233,115,5)" fg:x="159347" fg:w="666"/><text x="95.2770%" y="559.50"></text></g><g><title>ahash::operations::folded_multiply (659 samples, 0.39%)</title><rect x="95.0312%" y="533" width="0.3930%" height="15" fill="rgb(207,226,44)" fg:x="159354" fg:w="659"/><text x="95.2812%" y="543.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (633 samples, 0.38%)</title><rect x="95.0467%" y="517" width="0.3775%" height="15" fill="rgb(208,126,0)" fg:x="159380" fg:w="633"/><text x="95.2967%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,475 samples, 0.88%)</title><rect x="95.6764%" y="597" width="0.8796%" height="15" fill="rgb(244,66,21)" fg:x="160436" fg:w="1475"/><text x="95.9264%" y="607.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (869 samples, 0.52%)</title><rect x="96.0378%" y="581" width="0.5182%" height="15" fill="rgb(222,97,12)" fg:x="161042" fg:w="869"/><text x="96.2878%" y="591.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (21 samples, 0.01%)</title><rect x="96.5579%" y="597" width="0.0125%" height="15" fill="rgb(219,213,19)" fg:x="161914" fg:w="21"/><text x="96.8079%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (802 samples, 0.48%)</title><rect x="96.5704%" y="581" width="0.4783%" height="15" fill="rgb(252,169,30)" fg:x="161935" fg:w="802"/><text x="96.8204%" y="591.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (802 samples, 0.48%)</title><rect x="96.5704%" y="565" width="0.4783%" height="15" fill="rgb(206,32,51)" fg:x="161935" fg:w="802"/><text x="96.8204%" y="575.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (790 samples, 0.47%)</title><rect x="96.5775%" y="549" width="0.4711%" height="15" fill="rgb(250,172,42)" fg:x="161947" fg:w="790"/><text x="96.8275%" y="559.50"></text></g><g><title>&lt;hprof_slurp::parser::gc_record::FieldType as core::cmp::PartialEq&gt;::eq (22 samples, 0.01%)</title><rect x="97.0487%" y="565" width="0.0131%" height="15" fill="rgb(209,34,43)" fg:x="162737" fg:w="22"/><text x="97.2987%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2,284 samples, 1.36%)</title><rect x="96.5704%" y="597" width="1.3621%" height="15" fill="rgb(223,11,35)" fg:x="161935" fg:w="2284"/><text x="96.8204%" y="607.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (1,482 samples, 0.88%)</title><rect x="97.0487%" y="581" width="0.8838%" height="15" fill="rgb(251,219,26)" fg:x="162737" fg:w="1482"/><text x="97.2987%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (1,460 samples, 0.87%)</title><rect x="97.0618%" y="565" width="0.8707%" height="15" fill="rgb(231,119,3)" fg:x="162759" fg:w="1460"/><text x="97.3118%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1,350 samples, 0.81%)</title><rect x="97.9324%" y="597" width="0.8051%" height="15" fill="rgb(216,97,11)" fg:x="164219" fg:w="1350"/><text x="98.1824%" y="607.50"></text></g><g><title>hashbrown::raw::h2 (607 samples, 0.36%)</title><rect x="98.7387%" y="597" width="0.3620%" height="15" fill="rgb(223,59,9)" fg:x="165571" fg:w="607"/><text x="98.9887%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (265 samples, 0.16%)</title><rect x="99.1007%" y="597" width="0.1580%" height="15" fill="rgb(233,93,31)" fg:x="166178" fg:w="265"/><text x="99.3507%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (265 samples, 0.16%)</title><rect x="99.1007%" y="581" width="0.1580%" height="15" fill="rgb(239,81,33)" fg:x="166178" fg:w="265"/><text x="99.3507%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (265 samples, 0.16%)</title><rect x="99.1007%" y="565" width="0.1580%" height="15" fill="rgb(213,120,34)" fg:x="166178" fg:w="265"/><text x="99.3507%" y="575.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (901 samples, 0.54%)</title><rect x="99.2587%" y="597" width="0.5373%" height="15" fill="rgb(243,49,53)" fg:x="166443" fg:w="901"/><text x="99.5087%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (901 samples, 0.54%)</title><rect x="99.2587%" y="581" width="0.5373%" height="15" fill="rgb(247,216,33)" fg:x="166443" fg:w="901"/><text x="99.5087%" y="591.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (9,661 samples, 5.76%)</title><rect x="94.1850%" y="661" width="5.7614%" height="15" fill="rgb(226,26,14)" fg:x="157935" fg:w="9661"/><text x="94.4350%" y="671.50">std::co..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (9,661 samples, 5.76%)</title><rect x="94.1850%" y="645" width="5.7614%" height="15" fill="rgb(215,49,53)" fg:x="157935" fg:w="9661"/><text x="94.4350%" y="655.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7,583 samples, 4.52%)</title><rect x="95.4242%" y="629" width="4.5221%" height="15" fill="rgb(245,162,40)" fg:x="160013" fg:w="7583"/><text x="95.6742%" y="639.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (7,583 samples, 4.52%)</title><rect x="95.4242%" y="613" width="4.5221%" height="15" fill="rgb(229,68,17)" fg:x="160013" fg:w="7583"/><text x="95.6742%" y="623.50">hashb..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (252 samples, 0.15%)</title><rect x="99.7960%" y="597" width="0.1503%" height="15" fill="rgb(213,182,10)" fg:x="167344" fg:w="252"/><text x="100.0460%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (252 samples, 0.15%)</title><rect x="99.7960%" y="581" width="0.1503%" height="15" fill="rgb(245,125,30)" fg:x="167344" fg:w="252"/><text x="100.0460%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (252 samples, 0.15%)</title><rect x="99.7960%" y="565" width="0.1503%" height="15" fill="rgb(232,202,2)" fg:x="167344" fg:w="252"/><text x="100.0460%" y="575.50"></text></g><g><title>hprof_slurp::result_recorder::ResultRecorder::record_records (21,520 samples, 12.83%)</title><rect x="87.1134%" y="709" width="12.8335%" height="15" fill="rgb(237,140,51)" fg:x="146077" fg:w="21520"/><text x="87.3634%" y="719.50">hprof_slurp::result..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (21,520 samples, 12.83%)</title><rect x="87.1134%" y="693" width="12.8335%" height="15" fill="rgb(236,157,25)" fg:x="146077" fg:w="21520"/><text x="87.3634%" y="703.50">&lt;core::slice::iter:..</text></g><g><title>hprof_slurp::result_recorder::ResultRecorder::record_records::{{closure}} (21,204 samples, 12.65%)</title><rect x="87.3019%" y="677" width="12.6451%" height="15" fill="rgb(219,209,0)" fg:x="146393" fg:w="21204"/><text x="87.5519%" y="687.50">hprof_slurp::result..</text></g><g><title>std::sync::mpsc::blocking::WaitToken::wait (17 samples, 0.01%)</title><rect x="99.9505%" y="677" width="0.0101%" height="15" fill="rgb(240,116,54)" fg:x="167603" fg:w="17"/><text x="100.2005%" y="687.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::recv (18 samples, 0.01%)</title><rect x="99.9505%" y="709" width="0.0107%" height="15" fill="rgb(216,10,36)" fg:x="167603" fg:w="18"/><text x="100.2005%" y="719.50"></text></g><g><title>std::sync::mpsc::stream::Packet&lt;T&gt;::recv (18 samples, 0.01%)</title><rect x="99.9505%" y="693" width="0.0107%" height="15" fill="rgb(222,72,44)" fg:x="167603" fg:w="18"/><text x="100.2005%" y="703.50"></text></g><g><title>__clone3 (35,741 samples, 21.31%)</title><rect x="78.6482%" y="933" width="21.3142%" height="15" fill="rgb(232,159,9)" fg:x="131882" fg:w="35741"/><text x="78.8982%" y="943.50">__clone3</text></g><g><title>start_thread (35,741 samples, 21.31%)</title><rect x="78.6482%" y="917" width="21.3142%" height="15" fill="rgb(210,39,32)" fg:x="131882" fg:w="35741"/><text x="78.8982%" y="927.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (35,741 samples, 21.31%)</title><rect x="78.6482%" y="901" width="21.3142%" height="15" fill="rgb(216,194,45)" fg:x="131882" fg:w="35741"/><text x="78.8982%" y="911.50">std::sys::unix::thread::Thread::ne..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (35,741 samples, 21.31%)</title><rect x="78.6482%" y="885" width="21.3142%" height="15" fill="rgb(218,18,35)" fg:x="131882" fg:w="35741"/><text x="78.8982%" y="895.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::o..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (35,741 samples, 21.31%)</title><rect x="78.6482%" y="869" width="21.3142%" height="15" fill="rgb(207,83,51)" fg:x="131882" fg:w="35741"/><text x="78.8982%" y="879.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::o..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (35,741 samples, 21.31%)</title><rect x="78.6482%" y="853" width="21.3142%" height="15" fill="rgb(225,63,43)" fg:x="131882" fg:w="35741"/><text x="78.8982%" y="863.50">core::ops::function::FnOnce::call_..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (35,741 samples, 21.31%)</title><rect x="78.6482%" y="837" width="21.3142%" height="15" fill="rgb(207,57,36)" fg:x="131882" fg:w="35741"/><text x="78.8982%" y="847.50">std::thread::Builder::spawn_unchec..</text></g><g><title>std::panic::catch_unwind (35,741 samples, 21.31%)</title><rect x="78.6482%" y="821" width="21.3142%" height="15" fill="rgb(216,99,33)" fg:x="131882" fg:w="35741"/><text x="78.8982%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (35,741 samples, 21.31%)</title><rect x="78.6482%" y="805" width="21.3142%" height="15" fill="rgb(225,42,16)" fg:x="131882" fg:w="35741"/><text x="78.8982%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (35,741 samples, 21.31%)</title><rect x="78.6482%" y="789" width="21.3142%" height="15" fill="rgb(220,201,45)" fg:x="131882" fg:w="35741"/><text x="78.8982%" y="799.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (35,741 samples, 21.31%)</title><rect x="78.6482%" y="773" width="21.3142%" height="15" fill="rgb(225,33,4)" fg:x="131882" fg:w="35741"/><text x="78.8982%" y="783.50">&lt;core::panic::unwind_safe::AssertU..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (35,741 samples, 21.31%)</title><rect x="78.6482%" y="757" width="21.3142%" height="15" fill="rgb(224,33,50)" fg:x="131882" fg:w="35741"/><text x="78.8982%" y="767.50">std::thread::Builder::spawn_unchec..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (35,741 samples, 21.31%)</title><rect x="78.6482%" y="741" width="21.3142%" height="15" fill="rgb(246,198,51)" fg:x="131882" fg:w="35741"/><text x="78.8982%" y="751.50">std::sys_common::backtrace::__rust..</text></g><g><title>hprof_slurp::result_recorder::ResultRecorder::start::{{closure}} (35,741 samples, 21.31%)</title><rect x="78.6482%" y="725" width="21.3142%" height="15" fill="rgb(205,22,4)" fg:x="131882" fg:w="35741"/><text x="78.8982%" y="735.50">hprof_slurp::result_recorder::Resu..</text></g><g><title>hprof-recorder (37,676 samples, 22.47%)</title><rect x="77.4990%" y="949" width="22.4682%" height="15" fill="rgb(206,3,8)" fg:x="129955" fg:w="37676"/><text x="77.7490%" y="959.50">hprof-recorder</text></g><g><title>indicatif::progress_bar::ProgressBar::set_position (21 samples, 0.01%)</title><rect x="99.9720%" y="629" width="0.0125%" height="15" fill="rgb(251,23,15)" fg:x="167639" fg:w="21"/><text x="100.2220%" y="639.50"></text></g><g><title>indicatif::state::BarState::tick (21 samples, 0.01%)</title><rect x="99.9720%" y="613" width="0.0125%" height="15" fill="rgb(252,88,28)" fg:x="167639" fg:w="21"/><text x="100.2220%" y="623.50"></text></g><g><title>indicatif::state::BarState::draw (21 samples, 0.01%)</title><rect x="99.9720%" y="597" width="0.0125%" height="15" fill="rgb(212,127,14)" fg:x="167639" fg:w="21"/><text x="100.2220%" y="607.50"></text></g><g><title>std::panic::catch_unwind (22 samples, 0.01%)</title><rect x="99.9720%" y="789" width="0.0131%" height="15" fill="rgb(247,145,37)" fg:x="167639" fg:w="22"/><text x="100.2220%" y="799.50"></text></g><g><title>std::panicking::try (22 samples, 0.01%)</title><rect x="99.9720%" y="773" width="0.0131%" height="15" fill="rgb(209,117,53)" fg:x="167639" fg:w="22"/><text x="100.2220%" y="783.50"></text></g><g><title>std::panicking::try::do_call (22 samples, 0.01%)</title><rect x="99.9720%" y="757" width="0.0131%" height="15" fill="rgb(212,90,42)" fg:x="167639" fg:w="22"/><text x="100.2220%" y="767.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (22 samples, 0.01%)</title><rect x="99.9720%" y="741" width="0.0131%" height="15" fill="rgb(218,164,37)" fg:x="167639" fg:w="22"/><text x="100.2220%" y="751.50"></text></g><g><title>std::rt::lang_start::{{closure}} (22 samples, 0.01%)</title><rect x="99.9720%" y="725" width="0.0131%" height="15" fill="rgb(246,65,34)" fg:x="167639" fg:w="22"/><text x="100.2220%" y="735.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (22 samples, 0.01%)</title><rect x="99.9720%" y="709" width="0.0131%" height="15" fill="rgb(231,100,33)" fg:x="167639" fg:w="22"/><text x="100.2220%" y="719.50"></text></g><g><title>core::ops::function::FnOnce::call_once (22 samples, 0.01%)</title><rect x="99.9720%" y="693" width="0.0131%" height="15" fill="rgb(228,126,14)" fg:x="167639" fg:w="22"/><text x="100.2220%" y="703.50"></text></g><g><title>hprof_slurp::main (22 samples, 0.01%)</title><rect x="99.9720%" y="677" width="0.0131%" height="15" fill="rgb(215,173,21)" fg:x="167639" fg:w="22"/><text x="100.2220%" y="687.50"></text></g><g><title>hprof_slurp::main_result (22 samples, 0.01%)</title><rect x="99.9720%" y="661" width="0.0131%" height="15" fill="rgb(210,6,40)" fg:x="167639" fg:w="22"/><text x="100.2220%" y="671.50"></text></g><g><title>hprof_slurp::slurp::slurp_file (22 samples, 0.01%)</title><rect x="99.9720%" y="645" width="0.0131%" height="15" fill="rgb(212,48,18)" fg:x="167639" fg:w="22"/><text x="100.2220%" y="655.50"></text></g><g><title>_start (23 samples, 0.01%)</title><rect x="99.9720%" y="933" width="0.0137%" height="15" fill="rgb(230,214,11)" fg:x="167639" fg:w="23"/><text x="100.2220%" y="943.50"></text></g><g><title>__libc_start_main_impl (23 samples, 0.01%)</title><rect x="99.9720%" y="917" width="0.0137%" height="15" fill="rgb(254,105,39)" fg:x="167639" fg:w="23"/><text x="100.2220%" y="927.50"></text></g><g><title>__libc_start_call_main (23 samples, 0.01%)</title><rect x="99.9720%" y="901" width="0.0137%" height="15" fill="rgb(245,158,5)" fg:x="167639" fg:w="23"/><text x="100.2220%" y="911.50"></text></g><g><title>main (23 samples, 0.01%)</title><rect x="99.9720%" y="885" width="0.0137%" height="15" fill="rgb(249,208,11)" fg:x="167639" fg:w="23"/><text x="100.2220%" y="895.50"></text></g><g><title>std::rt::lang_start_internal (23 samples, 0.01%)</title><rect x="99.9720%" y="869" width="0.0137%" height="15" fill="rgb(210,39,28)" fg:x="167639" fg:w="23"/><text x="100.2220%" y="879.50"></text></g><g><title>std::panic::catch_unwind (23 samples, 0.01%)</title><rect x="99.9720%" y="853" width="0.0137%" height="15" fill="rgb(211,56,53)" fg:x="167639" fg:w="23"/><text x="100.2220%" y="863.50"></text></g><g><title>std::panicking::try (23 samples, 0.01%)</title><rect x="99.9720%" y="837" width="0.0137%" height="15" fill="rgb(226,201,30)" fg:x="167639" fg:w="23"/><text x="100.2220%" y="847.50"></text></g><g><title>std::panicking::try::do_call (23 samples, 0.01%)</title><rect x="99.9720%" y="821" width="0.0137%" height="15" fill="rgb(239,101,34)" fg:x="167639" fg:w="23"/><text x="100.2220%" y="831.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (23 samples, 0.01%)</title><rect x="99.9720%" y="805" width="0.0137%" height="15" fill="rgb(226,209,5)" fg:x="167639" fg:w="23"/><text x="100.2220%" y="815.50"></text></g><g><title>hprof-slurp (50 samples, 0.03%)</title><rect x="99.9672%" y="949" width="0.0298%" height="15" fill="rgb(250,105,47)" fg:x="167631" fg:w="50"/><text x="100.2172%" y="959.50"></text></g><g><title>all (167,686 samples, 100%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(230,72,3)" fg:x="0" fg:w="167686"/><text x="0.2500%" y="975.50"></text></g></svg></svg>