<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="982" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="965.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="965.00"> </text><svg id="frames" x="10" width="1180" total_samples="252887"><g><title>&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (1,089 samples, 0.43%)</title><rect x="0.0004%" y="885" width="0.4306%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1089"/><text x="0.2504%" y="895.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,144 samples, 0.45%)</title><rect x="0.4310%" y="885" width="0.4524%" height="15" fill="rgb(217,0,24)" fg:x="1090" fg:w="1144"/><text x="0.6810%" y="895.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1,192 samples, 0.47%)</title><rect x="0.8901%" y="885" width="0.4714%" height="15" fill="rgb(221,193,54)" fg:x="2251" fg:w="1192"/><text x="1.1401%" y="895.50"></text></g><g><title>[anon] (3,480 samples, 1.38%)</title><rect x="0.0000%" y="901" width="1.3761%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3480"/><text x="0.2500%" y="911.50"></text></g><g><title>&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (1,107 samples, 0.44%)</title><rect x="1.3761%" y="885" width="0.4377%" height="15" fill="rgb(208,68,35)" fg:x="3480" fg:w="1107"/><text x="1.6261%" y="895.50"></text></g><g><title>hprof_slurp::parser::record_parser::HprofRecordParser::parse_hprof_record::{{closure}} (732 samples, 0.29%)</title><rect x="2.3461%" y="869" width="0.2895%" height="15" fill="rgb(232,128,0)" fg:x="5933" fg:w="732"/><text x="2.5961%" y="879.50"></text></g><g><title>hprof_slurp::parser::record_parser::parse_gc_record (34 samples, 0.01%)</title><rect x="2.6221%" y="853" width="0.0134%" height="15" fill="rgb(207,160,47)" fg:x="6631" fg:w="34"/><text x="2.8721%" y="863.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (109 samples, 0.04%)</title><rect x="2.6356%" y="853" width="0.0431%" height="15" fill="rgb(228,23,34)" fg:x="6665" fg:w="109"/><text x="2.8856%" y="863.50"></text></g><g><title>core::ops::function::FnMut::call_mut (109 samples, 0.04%)</title><rect x="2.6356%" y="837" width="0.0431%" height="15" fill="rgb(218,30,26)" fg:x="6665" fg:w="109"/><text x="2.8856%" y="847.50"></text></g><g><title>hprof_slurp::parser::record_parser::parse_id (109 samples, 0.04%)</title><rect x="2.6356%" y="821" width="0.0431%" height="15" fill="rgb(220,122,19)" fg:x="6665" fg:w="109"/><text x="2.8856%" y="831.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2,198 samples, 0.87%)</title><rect x="1.8139%" y="885" width="0.8692%" height="15" fill="rgb(250,228,42)" fg:x="4587" fg:w="2198"/><text x="2.0639%" y="895.50"></text></g><g><title>nom::multi::count::{{closure}} (120 samples, 0.05%)</title><rect x="2.6356%" y="869" width="0.0475%" height="15" fill="rgb(240,193,28)" fg:x="6665" fg:w="120"/><text x="2.8856%" y="879.50"></text></g><g><title>__memcpy_avx_unaligned_erms (501 samples, 0.20%)</title><rect x="2.6854%" y="885" width="0.1981%" height="15" fill="rgb(216,20,37)" fg:x="6791" fg:w="501"/><text x="2.9354%" y="895.50"></text></g><g><title>_int_malloc (34 samples, 0.01%)</title><rect x="2.8855%" y="885" width="0.0134%" height="15" fill="rgb(206,188,39)" fg:x="7297" fg:w="34"/><text x="3.1355%" y="895.50"></text></g><g><title>hprof_slurp::parser::primitive_parsers::parse_u64 (130 samples, 0.05%)</title><rect x="2.9092%" y="885" width="0.0514%" height="15" fill="rgb(217,207,13)" fg:x="7357" fg:w="130"/><text x="3.1592%" y="895.50"></text></g><g><title>hprof_slurp::parser::record_parser::HprofRecordParser::parse_streaming (1,738 samples, 0.69%)</title><rect x="2.9606%" y="885" width="0.6873%" height="15" fill="rgb(231,73,38)" fg:x="7487" fg:w="1738"/><text x="3.2106%" y="895.50"></text></g><g><title>hprof_slurp::parser::record_parser::lazy_many1::{{closure}} (1,737 samples, 0.69%)</title><rect x="2.9610%" y="869" width="0.6869%" height="15" fill="rgb(225,20,46)" fg:x="7488" fg:w="1737"/><text x="3.2110%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (553 samples, 0.22%)</title><rect x="3.4292%" y="853" width="0.2187%" height="15" fill="rgb(210,31,41)" fg:x="8672" fg:w="553"/><text x="3.6792%" y="863.50"></text></g><g><title>core::ptr::write (553 samples, 0.22%)</title><rect x="3.4292%" y="837" width="0.2187%" height="15" fill="rgb(221,200,47)" fg:x="8672" fg:w="553"/><text x="3.6792%" y="847.50"></text></g><g><title>[unknown] (5,752 samples, 2.27%)</title><rect x="1.3761%" y="901" width="2.2745%" height="15" fill="rgb(226,26,5)" fg:x="3480" fg:w="5752"/><text x="1.6261%" y="911.50">[..</text></g><g><title>alloc_pages_vma (31 samples, 0.01%)</title><rect x="6.7243%" y="501" width="0.0123%" height="15" fill="rgb(249,33,26)" fg:x="17005" fg:w="31"/><text x="6.9743%" y="511.50"></text></g><g><title>__alloc_pages (30 samples, 0.01%)</title><rect x="6.7247%" y="485" width="0.0119%" height="15" fill="rgb(235,183,28)" fg:x="17006" fg:w="30"/><text x="6.9747%" y="495.50"></text></g><g><title>get_page_from_freelist (29 samples, 0.01%)</title><rect x="6.7251%" y="469" width="0.0115%" height="15" fill="rgb(221,5,38)" fg:x="17007" fg:w="29"/><text x="6.9751%" y="479.50"></text></g><g><title>__handle_mm_fault (74 samples, 0.03%)</title><rect x="6.7232%" y="549" width="0.0293%" height="15" fill="rgb(247,18,42)" fg:x="17002" fg:w="74"/><text x="6.9732%" y="559.50"></text></g><g><title>handle_pte_fault (73 samples, 0.03%)</title><rect x="6.7236%" y="533" width="0.0289%" height="15" fill="rgb(241,131,45)" fg:x="17003" fg:w="73"/><text x="6.9736%" y="543.50"></text></g><g><title>do_anonymous_page (72 samples, 0.03%)</title><rect x="6.7240%" y="517" width="0.0285%" height="15" fill="rgb(249,31,29)" fg:x="17004" fg:w="72"/><text x="6.9740%" y="527.50"></text></g><g><title>handle_mm_fault (77 samples, 0.03%)</title><rect x="6.7224%" y="565" width="0.0304%" height="15" fill="rgb(225,111,53)" fg:x="17000" fg:w="77"/><text x="6.9724%" y="575.50"></text></g><g><title>do_user_addr_fault (85 samples, 0.03%)</title><rect x="6.7196%" y="581" width="0.0336%" height="15" fill="rgb(238,160,17)" fg:x="16993" fg:w="85"/><text x="6.9696%" y="591.50"></text></g><g><title>asm_exc_page_fault (86 samples, 0.03%)</title><rect x="6.7196%" y="613" width="0.0340%" height="15" fill="rgb(214,148,48)" fg:x="16993" fg:w="86"/><text x="6.9696%" y="623.50"></text></g><g><title>exc_page_fault (86 samples, 0.03%)</title><rect x="6.7196%" y="597" width="0.0340%" height="15" fill="rgb(232,36,49)" fg:x="16993" fg:w="86"/><text x="6.9696%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (7,855 samples, 3.11%)</title><rect x="3.6514%" y="677" width="3.1061%" height="15" fill="rgb(209,103,24)" fg:x="9234" fg:w="7855"/><text x="3.9014%" y="687.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (7,855 samples, 3.11%)</title><rect x="3.6514%" y="661" width="3.1061%" height="15" fill="rgb(229,88,8)" fg:x="9234" fg:w="7855"/><text x="3.9014%" y="671.50">all..</text></g><g><title>core::intrinsics::copy_nonoverlapping (7,854 samples, 3.11%)</title><rect x="3.6518%" y="645" width="3.1057%" height="15" fill="rgb(213,181,19)" fg:x="9235" fg:w="7854"/><text x="3.9018%" y="655.50">cor..</text></g><g><title>__memcpy_avx_unaligned_erms (7,854 samples, 3.11%)</title><rect x="3.6518%" y="629" width="3.1057%" height="15" fill="rgb(254,191,54)" fg:x="9235" fg:w="7854"/><text x="3.9018%" y="639.50">__m..</text></g><g><title>__mod_memcg_lruvec_state (46 samples, 0.02%)</title><rect x="6.8722%" y="405" width="0.0182%" height="15" fill="rgb(241,83,37)" fg:x="17379" fg:w="46"/><text x="7.1222%" y="415.50"></text></g><g><title>__mod_lruvec_state (82 samples, 0.03%)</title><rect x="6.8683%" y="421" width="0.0324%" height="15" fill="rgb(233,36,39)" fg:x="17369" fg:w="82"/><text x="7.1183%" y="431.50"></text></g><g><title>__free_one_page (240 samples, 0.09%)</title><rect x="7.0055%" y="373" width="0.0949%" height="15" fill="rgb(226,3,54)" fg:x="17716" fg:w="240"/><text x="7.2555%" y="383.50"></text></g><g><title>free_unref_page_list (475 samples, 0.19%)</title><rect x="6.9146%" y="421" width="0.1878%" height="15" fill="rgb(245,192,40)" fg:x="17486" fg:w="475"/><text x="7.1646%" y="431.50"></text></g><g><title>free_unref_page_commit (391 samples, 0.15%)</title><rect x="6.9478%" y="405" width="0.1546%" height="15" fill="rgb(238,167,29)" fg:x="17570" fg:w="391"/><text x="7.1978%" y="415.50"></text></g><g><title>free_pcppages_bulk (358 samples, 0.14%)</title><rect x="6.9608%" y="389" width="0.1416%" height="15" fill="rgb(232,182,51)" fg:x="17603" fg:w="358"/><text x="7.2108%" y="399.50"></text></g><g><title>mem_cgroup_uncharge_list (52 samples, 0.02%)</title><rect x="7.1028%" y="421" width="0.0206%" height="15" fill="rgb(231,60,39)" fg:x="17962" fg:w="52"/><text x="7.3528%" y="431.50"></text></g><g><title>uncharge_page (43 samples, 0.02%)</title><rect x="7.1063%" y="405" width="0.0170%" height="15" fill="rgb(208,69,12)" fg:x="17971" fg:w="43"/><text x="7.3563%" y="415.50"></text></g><g><title>tlb_finish_mmu (930 samples, 0.37%)</title><rect x="6.7607%" y="469" width="0.3678%" height="15" fill="rgb(235,93,37)" fg:x="17097" fg:w="930"/><text x="7.0107%" y="479.50"></text></g><g><title>free_pages_and_swap_cache (922 samples, 0.36%)</title><rect x="6.7639%" y="453" width="0.3646%" height="15" fill="rgb(213,116,39)" fg:x="17105" fg:w="922"/><text x="7.0139%" y="463.50"></text></g><g><title>release_pages (812 samples, 0.32%)</title><rect x="6.8074%" y="437" width="0.3211%" height="15" fill="rgb(222,207,29)" fg:x="17215" fg:w="812"/><text x="7.0574%" y="447.50"></text></g><g><title>__tlb_remove_page_size (31 samples, 0.01%)</title><rect x="7.5943%" y="389" width="0.0123%" height="15" fill="rgb(206,96,30)" fg:x="19205" fg:w="31"/><text x="7.8443%" y="399.50"></text></g><g><title>__mod_memcg_state.part.0 (26 samples, 0.01%)</title><rect x="7.7556%" y="325" width="0.0103%" height="15" fill="rgb(218,138,4)" fg:x="19613" fg:w="26"/><text x="8.0056%" y="335.50"></text></g><g><title>__mod_memcg_lruvec_state (138 samples, 0.05%)</title><rect x="7.7173%" y="341" width="0.0546%" height="15" fill="rgb(250,191,14)" fg:x="19516" fg:w="138"/><text x="7.9673%" y="351.50"></text></g><g><title>__mod_lruvec_state (210 samples, 0.08%)</title><rect x="7.7082%" y="357" width="0.0830%" height="15" fill="rgb(239,60,40)" fg:x="19493" fg:w="210"/><text x="7.9582%" y="367.50"></text></g><g><title>__mod_lruvec_page_state (286 samples, 0.11%)</title><rect x="7.6936%" y="373" width="0.1131%" height="15" fill="rgb(206,27,48)" fg:x="19456" fg:w="286"/><text x="7.9436%" y="383.50"></text></g><g><title>lock_page_memcg (47 samples, 0.02%)</title><rect x="7.8082%" y="373" width="0.0186%" height="15" fill="rgb(225,35,8)" fg:x="19746" fg:w="47"/><text x="8.0582%" y="383.50"></text></g><g><title>page_remove_rmap (574 samples, 0.23%)</title><rect x="7.6129%" y="389" width="0.2270%" height="15" fill="rgb(250,213,24)" fg:x="19252" fg:w="574"/><text x="7.8629%" y="399.50"></text></g><g><title>__mod_memcg_lruvec_state (63 samples, 0.02%)</title><rect x="8.0044%" y="325" width="0.0249%" height="15" fill="rgb(247,123,22)" fg:x="20242" fg:w="63"/><text x="8.2544%" y="335.50"></text></g><g><title>__mod_lruvec_state (105 samples, 0.04%)</title><rect x="7.9980%" y="341" width="0.0415%" height="15" fill="rgb(231,138,38)" fg:x="20226" fg:w="105"/><text x="8.2480%" y="351.50"></text></g><g><title>__free_one_page (402 samples, 0.16%)</title><rect x="8.1823%" y="293" width="0.1590%" height="15" fill="rgb(231,145,46)" fg:x="20692" fg:w="402"/><text x="8.4323%" y="303.50"></text></g><g><title>free_unref_page_list (725 samples, 0.29%)</title><rect x="8.0585%" y="341" width="0.2867%" height="15" fill="rgb(251,118,11)" fg:x="20379" fg:w="725"/><text x="8.3085%" y="351.50"></text></g><g><title>free_unref_page_commit (621 samples, 0.25%)</title><rect x="8.0997%" y="325" width="0.2456%" height="15" fill="rgb(217,147,25)" fg:x="20483" fg:w="621"/><text x="8.3497%" y="335.50"></text></g><g><title>free_pcppages_bulk (567 samples, 0.22%)</title><rect x="8.1210%" y="309" width="0.2242%" height="15" fill="rgb(247,81,37)" fg:x="20537" fg:w="567"/><text x="8.3710%" y="319.50"></text></g><g><title>mem_cgroup_uncharge_list (81 samples, 0.03%)</title><rect x="8.3488%" y="341" width="0.0320%" height="15" fill="rgb(209,12,38)" fg:x="21113" fg:w="81"/><text x="8.5988%" y="351.50"></text></g><g><title>uncharge_page (58 samples, 0.02%)</title><rect x="8.3579%" y="325" width="0.0229%" height="15" fill="rgb(227,1,9)" fg:x="21136" fg:w="58"/><text x="8.6079%" y="335.50"></text></g><g><title>free_pages_and_swap_cache (1,388 samples, 0.55%)</title><rect x="7.8399%" y="373" width="0.5489%" height="15" fill="rgb(248,47,43)" fg:x="19826" fg:w="1388"/><text x="8.0899%" y="383.50"></text></g><g><title>release_pages (1,218 samples, 0.48%)</title><rect x="7.9071%" y="357" width="0.4816%" height="15" fill="rgb(221,10,30)" fg:x="19996" fg:w="1218"/><text x="8.1571%" y="367.50"></text></g><g><title>tlb_flush_mmu (1,389 samples, 0.55%)</title><rect x="7.8399%" y="389" width="0.5493%" height="15" fill="rgb(210,229,1)" fg:x="19826" fg:w="1389"/><text x="8.0899%" y="399.50"></text></g><g><title>unmap_region (4,172 samples, 1.65%)</title><rect x="6.7591%" y="485" width="1.6497%" height="15" fill="rgb(222,148,37)" fg:x="17093" fg:w="4172"/><text x="7.0091%" y="495.50"></text></g><g><title>unmap_vmas (3,238 samples, 1.28%)</title><rect x="7.1285%" y="469" width="1.2804%" height="15" fill="rgb(234,67,33)" fg:x="18027" fg:w="3238"/><text x="7.3785%" y="479.50"></text></g><g><title>unmap_single_vma (3,238 samples, 1.28%)</title><rect x="7.1285%" y="453" width="1.2804%" height="15" fill="rgb(247,98,35)" fg:x="18027" fg:w="3238"/><text x="7.3785%" y="463.50"></text></g><g><title>unmap_page_range (3,238 samples, 1.28%)</title><rect x="7.1285%" y="437" width="1.2804%" height="15" fill="rgb(247,138,52)" fg:x="18027" fg:w="3238"/><text x="7.3785%" y="447.50"></text></g><g><title>zap_pmd_range.isra.0 (3,238 samples, 1.28%)</title><rect x="7.1285%" y="421" width="1.2804%" height="15" fill="rgb(213,79,30)" fg:x="18027" fg:w="3238"/><text x="7.3785%" y="431.50"></text></g><g><title>zap_pte_range (3,204 samples, 1.27%)</title><rect x="7.1419%" y="405" width="1.2670%" height="15" fill="rgb(246,177,23)" fg:x="18061" fg:w="3204"/><text x="7.3919%" y="415.50"></text></g><g><title>vm_normal_page (31 samples, 0.01%)</title><rect x="8.3966%" y="389" width="0.0123%" height="15" fill="rgb(230,62,27)" fg:x="21234" fg:w="31"/><text x="8.6466%" y="399.50"></text></g><g><title>__do_munmap (4,176 samples, 1.65%)</title><rect x="6.7580%" y="501" width="1.6513%" height="15" fill="rgb(216,154,8)" fg:x="17090" fg:w="4176"/><text x="7.0080%" y="511.50"></text></g><g><title>__vm_munmap (4,177 samples, 1.65%)</title><rect x="6.7580%" y="517" width="1.6517%" height="15" fill="rgb(244,35,45)" fg:x="17090" fg:w="4177"/><text x="7.0080%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4,179 samples, 1.65%)</title><rect x="6.7576%" y="677" width="1.6525%" height="15" fill="rgb(251,115,12)" fg:x="17089" fg:w="4179"/><text x="7.0076%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4,179 samples, 1.65%)</title><rect x="6.7576%" y="661" width="1.6525%" height="15" fill="rgb(240,54,50)" fg:x="17089" fg:w="4179"/><text x="7.0076%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,179 samples, 1.65%)</title><rect x="6.7576%" y="645" width="1.6525%" height="15" fill="rgb(233,84,52)" fg:x="17089" fg:w="4179"/><text x="7.0076%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,179 samples, 1.65%)</title><rect x="6.7576%" y="629" width="1.6525%" height="15" fill="rgb(207,117,47)" fg:x="17089" fg:w="4179"/><text x="7.0076%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (4,179 samples, 1.65%)</title><rect x="6.7576%" y="613" width="1.6525%" height="15" fill="rgb(249,43,39)" fg:x="17089" fg:w="4179"/><text x="7.0076%" y="623.50"></text></g><g><title>__free (4,178 samples, 1.65%)</title><rect x="6.7580%" y="597" width="1.6521%" height="15" fill="rgb(209,38,44)" fg:x="17090" fg:w="4178"/><text x="7.0080%" y="607.50"></text></g><g><title>__GI___munmap (4,178 samples, 1.65%)</title><rect x="6.7580%" y="581" width="1.6521%" height="15" fill="rgb(236,212,23)" fg:x="17090" fg:w="4178"/><text x="7.0080%" y="591.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4,178 samples, 1.65%)</title><rect x="6.7580%" y="565" width="1.6521%" height="15" fill="rgb(242,79,21)" fg:x="17090" fg:w="4178"/><text x="7.0080%" y="575.50"></text></g><g><title>do_syscall_64 (4,178 samples, 1.65%)</title><rect x="6.7580%" y="549" width="1.6521%" height="15" fill="rgb(211,96,35)" fg:x="17090" fg:w="4178"/><text x="7.0080%" y="559.50"></text></g><g><title>__x64_sys_munmap (4,178 samples, 1.65%)</title><rect x="6.7580%" y="533" width="1.6521%" height="15" fill="rgb(253,215,40)" fg:x="17090" fg:w="4178"/><text x="7.0080%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (32 samples, 0.01%)</title><rect x="8.4140%" y="661" width="0.0127%" height="15" fill="rgb(211,81,21)" fg:x="21278" fg:w="32"/><text x="8.6640%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (32 samples, 0.01%)</title><rect x="8.4140%" y="645" width="0.0127%" height="15" fill="rgb(208,190,38)" fg:x="21278" fg:w="32"/><text x="8.6640%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.01%)</title><rect x="8.4140%" y="629" width="0.0127%" height="15" fill="rgb(235,213,38)" fg:x="21278" fg:w="32"/><text x="8.6640%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (32 samples, 0.01%)</title><rect x="8.4140%" y="613" width="0.0127%" height="15" fill="rgb(237,122,38)" fg:x="21278" fg:w="32"/><text x="8.6640%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (32 samples, 0.01%)</title><rect x="8.4140%" y="597" width="0.0127%" height="15" fill="rgb(244,218,35)" fg:x="21278" fg:w="32"/><text x="8.6640%" y="607.50"></text></g><g><title>__free (32 samples, 0.01%)</title><rect x="8.4140%" y="581" width="0.0127%" height="15" fill="rgb(240,68,47)" fg:x="21278" fg:w="32"/><text x="8.6640%" y="591.50"></text></g><g><title>__GI___munmap (32 samples, 0.01%)</title><rect x="8.4140%" y="565" width="0.0127%" height="15" fill="rgb(210,16,53)" fg:x="21278" fg:w="32"/><text x="8.6640%" y="575.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (32 samples, 0.01%)</title><rect x="8.4140%" y="549" width="0.0127%" height="15" fill="rgb(235,124,12)" fg:x="21278" fg:w="32"/><text x="8.6640%" y="559.50"></text></g><g><title>do_syscall_64 (32 samples, 0.01%)</title><rect x="8.4140%" y="533" width="0.0127%" height="15" fill="rgb(224,169,11)" fg:x="21278" fg:w="32"/><text x="8.6640%" y="543.50"></text></g><g><title>__x64_sys_munmap (32 samples, 0.01%)</title><rect x="8.4140%" y="517" width="0.0127%" height="15" fill="rgb(250,166,2)" fg:x="21278" fg:w="32"/><text x="8.6640%" y="527.50"></text></g><g><title>__vm_munmap (32 samples, 0.01%)</title><rect x="8.4140%" y="501" width="0.0127%" height="15" fill="rgb(242,216,29)" fg:x="21278" fg:w="32"/><text x="8.6640%" y="511.50"></text></g><g><title>__do_munmap (32 samples, 0.01%)</title><rect x="8.4140%" y="485" width="0.0127%" height="15" fill="rgb(230,116,27)" fg:x="21278" fg:w="32"/><text x="8.6640%" y="495.50"></text></g><g><title>unmap_region (32 samples, 0.01%)</title><rect x="8.4140%" y="469" width="0.0127%" height="15" fill="rgb(228,99,48)" fg:x="21278" fg:w="32"/><text x="8.6640%" y="479.50"></text></g><g><title>unmap_vmas (31 samples, 0.01%)</title><rect x="8.4144%" y="453" width="0.0123%" height="15" fill="rgb(253,11,6)" fg:x="21279" fg:w="31"/><text x="8.6644%" y="463.50"></text></g><g><title>unmap_single_vma (31 samples, 0.01%)</title><rect x="8.4144%" y="437" width="0.0123%" height="15" fill="rgb(247,143,39)" fg:x="21279" fg:w="31"/><text x="8.6644%" y="447.50"></text></g><g><title>unmap_page_range (31 samples, 0.01%)</title><rect x="8.4144%" y="421" width="0.0123%" height="15" fill="rgb(236,97,10)" fg:x="21279" fg:w="31"/><text x="8.6644%" y="431.50"></text></g><g><title>zap_pmd_range.isra.0 (31 samples, 0.01%)</title><rect x="8.4144%" y="405" width="0.0123%" height="15" fill="rgb(233,208,19)" fg:x="21279" fg:w="31"/><text x="8.6644%" y="415.50"></text></g><g><title>zap_pte_range (31 samples, 0.01%)</title><rect x="8.4144%" y="389" width="0.0123%" height="15" fill="rgb(216,164,2)" fg:x="21279" fg:w="31"/><text x="8.6644%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hprof_slurp::parser::record_stream_parser::HprofRecordStreamParser::start::{{closure}}&gt; (46 samples, 0.02%)</title><rect x="8.4113%" y="677" width="0.0182%" height="15" fill="rgb(220,129,5)" fg:x="21271" fg:w="46"/><text x="8.6613%" y="687.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (10,106 samples, 4.00%)</title><rect x="11.5372%" y="613" width="3.9963%" height="15" fill="rgb(242,17,10)" fg:x="29176" fg:w="10106"/><text x="11.7872%" y="623.50">&lt;cor..</text></g><g><title>__hrtimer_run_queues (32 samples, 0.01%)</title><rect x="29.1648%" y="533" width="0.0127%" height="15" fill="rgb(242,107,0)" fg:x="73754" fg:w="32"/><text x="29.4148%" y="543.50"></text></g><g><title>tick_sched_timer (30 samples, 0.01%)</title><rect x="29.1656%" y="517" width="0.0119%" height="15" fill="rgb(251,28,31)" fg:x="73756" fg:w="30"/><text x="29.4156%" y="527.50"></text></g><g><title>__sysvec_apic_timer_interrupt (34 samples, 0.01%)</title><rect x="29.1648%" y="565" width="0.0134%" height="15" fill="rgb(233,223,10)" fg:x="73754" fg:w="34"/><text x="29.4148%" y="575.50"></text></g><g><title>hrtimer_interrupt (34 samples, 0.01%)</title><rect x="29.1648%" y="549" width="0.0134%" height="15" fill="rgb(215,21,27)" fg:x="73754" fg:w="34"/><text x="29.4148%" y="559.50"></text></g><g><title>__memcpy_avx_unaligned_erms (34,514 samples, 13.65%)</title><rect x="15.5334%" y="613" width="13.6480%" height="15" fill="rgb(232,23,21)" fg:x="39282" fg:w="34514"/><text x="15.7834%" y="623.50">__memcpy_avx_unaligne..</text></g><g><title>asm_sysvec_apic_timer_interrupt (42 samples, 0.02%)</title><rect x="29.1648%" y="597" width="0.0166%" height="15" fill="rgb(244,5,23)" fg:x="73754" fg:w="42"/><text x="29.4148%" y="607.50"></text></g><g><title>sysvec_apic_timer_interrupt (42 samples, 0.02%)</title><rect x="29.1648%" y="581" width="0.0166%" height="15" fill="rgb(226,81,46)" fg:x="73754" fg:w="42"/><text x="29.4148%" y="591.50"></text></g><g><title>hprof_slurp::parser::primitive_parsers::parse_u8 (1,421 samples, 0.56%)</title><rect x="29.8730%" y="597" width="0.5619%" height="15" fill="rgb(247,70,30)" fg:x="75545" fg:w="1421"/><text x="30.1230%" y="607.50"></text></g><g><title>nom::number::streaming::be_u8 (1,421 samples, 0.56%)</title><rect x="29.8730%" y="581" width="0.5619%" height="15" fill="rgb(212,68,19)" fg:x="75545" fg:w="1421"/><text x="30.1230%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (864 samples, 0.34%)</title><rect x="30.0933%" y="565" width="0.3417%" height="15" fill="rgb(240,187,13)" fg:x="76102" fg:w="864"/><text x="30.3433%" y="575.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (864 samples, 0.34%)</title><rect x="30.0933%" y="549" width="0.3417%" height="15" fill="rgb(223,113,26)" fg:x="76102" fg:w="864"/><text x="30.3433%" y="559.50"></text></g><g><title>&lt;&amp;[u8] as nom::traits::InputIter&gt;::slice_index (563 samples, 0.22%)</title><rect x="36.6140%" y="501" width="0.2226%" height="15" fill="rgb(206,192,2)" fg:x="92592" fg:w="563"/><text x="36.8640%" y="511.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (564 samples, 0.22%)</title><rect x="36.6140%" y="533" width="0.2230%" height="15" fill="rgb(241,108,4)" fg:x="92592" fg:w="564"/><text x="36.8640%" y="543.50"></text></g><g><title>nom::bytes::streaming::take::{{closure}} (564 samples, 0.22%)</title><rect x="36.6140%" y="517" width="0.2230%" height="15" fill="rgb(247,173,49)" fg:x="92592" fg:w="564"/><text x="36.8640%" y="527.50"></text></g><g><title>nom::combinator::map::{{closure}} (1,589 samples, 0.63%)</title><rect x="36.2098%" y="549" width="0.6283%" height="15" fill="rgb(224,114,35)" fg:x="91570" fg:w="1589"/><text x="36.4598%" y="559.50"></text></g><g><title>hprof_slurp::parser::primitive_parsers::parse_u32 (1,808 samples, 0.71%)</title><rect x="37.9213%" y="485" width="0.7149%" height="15" fill="rgb(245,159,27)" fg:x="95898" fg:w="1808"/><text x="38.1713%" y="495.50"></text></g><g><title>nom::number::streaming::be_u32 (1,808 samples, 0.71%)</title><rect x="37.9213%" y="469" width="0.7149%" height="15" fill="rgb(245,172,44)" fg:x="95898" fg:w="1808"/><text x="38.1713%" y="479.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4,568 samples, 1.81%)</title><rect x="37.9213%" y="517" width="1.8063%" height="15" fill="rgb(236,23,11)" fg:x="95898" fg:w="4568"/><text x="38.1713%" y="527.50">&lt;..</text></g><g><title>core::ops::function::FnMut::call_mut (4,568 samples, 1.81%)</title><rect x="37.9213%" y="501" width="1.8063%" height="15" fill="rgb(205,117,38)" fg:x="95898" fg:w="4568"/><text x="38.1713%" y="511.50">c..</text></g><g><title>hprof_slurp::parser::record_parser::parse_id (2,760 samples, 1.09%)</title><rect x="38.6362%" y="485" width="1.0914%" height="15" fill="rgb(237,72,25)" fg:x="97706" fg:w="2760"/><text x="38.8862%" y="495.50"></text></g><g><title>hprof_slurp::parser::primitive_parsers::parse_u64 (2,760 samples, 1.09%)</title><rect x="38.6362%" y="469" width="1.0914%" height="15" fill="rgb(244,70,9)" fg:x="97706" fg:w="2760"/><text x="38.8862%" y="479.50"></text></g><g><title>nom::number::streaming::be_u64 (2,760 samples, 1.09%)</title><rect x="38.6362%" y="453" width="1.0914%" height="15" fill="rgb(217,125,39)" fg:x="97706" fg:w="2760"/><text x="38.8862%" y="463.50"></text></g><g><title>&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (7,299 samples, 2.89%)</title><rect x="36.8433%" y="533" width="2.8863%" height="15" fill="rgb(235,36,10)" fg:x="93172" fg:w="7299"/><text x="37.0933%" y="543.50">&lt;(..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (8,903 samples, 3.52%)</title><rect x="36.2098%" y="565" width="3.5205%" height="15" fill="rgb(251,123,47)" fg:x="91570" fg:w="8903"/><text x="36.4598%" y="575.50">&lt;F ..</text></g><g><title>nom::sequence::tuple::{{closure}} (7,314 samples, 2.89%)</title><rect x="36.8382%" y="549" width="2.8922%" height="15" fill="rgb(221,13,13)" fg:x="93159" fg:w="7314"/><text x="37.0882%" y="559.50">no..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (573 samples, 0.23%)</title><rect x="39.7304%" y="565" width="0.2266%" height="15" fill="rgb(238,131,9)" fg:x="100473" fg:w="573"/><text x="39.9804%" y="575.50"></text></g><g><title>hprof_slurp::parser::record_parser::parse_gc_instance_dump (24,098 samples, 9.53%)</title><rect x="30.4365%" y="597" width="9.5292%" height="15" fill="rgb(211,50,8)" fg:x="76970" fg:w="24098"/><text x="30.6865%" y="607.50">hprof_slurp::p..</text></g><g><title>nom::combinator::flat_map::{{closure}} (24,098 samples, 9.53%)</title><rect x="30.4365%" y="581" width="9.5292%" height="15" fill="rgb(245,182,24)" fg:x="76970" fg:w="24098"/><text x="30.6865%" y="591.50">nom::combinato..</text></g><g><title>&lt;&amp;[T] as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (132 samples, 0.05%)</title><rect x="40.3947%" y="421" width="0.0522%" height="15" fill="rgb(242,14,37)" fg:x="102153" fg:w="132"/><text x="40.6447%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (132 samples, 0.05%)</title><rect x="40.3947%" y="405" width="0.0522%" height="15" fill="rgb(246,228,12)" fg:x="102153" fg:w="132"/><text x="40.6447%" y="415.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (132 samples, 0.05%)</title><rect x="40.3947%" y="389" width="0.0522%" height="15" fill="rgb(213,55,15)" fg:x="102153" fg:w="132"/><text x="40.6447%" y="399.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (132 samples, 0.05%)</title><rect x="40.3947%" y="373" width="0.0522%" height="15" fill="rgb(209,9,3)" fg:x="102153" fg:w="132"/><text x="40.6447%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (132 samples, 0.05%)</title><rect x="40.3947%" y="357" width="0.0522%" height="15" fill="rgb(230,59,30)" fg:x="102153" fg:w="132"/><text x="40.6447%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (356 samples, 0.14%)</title><rect x="40.4469%" y="421" width="0.1408%" height="15" fill="rgb(209,121,21)" fg:x="102285" fg:w="356"/><text x="40.6969%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (356 samples, 0.14%)</title><rect x="40.4469%" y="405" width="0.1408%" height="15" fill="rgb(220,109,13)" fg:x="102285" fg:w="356"/><text x="40.6969%" y="415.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (356 samples, 0.14%)</title><rect x="40.4469%" y="389" width="0.1408%" height="15" fill="rgb(232,18,1)" fg:x="102285" fg:w="356"/><text x="40.6969%" y="399.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,378 samples, 0.54%)</title><rect x="40.0432%" y="501" width="0.5449%" height="15" fill="rgb(215,41,42)" fg:x="101264" fg:w="1378"/><text x="40.2932%" y="511.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,378 samples, 0.54%)</title><rect x="40.0432%" y="485" width="0.5449%" height="15" fill="rgb(224,123,36)" fg:x="101264" fg:w="1378"/><text x="40.2932%" y="495.50"></text></g><g><title>hprof_slurp::parser::record_parser::parse_id (1,378 samples, 0.54%)</title><rect x="40.0432%" y="469" width="0.5449%" height="15" fill="rgb(240,125,3)" fg:x="101264" fg:w="1378"/><text x="40.2932%" y="479.50"></text></g><g><title>hprof_slurp::parser::primitive_parsers::parse_u64 (1,255 samples, 0.50%)</title><rect x="40.0918%" y="453" width="0.4963%" height="15" fill="rgb(205,98,50)" fg:x="101387" fg:w="1255"/><text x="40.3418%" y="463.50"></text></g><g><title>nom::number::streaming::be_u64 (1,233 samples, 0.49%)</title><rect x="40.1005%" y="437" width="0.4876%" height="15" fill="rgb(205,185,37)" fg:x="101409" fg:w="1233"/><text x="40.3505%" y="447.50"></text></g><g><title>clear_page_erms (86 samples, 0.03%)</title><rect x="40.8285%" y="309" width="0.0340%" height="15" fill="rgb(238,207,15)" fg:x="103250" fg:w="86"/><text x="41.0785%" y="319.50"></text></g><g><title>get_page_from_freelist (129 samples, 0.05%)</title><rect x="40.8238%" y="325" width="0.0510%" height="15" fill="rgb(213,199,42)" fg:x="103238" fg:w="129"/><text x="41.0738%" y="335.50"></text></g><g><title>rmqueue (29 samples, 0.01%)</title><rect x="40.8633%" y="309" width="0.0115%" height="15" fill="rgb(235,201,11)" fg:x="103338" fg:w="29"/><text x="41.1133%" y="319.50"></text></g><g><title>__alloc_pages (144 samples, 0.06%)</title><rect x="40.8182%" y="341" width="0.0569%" height="15" fill="rgb(207,46,11)" fg:x="103224" fg:w="144"/><text x="41.0682%" y="351.50"></text></g><g><title>alloc_pages_vma (156 samples, 0.06%)</title><rect x="40.8163%" y="357" width="0.0617%" height="15" fill="rgb(241,35,35)" fg:x="103219" fg:w="156"/><text x="41.0663%" y="367.50"></text></g><g><title>__pagevec_lru_add_fn (39 samples, 0.02%)</title><rect x="40.8843%" y="309" width="0.0154%" height="15" fill="rgb(243,32,47)" fg:x="103391" fg:w="39"/><text x="41.1343%" y="319.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (53 samples, 0.02%)</title><rect x="40.8807%" y="357" width="0.0210%" height="15" fill="rgb(247,202,23)" fg:x="103382" fg:w="53"/><text x="41.1307%" y="367.50"></text></g><g><title>lru_cache_add (50 samples, 0.02%)</title><rect x="40.8819%" y="341" width="0.0198%" height="15" fill="rgb(219,102,11)" fg:x="103385" fg:w="50"/><text x="41.1319%" y="351.50"></text></g><g><title>__pagevec_lru_add (47 samples, 0.02%)</title><rect x="40.8831%" y="325" width="0.0186%" height="15" fill="rgb(243,110,44)" fg:x="103388" fg:w="47"/><text x="41.1331%" y="335.50"></text></g><g><title>__mem_cgroup_charge (36 samples, 0.01%)</title><rect x="40.9032%" y="341" width="0.0142%" height="15" fill="rgb(222,74,54)" fg:x="103439" fg:w="36"/><text x="41.1532%" y="351.50"></text></g><g><title>mem_cgroup_charge (55 samples, 0.02%)</title><rect x="40.9017%" y="357" width="0.0217%" height="15" fill="rgb(216,99,12)" fg:x="103435" fg:w="55"/><text x="41.1517%" y="367.50"></text></g><g><title>do_anonymous_page (301 samples, 0.12%)</title><rect x="40.8123%" y="373" width="0.1190%" height="15" fill="rgb(226,22,26)" fg:x="103209" fg:w="301"/><text x="41.0623%" y="383.50"></text></g><g><title>handle_pte_fault (320 samples, 0.13%)</title><rect x="40.8072%" y="389" width="0.1265%" height="15" fill="rgb(217,163,10)" fg:x="103196" fg:w="320"/><text x="41.0572%" y="399.50"></text></g><g><title>__handle_mm_fault (338 samples, 0.13%)</title><rect x="40.8008%" y="405" width="0.1337%" height="15" fill="rgb(213,25,53)" fg:x="103180" fg:w="338"/><text x="41.0508%" y="415.50"></text></g><g><title>handle_mm_fault (351 samples, 0.14%)</title><rect x="40.7965%" y="421" width="0.1388%" height="15" fill="rgb(252,105,26)" fg:x="103169" fg:w="351"/><text x="41.0465%" y="431.50"></text></g><g><title>do_user_addr_fault (380 samples, 0.15%)</title><rect x="40.7874%" y="437" width="0.1503%" height="15" fill="rgb(220,39,43)" fg:x="103146" fg:w="380"/><text x="41.0374%" y="447.50"></text></g><g><title>asm_exc_page_fault (400 samples, 0.16%)</title><rect x="40.7826%" y="469" width="0.1582%" height="15" fill="rgb(229,68,48)" fg:x="103134" fg:w="400"/><text x="41.0326%" y="479.50"></text></g><g><title>exc_page_fault (392 samples, 0.16%)</title><rect x="40.7858%" y="453" width="0.1550%" height="15" fill="rgb(252,8,32)" fg:x="103142" fg:w="392"/><text x="41.0358%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (942 samples, 0.37%)</title><rect x="40.5881%" y="501" width="0.3725%" height="15" fill="rgb(223,20,43)" fg:x="102642" fg:w="942"/><text x="40.8381%" y="511.50"></text></g><g><title>core::ptr::write (782 samples, 0.31%)</title><rect x="40.6514%" y="485" width="0.3092%" height="15" fill="rgb(229,81,49)" fg:x="102802" fg:w="782"/><text x="40.9014%" y="495.50"></text></g><g><title>sync_regs (40 samples, 0.02%)</title><rect x="40.9448%" y="469" width="0.0158%" height="15" fill="rgb(236,28,36)" fg:x="103544" fg:w="40"/><text x="41.1948%" y="479.50"></text></g><g><title>malloc_consolidate (332 samples, 0.13%)</title><rect x="41.3513%" y="357" width="0.1313%" height="15" fill="rgb(249,185,26)" fg:x="104572" fg:w="332"/><text x="41.6013%" y="367.50"></text></g><g><title>unlink_chunk.constprop.0 (70 samples, 0.03%)</title><rect x="41.4549%" y="341" width="0.0277%" height="15" fill="rgb(249,174,33)" fg:x="104834" fg:w="70"/><text x="41.7049%" y="351.50"></text></g><g><title>__GI___libc_malloc (1,361 samples, 0.54%)</title><rect x="40.9653%" y="389" width="0.5382%" height="15" fill="rgb(233,201,37)" fg:x="103596" fg:w="1361"/><text x="41.2153%" y="399.50"></text></g><g><title>_int_malloc (1,043 samples, 0.41%)</title><rect x="41.0911%" y="373" width="0.4124%" height="15" fill="rgb(221,78,26)" fg:x="103914" fg:w="1043"/><text x="41.3411%" y="383.50"></text></g><g><title>unlink_chunk.constprop.0 (53 samples, 0.02%)</title><rect x="41.4826%" y="357" width="0.0210%" height="15" fill="rgb(250,127,30)" fg:x="104904" fg:w="53"/><text x="41.7326%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,379 samples, 0.55%)</title><rect x="40.9634%" y="437" width="0.5453%" height="15" fill="rgb(230,49,44)" fg:x="103591" fg:w="1379"/><text x="41.2134%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,379 samples, 0.55%)</title><rect x="40.9634%" y="421" width="0.5453%" height="15" fill="rgb(229,67,23)" fg:x="103591" fg:w="1379"/><text x="41.2134%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1,379 samples, 0.55%)</title><rect x="40.9634%" y="405" width="0.5453%" height="15" fill="rgb(249,83,47)" fg:x="103591" fg:w="1379"/><text x="41.2134%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,389 samples, 0.55%)</title><rect x="40.9606%" y="501" width="0.5493%" height="15" fill="rgb(215,43,3)" fg:x="103584" fg:w="1389"/><text x="41.2106%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,389 samples, 0.55%)</title><rect x="40.9606%" y="485" width="0.5493%" height="15" fill="rgb(238,154,13)" fg:x="103584" fg:w="1389"/><text x="41.2106%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,383 samples, 0.55%)</title><rect x="40.9630%" y="469" width="0.5469%" height="15" fill="rgb(219,56,2)" fg:x="103590" fg:w="1383"/><text x="41.2130%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,383 samples, 0.55%)</title><rect x="40.9630%" y="453" width="0.5469%" height="15" fill="rgb(233,0,4)" fg:x="103590" fg:w="1383"/><text x="41.2130%" y="463.50"></text></g><g><title>__free (86 samples, 0.03%)</title><rect x="41.5098%" y="421" width="0.0340%" height="15" fill="rgb(235,30,7)" fg:x="104973" fg:w="86"/><text x="41.7598%" y="431.50"></text></g><g><title>__GI___munmap (86 samples, 0.03%)</title><rect x="41.5098%" y="405" width="0.0340%" height="15" fill="rgb(250,79,13)" fg:x="104973" fg:w="86"/><text x="41.7598%" y="415.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (86 samples, 0.03%)</title><rect x="41.5098%" y="389" width="0.0340%" height="15" fill="rgb(211,146,34)" fg:x="104973" fg:w="86"/><text x="41.7598%" y="399.50"></text></g><g><title>do_syscall_64 (86 samples, 0.03%)</title><rect x="41.5098%" y="373" width="0.0340%" height="15" fill="rgb(228,22,38)" fg:x="104973" fg:w="86"/><text x="41.7598%" y="383.50"></text></g><g><title>__x64_sys_munmap (86 samples, 0.03%)</title><rect x="41.5098%" y="357" width="0.0340%" height="15" fill="rgb(235,168,5)" fg:x="104973" fg:w="86"/><text x="41.7598%" y="367.50"></text></g><g><title>__vm_munmap (86 samples, 0.03%)</title><rect x="41.5098%" y="341" width="0.0340%" height="15" fill="rgb(221,155,16)" fg:x="104973" fg:w="86"/><text x="41.7598%" y="351.50"></text></g><g><title>__do_munmap (86 samples, 0.03%)</title><rect x="41.5098%" y="325" width="0.0340%" height="15" fill="rgb(215,215,53)" fg:x="104973" fg:w="86"/><text x="41.7598%" y="335.50"></text></g><g><title>unmap_region (86 samples, 0.03%)</title><rect x="41.5098%" y="309" width="0.0340%" height="15" fill="rgb(223,4,10)" fg:x="104973" fg:w="86"/><text x="41.7598%" y="319.50"></text></g><g><title>unmap_vmas (82 samples, 0.03%)</title><rect x="41.5114%" y="293" width="0.0324%" height="15" fill="rgb(234,103,6)" fg:x="104977" fg:w="82"/><text x="41.7614%" y="303.50"></text></g><g><title>unmap_single_vma (82 samples, 0.03%)</title><rect x="41.5114%" y="277" width="0.0324%" height="15" fill="rgb(227,97,0)" fg:x="104977" fg:w="82"/><text x="41.7614%" y="287.50"></text></g><g><title>unmap_page_range (82 samples, 0.03%)</title><rect x="41.5114%" y="261" width="0.0324%" height="15" fill="rgb(234,150,53)" fg:x="104977" fg:w="82"/><text x="41.7614%" y="271.50"></text></g><g><title>zap_pmd_range.isra.0 (82 samples, 0.03%)</title><rect x="41.5114%" y="245" width="0.0324%" height="15" fill="rgb(228,201,54)" fg:x="104977" fg:w="82"/><text x="41.7614%" y="255.50"></text></g><g><title>zap_pte_range (82 samples, 0.03%)</title><rect x="41.5114%" y="229" width="0.0324%" height="15" fill="rgb(222,22,37)" fg:x="104977" fg:w="82"/><text x="41.7614%" y="239.50"></text></g><g><title>tlb_flush_mmu (44 samples, 0.02%)</title><rect x="41.5265%" y="213" width="0.0174%" height="15" fill="rgb(237,53,32)" fg:x="105015" fg:w="44"/><text x="41.7765%" y="223.50"></text></g><g><title>free_pages_and_swap_cache (43 samples, 0.02%)</title><rect x="41.5268%" y="197" width="0.0170%" height="15" fill="rgb(233,25,53)" fg:x="105016" fg:w="43"/><text x="41.7768%" y="207.50"></text></g><g><title>release_pages (41 samples, 0.02%)</title><rect x="41.5276%" y="181" width="0.0162%" height="15" fill="rgb(210,40,34)" fg:x="105018" fg:w="41"/><text x="41.7776%" y="191.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3,977 samples, 1.57%)</title><rect x="39.9716%" y="533" width="1.5726%" height="15" fill="rgb(241,220,44)" fg:x="101083" fg:w="3977"/><text x="40.2216%" y="543.50"></text></g><g><title>nom::multi::count::{{closure}} (3,975 samples, 1.57%)</title><rect x="39.9724%" y="517" width="1.5718%" height="15" fill="rgb(235,28,35)" fg:x="101085" fg:w="3975"/><text x="40.2224%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u64&gt;&gt; (87 samples, 0.03%)</title><rect x="41.5098%" y="501" width="0.0344%" height="15" fill="rgb(210,56,17)" fg:x="104973" fg:w="87"/><text x="41.7598%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u64&gt;&gt; (87 samples, 0.03%)</title><rect x="41.5098%" y="485" width="0.0344%" height="15" fill="rgb(224,130,29)" fg:x="104973" fg:w="87"/><text x="41.7598%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (87 samples, 0.03%)</title><rect x="41.5098%" y="469" width="0.0344%" height="15" fill="rgb(235,212,8)" fg:x="104973" fg:w="87"/><text x="41.7598%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (87 samples, 0.03%)</title><rect x="41.5098%" y="453" width="0.0344%" height="15" fill="rgb(223,33,50)" fg:x="104973" fg:w="87"/><text x="41.7598%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (87 samples, 0.03%)</title><rect x="41.5098%" y="437" width="0.0344%" height="15" fill="rgb(219,149,13)" fg:x="104973" fg:w="87"/><text x="41.7598%" y="447.50"></text></g><g><title>nom::combinator::map::{{closure}} (4,054 samples, 1.60%)</title><rect x="39.9688%" y="549" width="1.6031%" height="15" fill="rgb(250,156,29)" fg:x="101076" fg:w="4054"/><text x="40.2188%" y="559.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (70 samples, 0.03%)</title><rect x="41.5442%" y="533" width="0.0277%" height="15" fill="rgb(216,193,19)" fg:x="105060" fg:w="70"/><text x="41.7942%" y="543.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4,088 samples, 1.62%)</title><rect x="39.9669%" y="565" width="1.6165%" height="15" fill="rgb(216,135,14)" fg:x="101071" fg:w="4088"/><text x="40.2169%" y="575.50"></text></g><g><title>nom::sequence::tuple::{{closure}} (29 samples, 0.01%)</title><rect x="41.5719%" y="549" width="0.0115%" height="15" fill="rgb(241,47,5)" fg:x="105130" fg:w="29"/><text x="41.8219%" y="559.50"></text></g><g><title>&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (29 samples, 0.01%)</title><rect x="41.5719%" y="533" width="0.0115%" height="15" fill="rgb(233,42,35)" fg:x="105130" fg:w="29"/><text x="41.8219%" y="543.50"></text></g><g><title>hprof_slurp::parser::record_parser::parse_gc_object_array_dump (4,102 samples, 1.62%)</title><rect x="39.9657%" y="597" width="1.6221%" height="15" fill="rgb(231,13,6)" fg:x="101068" fg:w="4102"/><text x="40.2157%" y="607.50"></text></g><g><title>nom::combinator::flat_map::{{closure}} (4,102 samples, 1.62%)</title><rect x="39.9657%" y="581" width="1.6221%" height="15" fill="rgb(207,181,40)" fg:x="101068" fg:w="4102"/><text x="40.2157%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (263 samples, 0.10%)</title><rect x="41.6696%" y="533" width="0.1040%" height="15" fill="rgb(254,173,49)" fg:x="105377" fg:w="263"/><text x="41.9196%" y="543.50"></text></g><g><title>core::ops::function::FnMut::call_mut (263 samples, 0.10%)</title><rect x="41.6696%" y="517" width="0.1040%" height="15" fill="rgb(221,1,38)" fg:x="105377" fg:w="263"/><text x="41.9196%" y="527.50"></text></g><g><title>hprof_slurp::parser::primitive_parsers::parse_i8 (240 samples, 0.09%)</title><rect x="41.6787%" y="501" width="0.0949%" height="15" fill="rgb(206,124,46)" fg:x="105400" fg:w="240"/><text x="41.9287%" y="511.50"></text></g><g><title>nom::number::streaming::be_i8 (240 samples, 0.09%)</title><rect x="41.6787%" y="485" width="0.0949%" height="15" fill="rgb(249,21,11)" fg:x="105400" fg:w="240"/><text x="41.9287%" y="495.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (240 samples, 0.09%)</title><rect x="41.6787%" y="469" width="0.0949%" height="15" fill="rgb(222,201,40)" fg:x="105400" fg:w="240"/><text x="41.9287%" y="479.50"></text></g><g><title>nom::combinator::map::{{closure}} (240 samples, 0.09%)</title><rect x="41.6787%" y="453" width="0.0949%" height="15" fill="rgb(235,61,29)" fg:x="105400" fg:w="240"/><text x="41.9287%" y="463.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (240 samples, 0.09%)</title><rect x="41.6787%" y="437" width="0.0949%" height="15" fill="rgb(219,207,3)" fg:x="105400" fg:w="240"/><text x="41.9287%" y="447.50"></text></g><g><title>nom::number::streaming::be_i8::{{closure}} (240 samples, 0.09%)</title><rect x="41.6787%" y="421" width="0.0949%" height="15" fill="rgb(222,56,46)" fg:x="105400" fg:w="240"/><text x="41.9287%" y="431.50"></text></g><g><title>nom::number::streaming::be_u8 (240 samples, 0.09%)</title><rect x="41.6787%" y="405" width="0.0949%" height="15" fill="rgb(239,76,54)" fg:x="105400" fg:w="240"/><text x="41.9287%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 0.03%)</title><rect x="41.7428%" y="389" width="0.0308%" height="15" fill="rgb(231,124,27)" fg:x="105562" fg:w="78"/><text x="41.9928%" y="399.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (78 samples, 0.03%)</title><rect x="41.7428%" y="373" width="0.0308%" height="15" fill="rgb(249,195,6)" fg:x="105562" fg:w="78"/><text x="41.9928%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (160 samples, 0.06%)</title><rect x="42.0109%" y="517" width="0.0633%" height="15" fill="rgb(237,174,47)" fg:x="106240" fg:w="160"/><text x="42.2609%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,236 samples, 0.49%)</title><rect x="41.7736%" y="533" width="0.4888%" height="15" fill="rgb(206,201,31)" fg:x="105640" fg:w="1236"/><text x="42.0236%" y="543.50"></text></g><g><title>core::ptr::write (474 samples, 0.19%)</title><rect x="42.0749%" y="517" width="0.1874%" height="15" fill="rgb(231,57,52)" fg:x="106402" fg:w="474"/><text x="42.3249%" y="527.50"></text></g><g><title>malloc_consolidate (270 samples, 0.11%)</title><rect x="43.1663%" y="389" width="0.1068%" height="15" fill="rgb(248,177,22)" fg:x="109162" fg:w="270"/><text x="43.4163%" y="399.50"></text></g><g><title>unlink_chunk.constprop.0 (59 samples, 0.02%)</title><rect x="43.2498%" y="373" width="0.0233%" height="15" fill="rgb(215,211,37)" fg:x="109373" fg:w="59"/><text x="43.4998%" y="383.50"></text></g><g><title>__GI___libc_malloc (2,658 samples, 1.05%)</title><rect x="42.2742%" y="421" width="1.0511%" height="15" fill="rgb(241,128,51)" fg:x="106906" fg:w="2658"/><text x="42.5242%" y="431.50"></text></g><g><title>_int_malloc (1,801 samples, 0.71%)</title><rect x="42.6131%" y="405" width="0.7122%" height="15" fill="rgb(227,165,31)" fg:x="107763" fg:w="1801"/><text x="42.8631%" y="415.50"></text></g><g><title>unlink_chunk.constprop.0 (122 samples, 0.05%)</title><rect x="43.2770%" y="389" width="0.0482%" height="15" fill="rgb(228,167,24)" fg:x="109442" fg:w="122"/><text x="43.5270%" y="399.50"></text></g><g><title>__rdl_alloc (38 samples, 0.02%)</title><rect x="43.3253%" y="421" width="0.0150%" height="15" fill="rgb(228,143,12)" fg:x="109564" fg:w="38"/><text x="43.5753%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (38 samples, 0.02%)</title><rect x="43.3253%" y="405" width="0.0150%" height="15" fill="rgb(249,149,8)" fg:x="109564" fg:w="38"/><text x="43.5753%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,726 samples, 1.08%)</title><rect x="42.2675%" y="469" width="1.0780%" height="15" fill="rgb(243,35,44)" fg:x="106889" fg:w="2726"/><text x="42.5175%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,726 samples, 1.08%)</title><rect x="42.2675%" y="453" width="1.0780%" height="15" fill="rgb(246,89,9)" fg:x="106889" fg:w="2726"/><text x="42.5175%" y="463.50"></text></g><g><title>alloc::alloc::alloc (2,718 samples, 1.07%)</title><rect x="42.2707%" y="437" width="1.0748%" height="15" fill="rgb(233,213,13)" fg:x="106897" fg:w="2718"/><text x="42.5207%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,741 samples, 1.08%)</title><rect x="42.2624%" y="533" width="1.0839%" height="15" fill="rgb(233,141,41)" fg:x="106876" fg:w="2741"/><text x="42.5124%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,741 samples, 1.08%)</title><rect x="42.2624%" y="517" width="1.0839%" height="15" fill="rgb(239,167,4)" fg:x="106876" fg:w="2741"/><text x="42.5124%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,732 samples, 1.08%)</title><rect x="42.2659%" y="501" width="1.0803%" height="15" fill="rgb(209,217,16)" fg:x="106885" fg:w="2732"/><text x="42.5159%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2,732 samples, 1.08%)</title><rect x="42.2659%" y="485" width="1.0803%" height="15" fill="rgb(219,88,35)" fg:x="106885" fg:w="2732"/><text x="42.5159%" y="495.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (46 samples, 0.02%)</title><rect x="43.3498%" y="501" width="0.0182%" height="15" fill="rgb(220,193,23)" fg:x="109626" fg:w="46"/><text x="43.5998%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (46 samples, 0.02%)</title><rect x="43.3498%" y="485" width="0.0182%" height="15" fill="rgb(230,90,52)" fg:x="109626" fg:w="46"/><text x="43.5998%" y="495.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4,504 samples, 1.78%)</title><rect x="41.6340%" y="565" width="1.7810%" height="15" fill="rgb(252,106,19)" fg:x="105287" fg:w="4504"/><text x="41.8840%" y="575.50">&lt;..</text></g><g><title>nom::multi::count::{{closure}} (4,491 samples, 1.78%)</title><rect x="41.6392%" y="549" width="1.7759%" height="15" fill="rgb(206,74,20)" fg:x="105300" fg:w="4491"/><text x="41.8892%" y="559.50">n..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (174 samples, 0.07%)</title><rect x="43.3462%" y="533" width="0.0688%" height="15" fill="rgb(230,138,44)" fg:x="109617" fg:w="174"/><text x="43.5962%" y="543.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (174 samples, 0.07%)</title><rect x="43.3462%" y="517" width="0.0688%" height="15" fill="rgb(235,182,43)" fg:x="109617" fg:w="174"/><text x="43.5962%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (119 samples, 0.05%)</title><rect x="43.3680%" y="501" width="0.0471%" height="15" fill="rgb(242,16,51)" fg:x="109672" fg:w="119"/><text x="43.6180%" y="511.50"></text></g><g><title>nom::combinator::map::{{closure}} (4,544 samples, 1.80%)</title><rect x="41.6340%" y="581" width="1.7968%" height="15" fill="rgb(248,9,4)" fg:x="105287" fg:w="4544"/><text x="41.8840%" y="591.50">n..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (40 samples, 0.02%)</title><rect x="43.4150%" y="565" width="0.0158%" height="15" fill="rgb(210,31,22)" fg:x="109791" fg:w="40"/><text x="43.6650%" y="575.50"></text></g><g><title>hprof_slurp::parser::primitive_parsers::parse_u32 (64 samples, 0.03%)</title><rect x="43.4502%" y="517" width="0.0253%" height="15" fill="rgb(239,54,39)" fg:x="109880" fg:w="64"/><text x="43.7002%" y="527.50"></text></g><g><title>nom::number::streaming::be_u32 (64 samples, 0.03%)</title><rect x="43.4502%" y="501" width="0.0253%" height="15" fill="rgb(230,99,41)" fg:x="109880" fg:w="64"/><text x="43.7002%" y="511.50"></text></g><g><title>hprof_slurp::parser::record_parser::parse_field_type (57 samples, 0.02%)</title><rect x="43.4755%" y="517" width="0.0225%" height="15" fill="rgb(253,106,12)" fg:x="109944" fg:w="57"/><text x="43.7255%" y="527.50"></text></g><g><title>nom::combinator::map::{{closure}} (57 samples, 0.02%)</title><rect x="43.4755%" y="501" width="0.0225%" height="15" fill="rgb(213,46,41)" fg:x="109944" fg:w="57"/><text x="43.7255%" y="511.50"></text></g><g><title>core::ops::function::FnMut::call_mut (38 samples, 0.02%)</title><rect x="43.4831%" y="485" width="0.0150%" height="15" fill="rgb(215,133,35)" fg:x="109963" fg:w="38"/><text x="43.7331%" y="495.50"></text></g><g><title>hprof_slurp::parser::gc_record::FieldType::from_value (37 samples, 0.01%)</title><rect x="43.4835%" y="469" width="0.0146%" height="15" fill="rgb(213,28,5)" fg:x="109964" fg:w="37"/><text x="43.7335%" y="479.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (266 samples, 0.11%)</title><rect x="43.4415%" y="549" width="0.1052%" height="15" fill="rgb(215,77,49)" fg:x="109858" fg:w="266"/><text x="43.6915%" y="559.50"></text></g><g><title>core::ops::function::FnMut::call_mut (244 samples, 0.10%)</title><rect x="43.4502%" y="533" width="0.0965%" height="15" fill="rgb(248,100,22)" fg:x="109880" fg:w="244"/><text x="43.7002%" y="543.50"></text></g><g><title>hprof_slurp::parser::record_parser::parse_id (123 samples, 0.05%)</title><rect x="43.4981%" y="517" width="0.0486%" height="15" fill="rgb(208,67,9)" fg:x="110001" fg:w="123"/><text x="43.7481%" y="527.50"></text></g><g><title>hprof_slurp::parser::primitive_parsers::parse_u64 (114 samples, 0.05%)</title><rect x="43.5016%" y="501" width="0.0451%" height="15" fill="rgb(219,133,21)" fg:x="110010" fg:w="114"/><text x="43.7516%" y="511.50"></text></g><g><title>nom::number::streaming::be_u64 (104 samples, 0.04%)</title><rect x="43.5056%" y="485" width="0.0411%" height="15" fill="rgb(246,46,29)" fg:x="110020" fg:w="104"/><text x="43.7556%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.01%)</title><rect x="43.5341%" y="469" width="0.0127%" height="15" fill="rgb(246,185,52)" fg:x="110092" fg:w="32"/><text x="43.7841%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.01%)</title><rect x="43.5341%" y="453" width="0.0127%" height="15" fill="rgb(252,136,11)" fg:x="110092" fg:w="32"/><text x="43.7841%" y="463.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (32 samples, 0.01%)</title><rect x="43.5341%" y="437" width="0.0127%" height="15" fill="rgb(219,138,53)" fg:x="110092" fg:w="32"/><text x="43.7841%" y="447.50"></text></g><g><title>hprof_slurp::parser::record_parser::parse_gc_record (36,362 samples, 14.38%)</title><rect x="29.1858%" y="613" width="14.3788%" height="15" fill="rgb(211,51,23)" fg:x="73807" fg:w="36362"/><text x="29.4358%" y="623.50">hprof_slurp::parser::r..</text></g><g><title>hprof_slurp::parser::record_parser::parse_gc_primitive_array_dump (4,999 samples, 1.98%)</title><rect x="41.5877%" y="597" width="1.9768%" height="15" fill="rgb(247,221,28)" fg:x="105170" fg:w="4999"/><text x="41.8377%" y="607.50">h..</text></g><g><title>nom::sequence::tuple::{{closure}} (338 samples, 0.13%)</title><rect x="43.4309%" y="581" width="0.1337%" height="15" fill="rgb(251,222,45)" fg:x="109831" fg:w="338"/><text x="43.6809%" y="591.50"></text></g><g><title>&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (338 samples, 0.13%)</title><rect x="43.4309%" y="565" width="0.1337%" height="15" fill="rgb(217,162,53)" fg:x="109831" fg:w="338"/><text x="43.6809%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (45 samples, 0.02%)</title><rect x="43.5467%" y="549" width="0.0178%" height="15" fill="rgb(229,93,14)" fg:x="110124" fg:w="45"/><text x="43.7967%" y="559.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (86,837 samples, 34.34%)</title><rect x="9.2342%" y="645" width="34.3383%" height="15" fill="rgb(209,67,49)" fg:x="23352" fg:w="86837"/><text x="9.4842%" y="655.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>hprof_slurp::parser::record_parser::HprofRecordParser::parse_hprof_record::{{closure}} (86,253 samples, 34.11%)</title><rect x="9.4651%" y="629" width="34.1073%" height="15" fill="rgb(213,87,29)" fg:x="23936" fg:w="86253"/><text x="9.7151%" y="639.50">hprof_slurp::parser::record_parser::HprofRecordParser::..</text></g><g><title>__sysvec_apic_timer_interrupt (26 samples, 0.01%)</title><rect x="50.6183%" y="597" width="0.0103%" height="15" fill="rgb(205,151,52)" fg:x="128007" fg:w="26"/><text x="50.8683%" y="607.50"></text></g><g><title>__memcpy_avx_unaligned_erms (17,850 samples, 7.06%)</title><rect x="43.5724%" y="645" width="7.0585%" height="15" fill="rgb(253,215,39)" fg:x="110189" fg:w="17850"/><text x="43.8224%" y="655.50">__memcpy_..</text></g><g><title>asm_sysvec_apic_timer_interrupt (32 samples, 0.01%)</title><rect x="50.6183%" y="629" width="0.0127%" height="15" fill="rgb(221,220,41)" fg:x="128007" fg:w="32"/><text x="50.8683%" y="639.50"></text></g><g><title>sysvec_apic_timer_interrupt (32 samples, 0.01%)</title><rect x="50.6183%" y="613" width="0.0127%" height="15" fill="rgb(218,133,21)" fg:x="128007" fg:w="32"/><text x="50.8683%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (578 samples, 0.23%)</title><rect x="50.8484%" y="629" width="0.2286%" height="15" fill="rgb(221,193,43)" fg:x="128589" fg:w="578"/><text x="51.0984%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (578 samples, 0.23%)</title><rect x="50.8484%" y="613" width="0.2286%" height="15" fill="rgb(240,128,52)" fg:x="128589" fg:w="578"/><text x="51.0984%" y="623.50"></text></g><g><title>handle_pte_fault (32 samples, 0.01%)</title><rect x="58.1536%" y="517" width="0.0127%" height="15" fill="rgb(253,114,12)" fg:x="147063" fg:w="32"/><text x="58.4036%" y="527.50"></text></g><g><title>do_anonymous_page (32 samples, 0.01%)</title><rect x="58.1536%" y="501" width="0.0127%" height="15" fill="rgb(215,223,47)" fg:x="147063" fg:w="32"/><text x="58.4036%" y="511.50"></text></g><g><title>handle_mm_fault (39 samples, 0.02%)</title><rect x="58.1513%" y="549" width="0.0154%" height="15" fill="rgb(248,225,23)" fg:x="147057" fg:w="39"/><text x="58.4013%" y="559.50"></text></g><g><title>__handle_mm_fault (36 samples, 0.01%)</title><rect x="58.1525%" y="533" width="0.0142%" height="15" fill="rgb(250,108,0)" fg:x="147060" fg:w="36"/><text x="58.4025%" y="543.50"></text></g><g><title>do_user_addr_fault (44 samples, 0.02%)</title><rect x="58.1497%" y="565" width="0.0174%" height="15" fill="rgb(228,208,7)" fg:x="147053" fg:w="44"/><text x="58.3997%" y="575.50"></text></g><g><title>asm_exc_page_fault (52 samples, 0.02%)</title><rect x="58.1493%" y="597" width="0.0206%" height="15" fill="rgb(244,45,10)" fg:x="147052" fg:w="52"/><text x="58.3993%" y="607.50"></text></g><g><title>exc_page_fault (51 samples, 0.02%)</title><rect x="58.1497%" y="581" width="0.0202%" height="15" fill="rgb(207,125,25)" fg:x="147053" fg:w="51"/><text x="58.3997%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (19,094 samples, 7.55%)</title><rect x="50.6309%" y="645" width="7.5504%" height="15" fill="rgb(210,195,18)" fg:x="128039" fg:w="19094"/><text x="50.8809%" y="655.50">alloc::vec..</text></g><g><title>core::ptr::write (17,966 samples, 7.10%)</title><rect x="51.0770%" y="629" width="7.1044%" height="15" fill="rgb(249,80,12)" fg:x="129167" fg:w="17966"/><text x="51.3270%" y="639.50">core::ptr:..</text></g><g><title>__memcpy_avx_unaligned_erms (17,966 samples, 7.10%)</title><rect x="51.0770%" y="613" width="7.1044%" height="15" fill="rgb(221,65,9)" fg:x="129167" fg:w="17966"/><text x="51.3270%" y="623.50">__memcpy_a..</text></g><g><title>hprof_slurp::parser::record_parser::HprofRecordParser::parse_streaming (126,122 samples, 49.87%)</title><rect x="8.4295%" y="677" width="49.8729%" height="15" fill="rgb(235,49,36)" fg:x="21317" fg:w="126122"/><text x="8.6795%" y="687.50">hprof_slurp::parser::record_parser::HprofRecordParser::parse_streaming</text></g><g><title>hprof_slurp::parser::record_parser::lazy_many1::{{closure}} (126,122 samples, 49.87%)</title><rect x="8.4295%" y="661" width="49.8729%" height="15" fill="rgb(225,32,20)" fg:x="21317" fg:w="126122"/><text x="8.6795%" y="671.50">hprof_slurp::parser::record_parser::lazy_many1::{{closure}}</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (297 samples, 0.12%)</title><rect x="58.1849%" y="645" width="0.1174%" height="15" fill="rgb(215,141,46)" fg:x="147142" fg:w="297"/><text x="58.4349%" y="655.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (297 samples, 0.12%)</title><rect x="58.1849%" y="629" width="0.1174%" height="15" fill="rgb(250,160,47)" fg:x="147142" fg:w="297"/><text x="58.4349%" y="639.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (297 samples, 0.12%)</title><rect x="58.1849%" y="613" width="0.1174%" height="15" fill="rgb(216,222,40)" fg:x="147142" fg:w="297"/><text x="58.4349%" y="623.50"></text></g><g><title>__GI___clone (138,223 samples, 54.66%)</title><rect x="3.6506%" y="901" width="54.6580%" height="15" fill="rgb(234,217,39)" fg:x="9232" fg:w="138223"/><text x="3.9006%" y="911.50">__GI___clone</text></g><g><title>start_thread (138,223 samples, 54.66%)</title><rect x="3.6506%" y="885" width="54.6580%" height="15" fill="rgb(207,178,40)" fg:x="9232" fg:w="138223"/><text x="3.9006%" y="895.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (138,223 samples, 54.66%)</title><rect x="3.6506%" y="869" width="54.6580%" height="15" fill="rgb(221,136,13)" fg:x="9232" fg:w="138223"/><text x="3.9006%" y="879.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (138,223 samples, 54.66%)</title><rect x="3.6506%" y="853" width="54.6580%" height="15" fill="rgb(249,199,10)" fg:x="9232" fg:w="138223"/><text x="3.9006%" y="863.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (138,223 samples, 54.66%)</title><rect x="3.6506%" y="837" width="54.6580%" height="15" fill="rgb(249,222,13)" fg:x="9232" fg:w="138223"/><text x="3.9006%" y="847.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (138,223 samples, 54.66%)</title><rect x="3.6506%" y="821" width="54.6580%" height="15" fill="rgb(244,185,38)" fg:x="9232" fg:w="138223"/><text x="3.9006%" y="831.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (138,223 samples, 54.66%)</title><rect x="3.6506%" y="805" width="54.6580%" height="15" fill="rgb(236,202,9)" fg:x="9232" fg:w="138223"/><text x="3.9006%" y="815.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (138,223 samples, 54.66%)</title><rect x="3.6506%" y="789" width="54.6580%" height="15" fill="rgb(250,229,37)" fg:x="9232" fg:w="138223"/><text x="3.9006%" y="799.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (138,223 samples, 54.66%)</title><rect x="3.6506%" y="773" width="54.6580%" height="15" fill="rgb(206,174,23)" fg:x="9232" fg:w="138223"/><text x="3.9006%" y="783.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (138,223 samples, 54.66%)</title><rect x="3.6506%" y="757" width="54.6580%" height="15" fill="rgb(211,33,43)" fg:x="9232" fg:w="138223"/><text x="3.9006%" y="767.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (138,223 samples, 54.66%)</title><rect x="3.6506%" y="741" width="54.6580%" height="15" fill="rgb(245,58,50)" fg:x="9232" fg:w="138223"/><text x="3.9006%" y="751.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_o..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (138,223 samples, 54.66%)</title><rect x="3.6506%" y="725" width="54.6580%" height="15" fill="rgb(244,68,36)" fg:x="9232" fg:w="138223"/><text x="3.9006%" y="735.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (138,223 samples, 54.66%)</title><rect x="3.6506%" y="709" width="54.6580%" height="15" fill="rgb(232,229,15)" fg:x="9232" fg:w="138223"/><text x="3.9006%" y="719.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>hprof_slurp::parser::record_stream_parser::HprofRecordStreamParser::start::{{closure}} (138,223 samples, 54.66%)</title><rect x="3.6506%" y="693" width="54.6580%" height="15" fill="rgb(254,30,23)" fg:x="9232" fg:w="138223"/><text x="3.9006%" y="703.50">hprof_slurp::parser::record_stream_parser::HprofRecordStreamParser::start::{{closure}}</text></g><g><title>asm_exc_page_fault (159 samples, 0.06%)</title><rect x="58.3098%" y="901" width="0.0629%" height="15" fill="rgb(235,160,14)" fg:x="147458" fg:w="159"/><text x="58.5598%" y="911.50"></text></g><g><title>hprof-parser (147,630 samples, 58.38%)</title><rect x="0.0000%" y="917" width="58.3779%" height="15" fill="rgb(212,155,44)" fg:x="0" fg:w="147630"/><text x="0.2500%" y="927.50">hprof-parser</text></g><g><title>__cond_resched (29 samples, 0.01%)</title><rect x="58.5495%" y="453" width="0.0115%" height="15" fill="rgb(226,2,50)" fg:x="148064" fg:w="29"/><text x="58.7995%" y="463.50"></text></g><g><title>asm_exc_page_fault (7,822 samples, 3.09%)</title><rect x="58.5720%" y="453" width="3.0931%" height="15" fill="rgb(234,177,6)" fg:x="148121" fg:w="7822"/><text x="58.8220%" y="463.50">asm..</text></g><g><title>copy_page_to_iter (353 samples, 0.14%)</title><rect x="61.6667%" y="453" width="0.1396%" height="15" fill="rgb(217,24,9)" fg:x="155947" fg:w="353"/><text x="61.9167%" y="463.50"></text></g><g><title>__read_end_io (143 samples, 0.06%)</title><rect x="65.3588%" y="213" width="0.0565%" height="15" fill="rgb(220,13,46)" fg:x="165284" fg:w="143"/><text x="65.6088%" y="223.50"></text></g><g><title>blk_update_request (208 samples, 0.08%)</title><rect x="65.3509%" y="261" width="0.0823%" height="15" fill="rgb(239,221,27)" fg:x="165264" fg:w="208"/><text x="65.6009%" y="271.50"></text></g><g><title>bio_endio (195 samples, 0.08%)</title><rect x="65.3561%" y="245" width="0.0771%" height="15" fill="rgb(222,198,25)" fg:x="165277" fg:w="195"/><text x="65.6061%" y="255.50"></text></g><g><title>mpage_end_io (188 samples, 0.07%)</title><rect x="65.3588%" y="229" width="0.0743%" height="15" fill="rgb(211,99,13)" fg:x="165284" fg:w="188"/><text x="65.6088%" y="239.50"></text></g><g><title>unlock_page (45 samples, 0.02%)</title><rect x="65.4154%" y="213" width="0.0178%" height="15" fill="rgb(232,111,31)" fg:x="165427" fg:w="45"/><text x="65.6654%" y="223.50"></text></g><g><title>nvme_complete_rq (219 samples, 0.09%)</title><rect x="65.3478%" y="293" width="0.0866%" height="15" fill="rgb(245,82,37)" fg:x="165256" fg:w="219"/><text x="65.5978%" y="303.50"></text></g><g><title>blk_mq_end_request (217 samples, 0.09%)</title><rect x="65.3486%" y="277" width="0.0858%" height="15" fill="rgb(227,149,46)" fg:x="165258" fg:w="217"/><text x="65.5986%" y="287.50"></text></g><g><title>__handle_irq_event_percpu (259 samples, 0.10%)</title><rect x="65.3418%" y="357" width="0.1024%" height="15" fill="rgb(218,36,50)" fg:x="165241" fg:w="259"/><text x="65.5918%" y="367.50"></text></g><g><title>nvme_irq (257 samples, 0.10%)</title><rect x="65.3426%" y="341" width="0.1016%" height="15" fill="rgb(226,80,48)" fg:x="165243" fg:w="257"/><text x="65.5926%" y="351.50"></text></g><g><title>nvme_process_cq (257 samples, 0.10%)</title><rect x="65.3426%" y="325" width="0.1016%" height="15" fill="rgb(238,224,15)" fg:x="165243" fg:w="257"/><text x="65.5926%" y="335.50"></text></g><g><title>nvme_pci_complete_rq (244 samples, 0.10%)</title><rect x="65.3478%" y="309" width="0.0965%" height="15" fill="rgb(241,136,10)" fg:x="165256" fg:w="244"/><text x="65.5978%" y="319.50"></text></g><g><title>handle_irq_event (261 samples, 0.10%)</title><rect x="65.3418%" y="373" width="0.1032%" height="15" fill="rgb(208,32,45)" fg:x="165241" fg:w="261"/><text x="65.5918%" y="383.50"></text></g><g><title>asm_common_interrupt (270 samples, 0.11%)</title><rect x="65.3391%" y="437" width="0.1068%" height="15" fill="rgb(207,135,9)" fg:x="165234" fg:w="270"/><text x="65.5891%" y="447.50"></text></g><g><title>common_interrupt (270 samples, 0.11%)</title><rect x="65.3391%" y="421" width="0.1068%" height="15" fill="rgb(206,86,44)" fg:x="165234" fg:w="270"/><text x="65.5891%" y="431.50"></text></g><g><title>__common_interrupt (269 samples, 0.11%)</title><rect x="65.3395%" y="405" width="0.1064%" height="15" fill="rgb(245,177,15)" fg:x="165235" fg:w="269"/><text x="65.5895%" y="415.50"></text></g><g><title>handle_edge_irq (264 samples, 0.10%)</title><rect x="65.3414%" y="389" width="0.1044%" height="15" fill="rgb(206,64,50)" fg:x="165240" fg:w="264"/><text x="65.5914%" y="399.50"></text></g><g><title>__read_end_io (58 samples, 0.02%)</title><rect x="65.6269%" y="165" width="0.0229%" height="15" fill="rgb(234,36,40)" fg:x="165962" fg:w="58"/><text x="65.8769%" y="175.50"></text></g><g><title>nvme_complete_rq (107 samples, 0.04%)</title><rect x="65.6171%" y="245" width="0.0423%" height="15" fill="rgb(213,64,8)" fg:x="165937" fg:w="107"/><text x="65.8671%" y="255.50"></text></g><g><title>blk_mq_end_request (107 samples, 0.04%)</title><rect x="65.6171%" y="229" width="0.0423%" height="15" fill="rgb(210,75,36)" fg:x="165937" fg:w="107"/><text x="65.8671%" y="239.50"></text></g><g><title>blk_update_request (103 samples, 0.04%)</title><rect x="65.6186%" y="213" width="0.0407%" height="15" fill="rgb(229,88,21)" fg:x="165941" fg:w="103"/><text x="65.8686%" y="223.50"></text></g><g><title>bio_endio (88 samples, 0.03%)</title><rect x="65.6246%" y="197" width="0.0348%" height="15" fill="rgb(252,204,47)" fg:x="165956" fg:w="88"/><text x="65.8746%" y="207.50"></text></g><g><title>mpage_end_io (82 samples, 0.03%)</title><rect x="65.6269%" y="181" width="0.0324%" height="15" fill="rgb(208,77,27)" fg:x="165962" fg:w="82"/><text x="65.8769%" y="191.50"></text></g><g><title>__handle_irq_event_percpu (130 samples, 0.05%)</title><rect x="65.6135%" y="309" width="0.0514%" height="15" fill="rgb(221,76,26)" fg:x="165928" fg:w="130"/><text x="65.8635%" y="319.50"></text></g><g><title>nvme_irq (129 samples, 0.05%)</title><rect x="65.6139%" y="293" width="0.0510%" height="15" fill="rgb(225,139,18)" fg:x="165929" fg:w="129"/><text x="65.8639%" y="303.50"></text></g><g><title>nvme_process_cq (129 samples, 0.05%)</title><rect x="65.6139%" y="277" width="0.0510%" height="15" fill="rgb(230,137,11)" fg:x="165929" fg:w="129"/><text x="65.8639%" y="287.50"></text></g><g><title>nvme_pci_complete_rq (121 samples, 0.05%)</title><rect x="65.6171%" y="261" width="0.0478%" height="15" fill="rgb(212,28,1)" fg:x="165937" fg:w="121"/><text x="65.8671%" y="271.50"></text></g><g><title>handle_irq_event (133 samples, 0.05%)</title><rect x="65.6127%" y="325" width="0.0526%" height="15" fill="rgb(248,164,17)" fg:x="165926" fg:w="133"/><text x="65.8627%" y="335.50"></text></g><g><title>asm_common_interrupt (138 samples, 0.05%)</title><rect x="65.6111%" y="389" width="0.0546%" height="15" fill="rgb(222,171,42)" fg:x="165922" fg:w="138"/><text x="65.8611%" y="399.50"></text></g><g><title>common_interrupt (137 samples, 0.05%)</title><rect x="65.6115%" y="373" width="0.0542%" height="15" fill="rgb(243,84,45)" fg:x="165923" fg:w="137"/><text x="65.8615%" y="383.50"></text></g><g><title>__common_interrupt (136 samples, 0.05%)</title><rect x="65.6119%" y="357" width="0.0538%" height="15" fill="rgb(252,49,23)" fg:x="165924" fg:w="136"/><text x="65.8619%" y="367.50"></text></g><g><title>handle_edge_irq (135 samples, 0.05%)</title><rect x="65.6123%" y="341" width="0.0534%" height="15" fill="rgb(215,19,7)" fg:x="165925" fg:w="135"/><text x="65.8623%" y="351.50"></text></g><g><title>down_read_trylock (164 samples, 0.06%)</title><rect x="65.6681%" y="389" width="0.0649%" height="15" fill="rgb(238,81,41)" fg:x="166066" fg:w="164"/><text x="65.9181%" y="399.50"></text></g><g><title>find_vma (92 samples, 0.04%)</title><rect x="65.7329%" y="389" width="0.0364%" height="15" fill="rgb(210,199,37)" fg:x="166230" fg:w="92"/><text x="65.9829%" y="399.50"></text></g><g><title>vmacache_find (58 samples, 0.02%)</title><rect x="65.7464%" y="373" width="0.0229%" height="15" fill="rgb(244,192,49)" fg:x="166264" fg:w="58"/><text x="65.9964%" y="383.50"></text></g><g><title>__count_memcg_events (74 samples, 0.03%)</title><rect x="65.8555%" y="373" width="0.0293%" height="15" fill="rgb(226,211,11)" fg:x="166540" fg:w="74"/><text x="66.1055%" y="383.50"></text></g><g><title>cgroup_rstat_updated (39 samples, 0.02%)</title><rect x="65.8693%" y="357" width="0.0154%" height="15" fill="rgb(236,162,54)" fg:x="166575" fg:w="39"/><text x="66.1193%" y="367.50"></text></g><g><title>_raw_spin_lock (151 samples, 0.06%)</title><rect x="66.1798%" y="341" width="0.0597%" height="15" fill="rgb(220,229,9)" fg:x="167360" fg:w="151"/><text x="66.4298%" y="351.50"></text></g><g><title>__pte_alloc (30 samples, 0.01%)</title><rect x="66.3925%" y="325" width="0.0119%" height="15" fill="rgb(250,87,22)" fg:x="167898" fg:w="30"/><text x="66.6425%" y="335.50"></text></g><g><title>pte_alloc_one (28 samples, 0.01%)</title><rect x="66.3933%" y="309" width="0.0111%" height="15" fill="rgb(239,43,17)" fg:x="167900" fg:w="28"/><text x="66.6433%" y="319.50"></text></g><g><title>clear_page_erms (28 samples, 0.01%)</title><rect x="66.5815%" y="261" width="0.0111%" height="15" fill="rgb(231,177,25)" fg:x="168376" fg:w="28"/><text x="66.8315%" y="271.50"></text></g><g><title>get_page_from_freelist (51 samples, 0.02%)</title><rect x="66.5799%" y="277" width="0.0202%" height="15" fill="rgb(219,179,1)" fg:x="168372" fg:w="51"/><text x="66.8299%" y="287.50"></text></g><g><title>__alloc_pages_slowpath.constprop.0 (59 samples, 0.02%)</title><rect x="66.5787%" y="293" width="0.0233%" height="15" fill="rgb(238,219,53)" fg:x="168369" fg:w="59"/><text x="66.8287%" y="303.50"></text></g><g><title>__next_zones_zonelist (115 samples, 0.05%)</title><rect x="66.6076%" y="293" width="0.0455%" height="15" fill="rgb(232,167,36)" fg:x="168442" fg:w="115"/><text x="66.8576%" y="303.50"></text></g><g><title>__inc_numa_state (52 samples, 0.02%)</title><rect x="66.7614%" y="277" width="0.0206%" height="15" fill="rgb(244,19,51)" fg:x="168831" fg:w="52"/><text x="67.0114%" y="287.50"></text></g><g><title>__read_end_io (42 samples, 0.02%)</title><rect x="68.1775%" y="37" width="0.0166%" height="15" fill="rgb(224,6,22)" fg:x="172412" fg:w="42"/><text x="68.4275%" y="47.50"></text></g><g><title>blk_update_request (61 samples, 0.02%)</title><rect x="68.1755%" y="85" width="0.0241%" height="15" fill="rgb(224,145,5)" fg:x="172407" fg:w="61"/><text x="68.4255%" y="95.50"></text></g><g><title>bio_endio (58 samples, 0.02%)</title><rect x="68.1767%" y="69" width="0.0229%" height="15" fill="rgb(234,130,49)" fg:x="172410" fg:w="58"/><text x="68.4267%" y="79.50"></text></g><g><title>mpage_end_io (56 samples, 0.02%)</title><rect x="68.1775%" y="53" width="0.0221%" height="15" fill="rgb(254,6,2)" fg:x="172412" fg:w="56"/><text x="68.4275%" y="63.50"></text></g><g><title>nvme_complete_rq (65 samples, 0.03%)</title><rect x="68.1743%" y="117" width="0.0257%" height="15" fill="rgb(208,96,46)" fg:x="172404" fg:w="65"/><text x="68.4243%" y="127.50"></text></g><g><title>blk_mq_end_request (65 samples, 0.03%)</title><rect x="68.1743%" y="101" width="0.0257%" height="15" fill="rgb(239,3,39)" fg:x="172404" fg:w="65"/><text x="68.4243%" y="111.50"></text></g><g><title>asm_common_interrupt (88 samples, 0.03%)</title><rect x="68.1712%" y="261" width="0.0348%" height="15" fill="rgb(233,210,1)" fg:x="172396" fg:w="88"/><text x="68.4212%" y="271.50"></text></g><g><title>common_interrupt (88 samples, 0.03%)</title><rect x="68.1712%" y="245" width="0.0348%" height="15" fill="rgb(244,137,37)" fg:x="172396" fg:w="88"/><text x="68.4212%" y="255.50"></text></g><g><title>__common_interrupt (88 samples, 0.03%)</title><rect x="68.1712%" y="229" width="0.0348%" height="15" fill="rgb(240,136,2)" fg:x="172396" fg:w="88"/><text x="68.4212%" y="239.50"></text></g><g><title>handle_edge_irq (87 samples, 0.03%)</title><rect x="68.1716%" y="213" width="0.0344%" height="15" fill="rgb(239,18,37)" fg:x="172397" fg:w="87"/><text x="68.4216%" y="223.50"></text></g><g><title>handle_irq_event (84 samples, 0.03%)</title><rect x="68.1727%" y="197" width="0.0332%" height="15" fill="rgb(218,185,22)" fg:x="172400" fg:w="84"/><text x="68.4227%" y="207.50"></text></g><g><title>__handle_irq_event_percpu (84 samples, 0.03%)</title><rect x="68.1727%" y="181" width="0.0332%" height="15" fill="rgb(225,218,4)" fg:x="172400" fg:w="84"/><text x="68.4227%" y="191.50"></text></g><g><title>nvme_irq (84 samples, 0.03%)</title><rect x="68.1727%" y="165" width="0.0332%" height="15" fill="rgb(230,182,32)" fg:x="172400" fg:w="84"/><text x="68.4227%" y="175.50"></text></g><g><title>nvme_process_cq (84 samples, 0.03%)</title><rect x="68.1727%" y="149" width="0.0332%" height="15" fill="rgb(242,56,43)" fg:x="172400" fg:w="84"/><text x="68.4227%" y="159.50"></text></g><g><title>nvme_pci_complete_rq (80 samples, 0.03%)</title><rect x="68.1743%" y="133" width="0.0316%" height="15" fill="rgb(233,99,24)" fg:x="172404" fg:w="80"/><text x="68.4243%" y="143.50"></text></g><g><title>clear_page_erms (3,581 samples, 1.42%)</title><rect x="66.7931%" y="277" width="1.4160%" height="15" fill="rgb(234,209,42)" fg:x="168911" fg:w="3581"/><text x="67.0431%" y="287.50"></text></g><g><title>kernel_init_free_pages (41 samples, 0.02%)</title><rect x="68.2091%" y="277" width="0.0162%" height="15" fill="rgb(227,7,12)" fg:x="172492" fg:w="41"/><text x="68.4591%" y="287.50"></text></g><g><title>nvme_complete_rq (30 samples, 0.01%)</title><rect x="68.3523%" y="117" width="0.0119%" height="15" fill="rgb(245,203,43)" fg:x="172854" fg:w="30"/><text x="68.6023%" y="127.50"></text></g><g><title>blk_mq_end_request (30 samples, 0.01%)</title><rect x="68.3523%" y="101" width="0.0119%" height="15" fill="rgb(238,205,33)" fg:x="172854" fg:w="30"/><text x="68.6023%" y="111.50"></text></g><g><title>blk_update_request (29 samples, 0.01%)</title><rect x="68.3527%" y="85" width="0.0115%" height="15" fill="rgb(231,56,7)" fg:x="172855" fg:w="29"/><text x="68.6027%" y="95.50"></text></g><g><title>bio_endio (28 samples, 0.01%)</title><rect x="68.3531%" y="69" width="0.0111%" height="15" fill="rgb(244,186,29)" fg:x="172856" fg:w="28"/><text x="68.6031%" y="79.50"></text></g><g><title>mpage_end_io (27 samples, 0.01%)</title><rect x="68.3535%" y="53" width="0.0107%" height="15" fill="rgb(234,111,31)" fg:x="172857" fg:w="27"/><text x="68.6035%" y="63.50"></text></g><g><title>handle_irq_event (36 samples, 0.01%)</title><rect x="68.3515%" y="197" width="0.0142%" height="15" fill="rgb(241,149,10)" fg:x="172852" fg:w="36"/><text x="68.6015%" y="207.50"></text></g><g><title>__handle_irq_event_percpu (36 samples, 0.01%)</title><rect x="68.3515%" y="181" width="0.0142%" height="15" fill="rgb(249,206,44)" fg:x="172852" fg:w="36"/><text x="68.6015%" y="191.50"></text></g><g><title>nvme_irq (36 samples, 0.01%)</title><rect x="68.3515%" y="165" width="0.0142%" height="15" fill="rgb(251,153,30)" fg:x="172852" fg:w="36"/><text x="68.6015%" y="175.50"></text></g><g><title>nvme_process_cq (36 samples, 0.01%)</title><rect x="68.3515%" y="149" width="0.0142%" height="15" fill="rgb(239,152,38)" fg:x="172852" fg:w="36"/><text x="68.6015%" y="159.50"></text></g><g><title>nvme_pci_complete_rq (34 samples, 0.01%)</title><rect x="68.3523%" y="133" width="0.0134%" height="15" fill="rgb(249,139,47)" fg:x="172854" fg:w="34"/><text x="68.6023%" y="143.50"></text></g><g><title>asm_common_interrupt (39 samples, 0.02%)</title><rect x="68.3507%" y="261" width="0.0154%" height="15" fill="rgb(244,64,35)" fg:x="172850" fg:w="39"/><text x="68.6007%" y="271.50"></text></g><g><title>common_interrupt (39 samples, 0.02%)</title><rect x="68.3507%" y="245" width="0.0154%" height="15" fill="rgb(216,46,15)" fg:x="172850" fg:w="39"/><text x="68.6007%" y="255.50"></text></g><g><title>__common_interrupt (38 samples, 0.02%)</title><rect x="68.3511%" y="229" width="0.0150%" height="15" fill="rgb(250,74,19)" fg:x="172851" fg:w="38"/><text x="68.6011%" y="239.50"></text></g><g><title>handle_edge_irq (37 samples, 0.01%)</title><rect x="68.3515%" y="213" width="0.0146%" height="15" fill="rgb(249,42,33)" fg:x="172852" fg:w="37"/><text x="68.6015%" y="223.50"></text></g><g><title>get_page_from_freelist (5,413 samples, 2.14%)</title><rect x="66.6555%" y="293" width="2.1405%" height="15" fill="rgb(242,149,17)" fg:x="168563" fg:w="5413"/><text x="66.9055%" y="303.50">g..</text></g><g><title>rmqueue (1,443 samples, 0.57%)</title><rect x="68.2253%" y="277" width="0.5706%" height="15" fill="rgb(244,29,21)" fg:x="172533" fg:w="1443"/><text x="68.4753%" y="287.50"></text></g><g><title>rmqueue_bulk.constprop.0 (1,086 samples, 0.43%)</title><rect x="68.3665%" y="261" width="0.4294%" height="15" fill="rgb(220,130,37)" fg:x="172890" fg:w="1086"/><text x="68.6165%" y="271.50"></text></g><g><title>kernel_init_free_pages (30 samples, 0.01%)</title><rect x="68.7959%" y="293" width="0.0119%" height="15" fill="rgb(211,67,2)" fg:x="173976" fg:w="30"/><text x="69.0459%" y="303.50"></text></g><g><title>__alloc_pages (5,927 samples, 2.34%)</title><rect x="66.4732%" y="309" width="2.3437%" height="15" fill="rgb(235,68,52)" fg:x="168102" fg:w="5927"/><text x="66.7232%" y="319.50">_..</text></g><g><title>alloc_pages_vma (6,198 samples, 2.45%)</title><rect x="66.4059%" y="325" width="2.4509%" height="15" fill="rgb(246,142,3)" fg:x="167932" fg:w="6198"/><text x="66.6559%" y="335.50">al..</text></g><g><title>cgroup_throttle_swaprate (234 samples, 0.09%)</title><rect x="68.8592%" y="325" width="0.0925%" height="15" fill="rgb(241,25,7)" fg:x="174136" fg:w="234"/><text x="69.1092%" y="335.50"></text></g><g><title>get_mem_cgroup_from_mm (29 samples, 0.01%)</title><rect x="68.9517%" y="325" width="0.0115%" height="15" fill="rgb(242,119,39)" fg:x="174370" fg:w="29"/><text x="69.2017%" y="335.50"></text></g><g><title>nvme_complete_rq (26 samples, 0.01%)</title><rect x="69.0759%" y="117" width="0.0103%" height="15" fill="rgb(241,98,45)" fg:x="174684" fg:w="26"/><text x="69.3259%" y="127.50"></text></g><g><title>blk_mq_end_request (26 samples, 0.01%)</title><rect x="69.0759%" y="101" width="0.0103%" height="15" fill="rgb(254,28,30)" fg:x="174684" fg:w="26"/><text x="69.3259%" y="111.50"></text></g><g><title>blk_update_request (26 samples, 0.01%)</title><rect x="69.0759%" y="85" width="0.0103%" height="15" fill="rgb(241,142,54)" fg:x="174684" fg:w="26"/><text x="69.3259%" y="95.50"></text></g><g><title>asm_common_interrupt (33 samples, 0.01%)</title><rect x="69.0747%" y="261" width="0.0130%" height="15" fill="rgb(222,85,15)" fg:x="174681" fg:w="33"/><text x="69.3247%" y="271.50"></text></g><g><title>common_interrupt (33 samples, 0.01%)</title><rect x="69.0747%" y="245" width="0.0130%" height="15" fill="rgb(210,85,47)" fg:x="174681" fg:w="33"/><text x="69.3247%" y="255.50"></text></g><g><title>__common_interrupt (33 samples, 0.01%)</title><rect x="69.0747%" y="229" width="0.0130%" height="15" fill="rgb(224,206,25)" fg:x="174681" fg:w="33"/><text x="69.3247%" y="239.50"></text></g><g><title>handle_edge_irq (33 samples, 0.01%)</title><rect x="69.0747%" y="213" width="0.0130%" height="15" fill="rgb(243,201,19)" fg:x="174681" fg:w="33"/><text x="69.3247%" y="223.50"></text></g><g><title>handle_irq_event (32 samples, 0.01%)</title><rect x="69.0751%" y="197" width="0.0127%" height="15" fill="rgb(236,59,4)" fg:x="174682" fg:w="32"/><text x="69.3251%" y="207.50"></text></g><g><title>__handle_irq_event_percpu (31 samples, 0.01%)</title><rect x="69.0755%" y="181" width="0.0123%" height="15" fill="rgb(254,179,45)" fg:x="174683" fg:w="31"/><text x="69.3255%" y="191.50"></text></g><g><title>nvme_irq (31 samples, 0.01%)</title><rect x="69.0755%" y="165" width="0.0123%" height="15" fill="rgb(226,14,10)" fg:x="174683" fg:w="31"/><text x="69.3255%" y="175.50"></text></g><g><title>nvme_process_cq (31 samples, 0.01%)</title><rect x="69.0755%" y="149" width="0.0123%" height="15" fill="rgb(244,27,41)" fg:x="174683" fg:w="31"/><text x="69.3255%" y="159.50"></text></g><g><title>nvme_pci_complete_rq (30 samples, 0.01%)</title><rect x="69.0759%" y="133" width="0.0119%" height="15" fill="rgb(235,35,32)" fg:x="174684" fg:w="30"/><text x="69.3259%" y="143.50"></text></g><g><title>__lock_text_start (39 samples, 0.02%)</title><rect x="69.0739%" y="277" width="0.0154%" height="15" fill="rgb(218,68,31)" fg:x="174679" fg:w="39"/><text x="69.3239%" y="287.50"></text></g><g><title>__mod_zone_page_state (31 samples, 0.01%)</title><rect x="69.0941%" y="277" width="0.0123%" height="15" fill="rgb(207,120,37)" fg:x="174730" fg:w="31"/><text x="69.3441%" y="287.50"></text></g><g><title>__mod_memcg_lruvec_state (171 samples, 0.07%)</title><rect x="69.3535%" y="245" width="0.0676%" height="15" fill="rgb(227,98,0)" fg:x="175386" fg:w="171"/><text x="69.6035%" y="255.50"></text></g><g><title>__mod_lruvec_state (256 samples, 0.10%)</title><rect x="69.3428%" y="261" width="0.1012%" height="15" fill="rgb(207,7,3)" fg:x="175359" fg:w="256"/><text x="69.5928%" y="271.50"></text></g><g><title>__mod_node_page_state (33 samples, 0.01%)</title><rect x="69.4310%" y="245" width="0.0130%" height="15" fill="rgb(206,98,19)" fg:x="175582" fg:w="33"/><text x="69.6810%" y="255.50"></text></g><g><title>mem_cgroup_update_lru_size (42 samples, 0.02%)</title><rect x="69.4603%" y="261" width="0.0166%" height="15" fill="rgb(217,5,26)" fg:x="175656" fg:w="42"/><text x="69.7103%" y="271.50"></text></g><g><title>__pagevec_lru_add_fn (1,056 samples, 0.42%)</title><rect x="69.1064%" y="277" width="0.4176%" height="15" fill="rgb(235,190,38)" fg:x="174761" fg:w="1056"/><text x="69.3564%" y="287.50"></text></g><g><title>page_mapping (119 samples, 0.05%)</title><rect x="69.4769%" y="261" width="0.0471%" height="15" fill="rgb(247,86,24)" fg:x="175698" fg:w="119"/><text x="69.7269%" y="271.50"></text></g><g><title>_raw_spin_lock_irqsave (76 samples, 0.03%)</title><rect x="69.5299%" y="261" width="0.0301%" height="15" fill="rgb(205,101,16)" fg:x="175832" fg:w="76"/><text x="69.7799%" y="271.50"></text></g><g><title>native_queued_spin_lock_slowpath (51 samples, 0.02%)</title><rect x="69.5398%" y="245" width="0.0202%" height="15" fill="rgb(246,168,33)" fg:x="175857" fg:w="51"/><text x="69.7898%" y="255.50"></text></g><g><title>native_queued_spin_lock_slowpath.part.0 (51 samples, 0.02%)</title><rect x="69.5398%" y="229" width="0.0202%" height="15" fill="rgb(231,114,1)" fg:x="175857" fg:w="51"/><text x="69.7898%" y="239.50"></text></g><g><title>lock_page_lruvec_irqsave (89 samples, 0.04%)</title><rect x="69.5255%" y="277" width="0.0352%" height="15" fill="rgb(207,184,53)" fg:x="175821" fg:w="89"/><text x="69.7755%" y="287.50"></text></g><g><title>__pagevec_lru_add (1,489 samples, 0.59%)</title><rect x="69.0455%" y="293" width="0.5888%" height="15" fill="rgb(224,95,51)" fg:x="174607" fg:w="1489"/><text x="69.2955%" y="303.50"></text></g><g><title>release_pages (160 samples, 0.06%)</title><rect x="69.5710%" y="277" width="0.0633%" height="15" fill="rgb(212,188,45)" fg:x="175936" fg:w="160"/><text x="69.8210%" y="287.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (1,698 samples, 0.67%)</title><rect x="68.9743%" y="325" width="0.6714%" height="15" fill="rgb(223,154,38)" fg:x="174427" fg:w="1698"/><text x="69.2243%" y="335.50"></text></g><g><title>lru_cache_add (1,678 samples, 0.66%)</title><rect x="68.9822%" y="309" width="0.6635%" height="15" fill="rgb(251,22,52)" fg:x="174447" fg:w="1678"/><text x="69.2322%" y="319.50"></text></g><g><title>__handle_irq_event_percpu (27 samples, 0.01%)</title><rect x="69.9818%" y="213" width="0.0107%" height="15" fill="rgb(229,209,22)" fg:x="176975" fg:w="27"/><text x="70.2318%" y="223.50"></text></g><g><title>nvme_irq (27 samples, 0.01%)</title><rect x="69.9818%" y="197" width="0.0107%" height="15" fill="rgb(234,138,34)" fg:x="176975" fg:w="27"/><text x="70.2318%" y="207.50"></text></g><g><title>nvme_process_cq (27 samples, 0.01%)</title><rect x="69.9818%" y="181" width="0.0107%" height="15" fill="rgb(212,95,11)" fg:x="176975" fg:w="27"/><text x="70.2318%" y="191.50"></text></g><g><title>nvme_pci_complete_rq (26 samples, 0.01%)</title><rect x="69.9822%" y="165" width="0.0103%" height="15" fill="rgb(240,179,47)" fg:x="176976" fg:w="26"/><text x="70.2322%" y="175.50"></text></g><g><title>asm_common_interrupt (29 samples, 0.01%)</title><rect x="69.9815%" y="293" width="0.0115%" height="15" fill="rgb(240,163,11)" fg:x="176974" fg:w="29"/><text x="70.2315%" y="303.50"></text></g><g><title>common_interrupt (29 samples, 0.01%)</title><rect x="69.9815%" y="277" width="0.0115%" height="15" fill="rgb(236,37,12)" fg:x="176974" fg:w="29"/><text x="70.2315%" y="287.50"></text></g><g><title>__common_interrupt (29 samples, 0.01%)</title><rect x="69.9815%" y="261" width="0.0115%" height="15" fill="rgb(232,164,16)" fg:x="176974" fg:w="29"/><text x="70.2315%" y="271.50"></text></g><g><title>handle_edge_irq (29 samples, 0.01%)</title><rect x="69.9815%" y="245" width="0.0115%" height="15" fill="rgb(244,205,15)" fg:x="176974" fg:w="29"/><text x="70.2315%" y="255.50"></text></g><g><title>handle_irq_event (28 samples, 0.01%)</title><rect x="69.9818%" y="229" width="0.0111%" height="15" fill="rgb(223,117,47)" fg:x="176975" fg:w="28"/><text x="70.2318%" y="239.50"></text></g><g><title>mem_cgroup_charge_statistics.constprop.0 (252 samples, 0.10%)</title><rect x="69.9985%" y="293" width="0.0996%" height="15" fill="rgb(244,107,35)" fg:x="177017" fg:w="252"/><text x="70.2485%" y="303.50"></text></g><g><title>cgroup_rstat_updated (92 samples, 0.04%)</title><rect x="70.0617%" y="277" width="0.0364%" height="15" fill="rgb(205,140,8)" fg:x="177177" fg:w="92"/><text x="70.3117%" y="287.50"></text></g><g><title>page_counter_try_charge (65 samples, 0.03%)</title><rect x="70.3180%" y="277" width="0.0257%" height="15" fill="rgb(228,84,46)" fg:x="177825" fg:w="65"/><text x="70.5680%" y="287.50"></text></g><g><title>__mem_cgroup_charge (1,662 samples, 0.66%)</title><rect x="69.6912%" y="309" width="0.6572%" height="15" fill="rgb(254,188,9)" fg:x="176240" fg:w="1662"/><text x="69.9412%" y="319.50"></text></g><g><title>try_charge (620 samples, 0.25%)</title><rect x="70.1032%" y="293" width="0.2452%" height="15" fill="rgb(206,112,54)" fg:x="177282" fg:w="620"/><text x="70.3532%" y="303.50"></text></g><g><title>get_mem_cgroup_from_mm (326 samples, 0.13%)</title><rect x="70.3496%" y="309" width="0.1289%" height="15" fill="rgb(216,84,49)" fg:x="177905" fg:w="326"/><text x="70.5996%" y="319.50"></text></g><g><title>memcg_check_events (239 samples, 0.09%)</title><rect x="70.4864%" y="309" width="0.0945%" height="15" fill="rgb(214,194,35)" fg:x="178251" fg:w="239"/><text x="70.7364%" y="319.50"></text></g><g><title>rcu_read_unlock_strict (52 samples, 0.02%)</title><rect x="70.5809%" y="309" width="0.0206%" height="15" fill="rgb(249,28,3)" fg:x="178490" fg:w="52"/><text x="70.8309%" y="319.50"></text></g><g><title>mem_cgroup_charge (2,435 samples, 0.96%)</title><rect x="69.6457%" y="325" width="0.9629%" height="15" fill="rgb(222,56,52)" fg:x="176125" fg:w="2435"/><text x="69.8957%" y="335.50"></text></g><g><title>__mod_memcg_lruvec_state (166 samples, 0.07%)</title><rect x="70.6845%" y="277" width="0.0656%" height="15" fill="rgb(245,217,50)" fg:x="178752" fg:w="166"/><text x="70.9345%" y="287.50"></text></g><g><title>__mod_memcg_state.part.0 (34 samples, 0.01%)</title><rect x="70.7502%" y="277" width="0.0134%" height="15" fill="rgb(213,201,24)" fg:x="178918" fg:w="34"/><text x="71.0002%" y="287.50"></text></g><g><title>__mod_node_page_state (129 samples, 0.05%)</title><rect x="70.7636%" y="277" width="0.0510%" height="15" fill="rgb(248,116,28)" fg:x="178952" fg:w="129"/><text x="71.0136%" y="287.50"></text></g><g><title>__mod_lruvec_state (368 samples, 0.15%)</title><rect x="70.6699%" y="293" width="0.1455%" height="15" fill="rgb(219,72,43)" fg:x="178715" fg:w="368"/><text x="70.9199%" y="303.50"></text></g><g><title>__mod_node_page_state (55 samples, 0.02%)</title><rect x="70.8190%" y="293" width="0.0217%" height="15" fill="rgb(209,138,14)" fg:x="179092" fg:w="55"/><text x="71.0690%" y="303.50"></text></g><g><title>__mod_lruvec_page_state (543 samples, 0.21%)</title><rect x="70.6292%" y="309" width="0.2147%" height="15" fill="rgb(222,18,33)" fg:x="178612" fg:w="543"/><text x="70.8792%" y="319.50"></text></g><g><title>__page_set_anon_rmap (31 samples, 0.01%)</title><rect x="70.8478%" y="309" width="0.0123%" height="15" fill="rgb(213,199,7)" fg:x="179165" fg:w="31"/><text x="71.0978%" y="319.50"></text></g><g><title>page_add_new_anon_rmap (634 samples, 0.25%)</title><rect x="70.6130%" y="325" width="0.2507%" height="15" fill="rgb(250,110,10)" fg:x="178571" fg:w="634"/><text x="70.8630%" y="335.50"></text></g><g><title>pmd_pfn (33 samples, 0.01%)</title><rect x="70.8787%" y="325" width="0.0130%" height="15" fill="rgb(248,123,6)" fg:x="179243" fg:w="33"/><text x="71.1287%" y="335.50"></text></g><g><title>pmd_val (30 samples, 0.01%)</title><rect x="70.8917%" y="325" width="0.0119%" height="15" fill="rgb(206,91,31)" fg:x="179276" fg:w="30"/><text x="71.1417%" y="335.50"></text></g><g><title>do_anonymous_page (11,824 samples, 4.68%)</title><rect x="66.2577%" y="341" width="4.6756%" height="15" fill="rgb(211,154,13)" fg:x="167557" fg:w="11824"/><text x="66.5077%" y="351.50">do_an..</text></g><g><title>pmd_page_vaddr (51 samples, 0.02%)</title><rect x="70.9503%" y="341" width="0.0202%" height="15" fill="rgb(225,148,7)" fg:x="179424" fg:w="51"/><text x="71.2003%" y="351.50"></text></g><g><title>pmd_val (40 samples, 0.02%)</title><rect x="70.9736%" y="341" width="0.0158%" height="15" fill="rgb(220,160,43)" fg:x="179483" fg:w="40"/><text x="71.2236%" y="351.50"></text></g><g><title>handle_pte_fault (12,294 samples, 4.86%)</title><rect x="66.1315%" y="357" width="4.8615%" height="15" fill="rgb(213,52,39)" fg:x="167238" fg:w="12294"/><text x="66.3815%" y="367.50">handle..</text></g><g><title>pmd_val (40 samples, 0.02%)</title><rect x="70.9946%" y="357" width="0.0158%" height="15" fill="rgb(243,137,7)" fg:x="179536" fg:w="40"/><text x="71.2446%" y="367.50"></text></g><g><title>__handle_mm_fault (12,994 samples, 5.14%)</title><rect x="65.8848%" y="373" width="5.1383%" height="15" fill="rgb(230,79,13)" fg:x="166614" fg:w="12994"/><text x="66.1348%" y="383.50">__hand..</text></g><g><title>pud_val (32 samples, 0.01%)</title><rect x="71.0104%" y="357" width="0.0127%" height="15" fill="rgb(247,105,23)" fg:x="179576" fg:w="32"/><text x="71.2604%" y="367.50"></text></g><g><title>pud_val (32 samples, 0.01%)</title><rect x="71.0499%" y="373" width="0.0127%" height="15" fill="rgb(223,179,41)" fg:x="179676" fg:w="32"/><text x="71.2999%" y="383.50"></text></g><g><title>handle_mm_fault (13,406 samples, 5.30%)</title><rect x="65.7693%" y="389" width="5.3012%" height="15" fill="rgb(218,9,34)" fg:x="166322" fg:w="13406"/><text x="66.0193%" y="399.50">handle..</text></g><g><title>up_read (212 samples, 0.08%)</title><rect x="71.0879%" y="389" width="0.0838%" height="15" fill="rgb(222,106,8)" fg:x="179772" fg:w="212"/><text x="71.3379%" y="399.50"></text></g><g><title>do_user_addr_fault (14,338 samples, 5.67%)</title><rect x="65.5048%" y="405" width="5.6697%" height="15" fill="rgb(211,220,0)" fg:x="165653" fg:w="14338"/><text x="65.7548%" y="415.50">do_user..</text></g><g><title>exc_page_fault (14,561 samples, 5.76%)</title><rect x="65.4494%" y="421" width="5.7579%" height="15" fill="rgb(229,52,16)" fg:x="165513" fg:w="14561"/><text x="65.6994%" y="431.50">exc_pag..</text></g><g><title>asm_exc_page_fault (14,587 samples, 5.77%)</title><rect x="65.4458%" y="437" width="5.7682%" height="15" fill="rgb(212,155,18)" fg:x="165504" fg:w="14587"/><text x="65.6958%" y="447.50">asm_exc..</text></g><g><title>copy_user_enhanced_fast_string (23,810 samples, 9.42%)</title><rect x="61.8063%" y="453" width="9.4153%" height="15" fill="rgb(242,21,14)" fg:x="156300" fg:w="23810"/><text x="62.0563%" y="463.50">copy_user_enh..</text></g><g><title>error_entry (194 samples, 0.08%)</title><rect x="71.2219%" y="453" width="0.0767%" height="15" fill="rgb(222,19,48)" fg:x="180111" fg:w="194"/><text x="71.4719%" y="463.50"></text></g><g><title>__xas_next (27 samples, 0.01%)</title><rect x="71.3141%" y="437" width="0.0107%" height="15" fill="rgb(232,45,27)" fg:x="180344" fg:w="27"/><text x="71.5641%" y="447.50"></text></g><g><title>xas_load (58 samples, 0.02%)</title><rect x="71.7154%" y="421" width="0.0229%" height="15" fill="rgb(249,103,42)" fg:x="181359" fg:w="58"/><text x="71.9654%" y="431.50"></text></g><g><title>filemap_get_read_batch (1,052 samples, 0.42%)</title><rect x="71.3255%" y="437" width="0.4160%" height="15" fill="rgb(246,81,33)" fg:x="180373" fg:w="1052"/><text x="71.5755%" y="447.50"></text></g><g><title>clear_page_erms (58 samples, 0.02%)</title><rect x="72.0017%" y="309" width="0.0229%" height="15" fill="rgb(252,33,42)" fg:x="182083" fg:w="58"/><text x="72.2517%" y="319.50"></text></g><g><title>get_page_from_freelist (73 samples, 0.03%)</title><rect x="72.0005%" y="325" width="0.0289%" height="15" fill="rgb(209,212,41)" fg:x="182080" fg:w="73"/><text x="72.2505%" y="335.50"></text></g><g><title>__alloc_pages_slowpath.constprop.0 (84 samples, 0.03%)</title><rect x="71.9994%" y="341" width="0.0332%" height="15" fill="rgb(207,154,6)" fg:x="182077" fg:w="84"/><text x="72.2494%" y="351.50"></text></g><g><title>__next_zones_zonelist (95 samples, 0.04%)</title><rect x="72.0365%" y="341" width="0.0376%" height="15" fill="rgb(223,64,47)" fg:x="182171" fg:w="95"/><text x="72.2865%" y="351.50"></text></g><g><title>__inc_numa_state (45 samples, 0.02%)</title><rect x="72.1793%" y="325" width="0.0178%" height="15" fill="rgb(211,161,38)" fg:x="182532" fg:w="45"/><text x="72.4293%" y="335.50"></text></g><g><title>clear_page_erms (3,150 samples, 1.25%)</title><rect x="72.2050%" y="325" width="1.2456%" height="15" fill="rgb(219,138,40)" fg:x="182597" fg:w="3150"/><text x="72.4550%" y="335.50"></text></g><g><title>kernel_init_free_pages (41 samples, 0.02%)</title><rect x="73.4510%" y="325" width="0.0162%" height="15" fill="rgb(241,228,46)" fg:x="185748" fg:w="41"/><text x="73.7010%" y="335.50"></text></g><g><title>rmqueue (1,408 samples, 0.56%)</title><rect x="73.4672%" y="325" width="0.5568%" height="15" fill="rgb(223,209,38)" fg:x="185789" fg:w="1408"/><text x="73.7172%" y="335.50"></text></g><g><title>rmqueue_bulk.constprop.0 (1,079 samples, 0.43%)</title><rect x="73.5973%" y="309" width="0.4267%" height="15" fill="rgb(236,164,45)" fg:x="186118" fg:w="1079"/><text x="73.8473%" y="319.50"></text></g><g><title>get_page_from_freelist (4,923 samples, 1.95%)</title><rect x="72.0780%" y="341" width="1.9467%" height="15" fill="rgb(231,15,5)" fg:x="182276" fg:w="4923"/><text x="72.3280%" y="351.50">g..</text></g><g><title>__alloc_pages (5,419 samples, 2.14%)</title><rect x="71.9001%" y="357" width="2.1429%" height="15" fill="rgb(252,35,15)" fg:x="181826" fg:w="5419"/><text x="72.1501%" y="367.50">_..</text></g><g><title>policy_nodemask (28 samples, 0.01%)</title><rect x="74.0604%" y="357" width="0.0111%" height="15" fill="rgb(248,181,18)" fg:x="187289" fg:w="28"/><text x="74.3104%" y="367.50"></text></g><g><title>alloc_pages (5,572 samples, 2.20%)</title><rect x="71.8720%" y="373" width="2.2034%" height="15" fill="rgb(233,39,42)" fg:x="181755" fg:w="5572"/><text x="72.1220%" y="383.50">a..</text></g><g><title>__page_cache_alloc (5,655 samples, 2.24%)</title><rect x="71.8507%" y="389" width="2.2362%" height="15" fill="rgb(238,110,33)" fg:x="181701" fg:w="5655"/><text x="72.1007%" y="399.50">_..</text></g><g><title>PageHuge (40 samples, 0.02%)</title><rect x="74.1379%" y="373" width="0.0158%" height="15" fill="rgb(233,195,10)" fg:x="187485" fg:w="40"/><text x="74.3879%" y="383.50"></text></g><g><title>__mod_memcg_state.part.0 (27 samples, 0.01%)</title><rect x="75.1047%" y="309" width="0.0107%" height="15" fill="rgb(254,105,3)" fg:x="189930" fg:w="27"/><text x="75.3547%" y="319.50"></text></g><g><title>__mod_memcg_lruvec_state (149 samples, 0.06%)</title><rect x="75.0592%" y="325" width="0.0589%" height="15" fill="rgb(221,225,9)" fg:x="189815" fg:w="149"/><text x="75.3092%" y="335.50"></text></g><g><title>__mod_lruvec_state (300 samples, 0.12%)</title><rect x="75.0442%" y="341" width="0.1186%" height="15" fill="rgb(224,227,45)" fg:x="189777" fg:w="300"/><text x="75.2942%" y="351.50"></text></g><g><title>__mod_node_page_state (90 samples, 0.04%)</title><rect x="75.1272%" y="325" width="0.0356%" height="15" fill="rgb(229,198,43)" fg:x="189987" fg:w="90"/><text x="75.3772%" y="335.50"></text></g><g><title>__mod_lruvec_page_state (417 samples, 0.16%)</title><rect x="75.0133%" y="357" width="0.1649%" height="15" fill="rgb(206,209,35)" fg:x="189699" fg:w="417"/><text x="75.2633%" y="367.50"></text></g><g><title>_raw_spin_lock_irq (340 samples, 0.13%)</title><rect x="75.1826%" y="357" width="0.1344%" height="15" fill="rgb(245,195,53)" fg:x="190127" fg:w="340"/><text x="75.4326%" y="367.50"></text></g><g><title>native_queued_spin_lock_slowpath (156 samples, 0.06%)</title><rect x="75.2554%" y="341" width="0.0617%" height="15" fill="rgb(240,92,26)" fg:x="190311" fg:w="156"/><text x="75.5054%" y="351.50"></text></g><g><title>native_queued_spin_lock_slowpath.part.0 (156 samples, 0.06%)</title><rect x="75.2554%" y="325" width="0.0617%" height="15" fill="rgb(207,40,23)" fg:x="190311" fg:w="156"/><text x="75.5054%" y="335.50"></text></g><g><title>mem_cgroup_charge_statistics.constprop.0 (78 samples, 0.03%)</title><rect x="75.3914%" y="325" width="0.0308%" height="15" fill="rgb(223,111,35)" fg:x="190655" fg:w="78"/><text x="75.6414%" y="335.50"></text></g><g><title>cgroup_rstat_updated (29 samples, 0.01%)</title><rect x="75.4108%" y="309" width="0.0115%" height="15" fill="rgb(229,147,28)" fg:x="190704" fg:w="29"/><text x="75.6608%" y="319.50"></text></g><g><title>page_counter_try_charge (37 samples, 0.01%)</title><rect x="75.4985%" y="309" width="0.0146%" height="15" fill="rgb(211,29,28)" fg:x="190926" fg:w="37"/><text x="75.7485%" y="319.50"></text></g><g><title>__mem_cgroup_charge (404 samples, 0.16%)</title><rect x="75.3554%" y="341" width="0.1598%" height="15" fill="rgb(228,72,33)" fg:x="190564" fg:w="404"/><text x="75.6054%" y="351.50"></text></g><g><title>try_charge (223 samples, 0.09%)</title><rect x="75.4270%" y="325" width="0.0882%" height="15" fill="rgb(205,214,31)" fg:x="190745" fg:w="223"/><text x="75.6770%" y="335.50"></text></g><g><title>get_mem_cgroup_from_mm (58 samples, 0.02%)</title><rect x="75.5152%" y="341" width="0.0229%" height="15" fill="rgb(224,111,15)" fg:x="190968" fg:w="58"/><text x="75.7652%" y="351.50"></text></g><g><title>rcu_read_unlock_strict (37 samples, 0.01%)</title><rect x="75.5412%" y="341" width="0.0146%" height="15" fill="rgb(253,21,26)" fg:x="191034" fg:w="37"/><text x="75.7912%" y="351.50"></text></g><g><title>mem_cgroup_charge (577 samples, 0.23%)</title><rect x="75.3309%" y="357" width="0.2282%" height="15" fill="rgb(245,139,43)" fg:x="190502" fg:w="577"/><text x="75.5809%" y="367.50"></text></g><g><title>xas_load (804 samples, 0.32%)</title><rect x="75.6389%" y="341" width="0.3179%" height="15" fill="rgb(252,170,7)" fg:x="191281" fg:w="804"/><text x="75.8889%" y="351.50"></text></g><g><title>xa_get_order (1,092 samples, 0.43%)</title><rect x="75.5737%" y="357" width="0.4318%" height="15" fill="rgb(231,118,14)" fg:x="191116" fg:w="1092"/><text x="75.8237%" y="367.50"></text></g><g><title>xas_start (123 samples, 0.05%)</title><rect x="75.9569%" y="341" width="0.0486%" height="15" fill="rgb(238,83,0)" fg:x="192085" fg:w="123"/><text x="76.2069%" y="351.50"></text></g><g><title>xas_find_conflict (288 samples, 0.11%)</title><rect x="76.0059%" y="357" width="0.1139%" height="15" fill="rgb(221,39,39)" fg:x="192209" fg:w="288"/><text x="76.2559%" y="367.50"></text></g><g><title>xas_load (26 samples, 0.01%)</title><rect x="76.1198%" y="357" width="0.0103%" height="15" fill="rgb(222,119,46)" fg:x="192497" fg:w="26"/><text x="76.3698%" y="367.50"></text></g><g><title>xas_start (50 samples, 0.02%)</title><rect x="76.1384%" y="357" width="0.0198%" height="15" fill="rgb(222,165,49)" fg:x="192544" fg:w="50"/><text x="76.3884%" y="367.50"></text></g><g><title>list_lru_del (54 samples, 0.02%)</title><rect x="76.2416%" y="325" width="0.0214%" height="15" fill="rgb(219,113,52)" fg:x="192805" fg:w="54"/><text x="76.4916%" y="335.50"></text></g><g><title>workingset_update_node (83 samples, 0.03%)</title><rect x="76.2305%" y="341" width="0.0328%" height="15" fill="rgb(214,7,15)" fg:x="192777" fg:w="83"/><text x="76.4805%" y="351.50"></text></g><g><title>__add_to_page_cache_locked (5,402 samples, 2.14%)</title><rect x="74.1537%" y="373" width="2.1361%" height="15" fill="rgb(235,32,4)" fg:x="187525" fg:w="5402"/><text x="74.4037%" y="383.50">_..</text></g><g><title>xas_store (333 samples, 0.13%)</title><rect x="76.1581%" y="357" width="0.1317%" height="15" fill="rgb(238,90,54)" fg:x="192594" fg:w="333"/><text x="76.4081%" y="367.50"></text></g><g><title>xas_create (67 samples, 0.03%)</title><rect x="76.2633%" y="341" width="0.0265%" height="15" fill="rgb(213,208,19)" fg:x="192860" fg:w="67"/><text x="76.5133%" y="351.50"></text></g><g><title>__mod_zone_page_state (28 samples, 0.01%)</title><rect x="76.4246%" y="341" width="0.0111%" height="15" fill="rgb(233,156,4)" fg:x="193268" fg:w="28"/><text x="76.6746%" y="351.50"></text></g><g><title>__mod_memcg_state.part.0 (26 samples, 0.01%)</title><rect x="76.6928%" y="293" width="0.0103%" height="15" fill="rgb(207,194,5)" fg:x="193946" fg:w="26"/><text x="76.9428%" y="303.50"></text></g><g><title>__mod_memcg_lruvec_state (124 samples, 0.05%)</title><rect x="76.6595%" y="309" width="0.0490%" height="15" fill="rgb(206,111,30)" fg:x="193862" fg:w="124"/><text x="76.9095%" y="319.50"></text></g><g><title>__mod_lruvec_state (212 samples, 0.08%)</title><rect x="76.6481%" y="325" width="0.0838%" height="15" fill="rgb(243,70,54)" fg:x="193833" fg:w="212"/><text x="76.8981%" y="335.50"></text></g><g><title>__mod_node_page_state (40 samples, 0.02%)</title><rect x="76.7161%" y="309" width="0.0158%" height="15" fill="rgb(242,28,8)" fg:x="194005" fg:w="40"/><text x="76.9661%" y="319.50"></text></g><g><title>__mod_zone_page_state (28 samples, 0.01%)</title><rect x="76.7438%" y="325" width="0.0111%" height="15" fill="rgb(219,106,18)" fg:x="194075" fg:w="28"/><text x="76.9938%" y="335.50"></text></g><g><title>mem_cgroup_update_lru_size (34 samples, 0.01%)</title><rect x="76.7548%" y="325" width="0.0134%" height="15" fill="rgb(244,222,10)" fg:x="194103" fg:w="34"/><text x="77.0048%" y="335.50"></text></g><g><title>page_mapping (128 samples, 0.05%)</title><rect x="76.7683%" y="325" width="0.0506%" height="15" fill="rgb(236,179,52)" fg:x="194137" fg:w="128"/><text x="77.0183%" y="335.50"></text></g><g><title>__pagevec_lru_add_fn (973 samples, 0.38%)</title><rect x="76.4357%" y="341" width="0.3848%" height="15" fill="rgb(213,23,39)" fg:x="193296" fg:w="973"/><text x="76.6857%" y="351.50"></text></g><g><title>lock_page_lruvec_irqsave (100 samples, 0.04%)</title><rect x="76.8213%" y="341" width="0.0395%" height="15" fill="rgb(238,48,10)" fg:x="194271" fg:w="100"/><text x="77.0713%" y="351.50"></text></g><g><title>_raw_spin_lock_irqsave (81 samples, 0.03%)</title><rect x="76.8288%" y="325" width="0.0320%" height="15" fill="rgb(251,196,23)" fg:x="194290" fg:w="81"/><text x="77.0788%" y="335.50"></text></g><g><title>native_queued_spin_lock_slowpath (57 samples, 0.02%)</title><rect x="76.8383%" y="309" width="0.0225%" height="15" fill="rgb(250,152,24)" fg:x="194314" fg:w="57"/><text x="77.0883%" y="319.50"></text></g><g><title>native_queued_spin_lock_slowpath.part.0 (57 samples, 0.02%)</title><rect x="76.8383%" y="293" width="0.0225%" height="15" fill="rgb(209,150,17)" fg:x="194314" fg:w="57"/><text x="77.0883%" y="303.50"></text></g><g><title>__pagevec_lru_add (1,388 samples, 0.55%)</title><rect x="76.3831%" y="357" width="0.5489%" height="15" fill="rgb(234,202,34)" fg:x="193163" fg:w="1388"/><text x="76.6331%" y="367.50"></text></g><g><title>release_pages (155 samples, 0.06%)</title><rect x="76.8707%" y="341" width="0.0613%" height="15" fill="rgb(253,148,53)" fg:x="194396" fg:w="155"/><text x="77.1207%" y="351.50"></text></g><g><title>lru_cache_add (1,601 samples, 0.63%)</title><rect x="76.3036%" y="373" width="0.6331%" height="15" fill="rgb(218,129,16)" fg:x="192962" fg:w="1601"/><text x="76.5536%" y="383.50"></text></g><g><title>idr_find (240 samples, 0.09%)</title><rect x="77.0759%" y="341" width="0.0949%" height="15" fill="rgb(216,85,19)" fg:x="194915" fg:w="240"/><text x="77.3259%" y="351.50"></text></g><g><title>radix_tree_lookup (219 samples, 0.09%)</title><rect x="77.0842%" y="325" width="0.0866%" height="15" fill="rgb(235,228,7)" fg:x="194936" fg:w="219"/><text x="77.3342%" y="335.50"></text></g><g><title>__radix_tree_lookup (217 samples, 0.09%)</title><rect x="77.0850%" y="309" width="0.0858%" height="15" fill="rgb(245,175,0)" fg:x="194938" fg:w="217"/><text x="77.3350%" y="319.50"></text></g><g><title>mem_cgroup_from_id (264 samples, 0.10%)</title><rect x="77.0716%" y="357" width="0.1044%" height="15" fill="rgb(208,168,36)" fg:x="194904" fg:w="264"/><text x="77.3216%" y="367.50"></text></g><g><title>mem_cgroup_get_nr_swap_pages (64 samples, 0.03%)</title><rect x="77.1760%" y="357" width="0.0253%" height="15" fill="rgb(246,171,24)" fg:x="195168" fg:w="64"/><text x="77.4260%" y="367.50"></text></g><g><title>__mod_memcg_state.part.0 (38 samples, 0.02%)</title><rect x="77.2871%" y="309" width="0.0150%" height="15" fill="rgb(215,142,24)" fg:x="195449" fg:w="38"/><text x="77.5371%" y="319.50"></text></g><g><title>cgroup_rstat_updated (29 samples, 0.01%)</title><rect x="77.2906%" y="293" width="0.0115%" height="15" fill="rgb(250,187,7)" fg:x="195458" fg:w="29"/><text x="77.5406%" y="303.50"></text></g><g><title>__mod_memcg_lruvec_state (154 samples, 0.06%)</title><rect x="77.2499%" y="325" width="0.0609%" height="15" fill="rgb(228,66,33)" fg:x="195355" fg:w="154"/><text x="77.4999%" y="335.50"></text></g><g><title>__mod_lruvec_state (249 samples, 0.10%)</title><rect x="77.2357%" y="341" width="0.0985%" height="15" fill="rgb(234,215,21)" fg:x="195319" fg:w="249"/><text x="77.4857%" y="351.50"></text></g><g><title>__mod_node_page_state (37 samples, 0.01%)</title><rect x="77.3195%" y="325" width="0.0146%" height="15" fill="rgb(222,191,20)" fg:x="195531" fg:w="37"/><text x="77.5695%" y="335.50"></text></g><g><title>__mod_node_page_state (27 samples, 0.01%)</title><rect x="77.3357%" y="341" width="0.0107%" height="15" fill="rgb(245,79,54)" fg:x="195572" fg:w="27"/><text x="77.5857%" y="351.50"></text></g><g><title>mod_lruvec_state.constprop.0 (373 samples, 0.15%)</title><rect x="77.2013%" y="357" width="0.1475%" height="15" fill="rgb(240,10,37)" fg:x="195232" fg:w="373"/><text x="77.4513%" y="367.50"></text></g><g><title>workingset_refault (1,007 samples, 0.40%)</title><rect x="76.9537%" y="373" width="0.3982%" height="15" fill="rgb(214,192,32)" fg:x="194606" fg:w="1007"/><text x="77.2037%" y="383.50"></text></g><g><title>xas_find_conflict (54 samples, 0.02%)</title><rect x="77.3610%" y="373" width="0.0214%" height="15" fill="rgb(209,36,54)" fg:x="195636" fg:w="54"/><text x="77.6110%" y="383.50"></text></g><g><title>add_to_page_cache_lru (8,350 samples, 3.30%)</title><rect x="74.0868%" y="389" width="3.3019%" height="15" fill="rgb(220,10,11)" fg:x="187356" fg:w="8350"/><text x="74.3368%" y="399.50">add..</text></g><g><title>__blk_bios_map_sg (32 samples, 0.01%)</title><rect x="77.4140%" y="229" width="0.0127%" height="15" fill="rgb(221,106,17)" fg:x="195770" fg:w="32"/><text x="77.6640%" y="239.50"></text></g><g><title>__blk_rq_map_sg (37 samples, 0.01%)</title><rect x="77.4136%" y="245" width="0.0146%" height="15" fill="rgb(251,142,44)" fg:x="195769" fg:w="37"/><text x="77.6636%" y="255.50"></text></g><g><title>nvme_pci_setup_prps (27 samples, 0.01%)</title><rect x="77.4401%" y="245" width="0.0107%" height="15" fill="rgb(238,13,15)" fg:x="195836" fg:w="27"/><text x="77.6901%" y="255.50"></text></g><g><title>nvme_map_data (97 samples, 0.04%)</title><rect x="77.4136%" y="261" width="0.0384%" height="15" fill="rgb(208,107,27)" fg:x="195769" fg:w="97"/><text x="77.6636%" y="271.50"></text></g><g><title>blk_finish_plug (122 samples, 0.05%)</title><rect x="77.4069%" y="373" width="0.0482%" height="15" fill="rgb(205,136,37)" fg:x="195752" fg:w="122"/><text x="77.6569%" y="383.50"></text></g><g><title>blk_flush_plug_list (122 samples, 0.05%)</title><rect x="77.4069%" y="357" width="0.0482%" height="15" fill="rgb(250,205,27)" fg:x="195752" fg:w="122"/><text x="77.6569%" y="367.50"></text></g><g><title>blk_mq_flush_plug_list (121 samples, 0.05%)</title><rect x="77.4073%" y="341" width="0.0478%" height="15" fill="rgb(210,80,43)" fg:x="195753" fg:w="121"/><text x="77.6573%" y="351.50"></text></g><g><title>blk_mq_sched_insert_requests (121 samples, 0.05%)</title><rect x="77.4073%" y="325" width="0.0478%" height="15" fill="rgb(247,160,36)" fg:x="195753" fg:w="121"/><text x="77.6573%" y="335.50"></text></g><g><title>blk_mq_try_issue_list_directly (121 samples, 0.05%)</title><rect x="77.4073%" y="309" width="0.0478%" height="15" fill="rgb(234,13,49)" fg:x="195753" fg:w="121"/><text x="77.6573%" y="319.50"></text></g><g><title>__blk_mq_try_issue_directly (120 samples, 0.05%)</title><rect x="77.4077%" y="293" width="0.0475%" height="15" fill="rgb(234,122,0)" fg:x="195754" fg:w="120"/><text x="77.6577%" y="303.50"></text></g><g><title>nvme_queue_rq (115 samples, 0.05%)</title><rect x="77.4097%" y="277" width="0.0455%" height="15" fill="rgb(207,146,38)" fg:x="195759" fg:w="115"/><text x="77.6597%" y="287.50"></text></g><g><title>__bio_add_page (29 samples, 0.01%)</title><rect x="77.8170%" y="325" width="0.0115%" height="15" fill="rgb(207,177,25)" fg:x="196789" fg:w="29"/><text x="78.0670%" y="335.50"></text></g><g><title>bio_add_page (179 samples, 0.07%)</title><rect x="77.7960%" y="341" width="0.0708%" height="15" fill="rgb(211,178,42)" fg:x="196736" fg:w="179"/><text x="78.0460%" y="351.50"></text></g><g><title>__bio_try_merge_page (97 samples, 0.04%)</title><rect x="77.8284%" y="325" width="0.0384%" height="15" fill="rgb(230,69,54)" fg:x="196818" fg:w="97"/><text x="78.0784%" y="335.50"></text></g><g><title>bvec_alloc (26 samples, 0.01%)</title><rect x="77.8688%" y="325" width="0.0103%" height="15" fill="rgb(214,135,41)" fg:x="196920" fg:w="26"/><text x="78.1188%" y="335.50"></text></g><g><title>bio_alloc_bioset (41 samples, 0.02%)</title><rect x="77.8668%" y="341" width="0.0162%" height="15" fill="rgb(237,67,25)" fg:x="196915" fg:w="41"/><text x="78.1168%" y="351.50"></text></g><g><title>ext4_map_blocks (55 samples, 0.02%)</title><rect x="77.8893%" y="341" width="0.0217%" height="15" fill="rgb(222,189,50)" fg:x="196972" fg:w="55"/><text x="78.1393%" y="351.50"></text></g><g><title>ext4_es_lookup_extent (26 samples, 0.01%)</title><rect x="77.9008%" y="325" width="0.0103%" height="15" fill="rgb(245,148,34)" fg:x="197001" fg:w="26"/><text x="78.1508%" y="335.50"></text></g><g><title>fscrypt_mergeable_bio (46 samples, 0.02%)</title><rect x="77.9111%" y="341" width="0.0182%" height="15" fill="rgb(222,29,6)" fg:x="197027" fg:w="46"/><text x="78.1611%" y="351.50"></text></g><g><title>bio_split (32 samples, 0.01%)</title><rect x="77.9945%" y="261" width="0.0127%" height="15" fill="rgb(221,189,43)" fg:x="197238" fg:w="32"/><text x="78.2445%" y="271.50"></text></g><g><title>blk_bio_segment_split (142 samples, 0.06%)</title><rect x="77.9589%" y="277" width="0.0562%" height="15" fill="rgb(207,36,27)" fg:x="197148" fg:w="142"/><text x="78.2089%" y="287.50"></text></g><g><title>__blk_queue_split (153 samples, 0.06%)</title><rect x="77.9581%" y="293" width="0.0605%" height="15" fill="rgb(217,90,24)" fg:x="197146" fg:w="153"/><text x="78.2081%" y="303.50"></text></g><g><title>__blk_bios_map_sg (99 samples, 0.04%)</title><rect x="78.0388%" y="165" width="0.0391%" height="15" fill="rgb(224,66,35)" fg:x="197350" fg:w="99"/><text x="78.2888%" y="175.50"></text></g><g><title>__blk_rq_map_sg (107 samples, 0.04%)</title><rect x="78.0388%" y="181" width="0.0423%" height="15" fill="rgb(221,13,50)" fg:x="197350" fg:w="107"/><text x="78.2888%" y="191.50"></text></g><g><title>dma_map_sg_attrs (31 samples, 0.01%)</title><rect x="78.0811%" y="181" width="0.0123%" height="15" fill="rgb(236,68,49)" fg:x="197457" fg:w="31"/><text x="78.3311%" y="191.50"></text></g><g><title>nvme_pci_setup_prps (41 samples, 0.02%)</title><rect x="78.1001%" y="181" width="0.0162%" height="15" fill="rgb(229,146,28)" fg:x="197505" fg:w="41"/><text x="78.3501%" y="191.50"></text></g><g><title>nvme_map_data (204 samples, 0.08%)</title><rect x="78.0380%" y="197" width="0.0807%" height="15" fill="rgb(225,31,38)" fg:x="197348" fg:w="204"/><text x="78.2880%" y="207.50"></text></g><g><title>nvme_queue_rq (228 samples, 0.09%)</title><rect x="78.0325%" y="213" width="0.0902%" height="15" fill="rgb(250,208,3)" fg:x="197334" fg:w="228"/><text x="78.2825%" y="223.50"></text></g><g><title>__blk_mq_try_issue_directly (230 samples, 0.09%)</title><rect x="78.0325%" y="229" width="0.0909%" height="15" fill="rgb(246,54,23)" fg:x="197334" fg:w="230"/><text x="78.2825%" y="239.50"></text></g><g><title>blk_flush_plug_list (237 samples, 0.09%)</title><rect x="78.0301%" y="293" width="0.0937%" height="15" fill="rgb(243,76,11)" fg:x="197328" fg:w="237"/><text x="78.2801%" y="303.50"></text></g><g><title>blk_mq_flush_plug_list (237 samples, 0.09%)</title><rect x="78.0301%" y="277" width="0.0937%" height="15" fill="rgb(245,21,50)" fg:x="197328" fg:w="237"/><text x="78.2801%" y="287.50"></text></g><g><title>blk_mq_sched_insert_requests (233 samples, 0.09%)</title><rect x="78.0317%" y="261" width="0.0921%" height="15" fill="rgb(228,9,43)" fg:x="197332" fg:w="233"/><text x="78.2817%" y="271.50"></text></g><g><title>blk_mq_try_issue_list_directly (232 samples, 0.09%)</title><rect x="78.0321%" y="245" width="0.0917%" height="15" fill="rgb(208,100,47)" fg:x="197333" fg:w="232"/><text x="78.2821%" y="255.50"></text></g><g><title>blk_mq_submit_bio (463 samples, 0.18%)</title><rect x="77.9415%" y="309" width="0.1831%" height="15" fill="rgb(232,26,8)" fg:x="197104" fg:w="463"/><text x="78.1915%" y="319.50"></text></g><g><title>submit_bio (510 samples, 0.20%)</title><rect x="77.9332%" y="341" width="0.2017%" height="15" fill="rgb(216,166,38)" fg:x="197083" fg:w="510"/><text x="78.1832%" y="351.50"></text></g><g><title>submit_bio_noacct (506 samples, 0.20%)</title><rect x="77.9348%" y="325" width="0.2001%" height="15" fill="rgb(251,202,51)" fg:x="197087" fg:w="506"/><text x="78.1848%" y="335.50"></text></g><g><title>submit_bio_checks (26 samples, 0.01%)</title><rect x="78.1246%" y="309" width="0.0103%" height="15" fill="rgb(254,216,34)" fg:x="197567" fg:w="26"/><text x="78.3746%" y="319.50"></text></g><g><title>xas_load (258 samples, 0.10%)</title><rect x="78.1543%" y="325" width="0.1020%" height="15" fill="rgb(251,32,27)" fg:x="197642" fg:w="258"/><text x="78.4043%" y="335.50"></text></g><g><title>xa_load (347 samples, 0.14%)</title><rect x="78.1349%" y="341" width="0.1372%" height="15" fill="rgb(208,127,28)" fg:x="197593" fg:w="347"/><text x="78.3849%" y="351.50"></text></g><g><title>xas_start (40 samples, 0.02%)</title><rect x="78.2563%" y="325" width="0.0158%" height="15" fill="rgb(224,137,22)" fg:x="197900" fg:w="40"/><text x="78.5063%" y="335.50"></text></g><g><title>ext4_mpage_readpages (2,070 samples, 0.82%)</title><rect x="77.4579%" y="357" width="0.8185%" height="15" fill="rgb(254,70,32)" fg:x="195881" fg:w="2070"/><text x="77.7079%" y="367.50"></text></g><g><title>read_pages (2,226 samples, 0.88%)</title><rect x="77.4065%" y="389" width="0.8802%" height="15" fill="rgb(229,75,37)" fg:x="195751" fg:w="2226"/><text x="77.6565%" y="399.50"></text></g><g><title>ext4_readahead (2,103 samples, 0.83%)</title><rect x="77.4551%" y="373" width="0.8316%" height="15" fill="rgb(252,64,23)" fg:x="195874" fg:w="2103"/><text x="77.7051%" y="383.50"></text></g><g><title>xas_load (388 samples, 0.15%)</title><rect x="78.3097%" y="373" width="0.1534%" height="15" fill="rgb(232,162,48)" fg:x="198035" fg:w="388"/><text x="78.5597%" y="383.50"></text></g><g><title>xa_load (494 samples, 0.20%)</title><rect x="78.2891%" y="389" width="0.1953%" height="15" fill="rgb(246,160,12)" fg:x="197983" fg:w="494"/><text x="78.5391%" y="399.50"></text></g><g><title>xas_start (54 samples, 0.02%)</title><rect x="78.4631%" y="373" width="0.0214%" height="15" fill="rgb(247,166,0)" fg:x="198423" fg:w="54"/><text x="78.7131%" y="383.50"></text></g><g><title>page_cache_ra_unbounded (17,006 samples, 6.72%)</title><rect x="71.7645%" y="405" width="6.7247%" height="15" fill="rgb(249,219,21)" fg:x="181483" fg:w="17006"/><text x="72.0145%" y="415.50">page_cach..</text></g><g><title>page_cache_async_ra (17,050 samples, 6.74%)</title><rect x="71.7483%" y="437" width="6.7421%" height="15" fill="rgb(205,209,3)" fg:x="181442" fg:w="17050"/><text x="71.9983%" y="447.50">page_cach..</text></g><g><title>ondemand_readahead (17,040 samples, 6.74%)</title><rect x="71.7522%" y="421" width="6.7382%" height="15" fill="rgb(243,44,1)" fg:x="181452" fg:w="17040"/><text x="72.0022%" y="431.50">ondemand_..</text></g><g><title>page_cache_sync_ra (52 samples, 0.02%)</title><rect x="78.4904%" y="437" width="0.0206%" height="15" fill="rgb(206,159,16)" fg:x="198492" fg:w="52"/><text x="78.7404%" y="447.50"></text></g><g><title>ondemand_readahead (52 samples, 0.02%)</title><rect x="78.4904%" y="421" width="0.0206%" height="15" fill="rgb(244,77,30)" fg:x="198492" fg:w="52"/><text x="78.7404%" y="431.50"></text></g><g><title>page_cache_ra_unbounded (52 samples, 0.02%)</title><rect x="78.4904%" y="405" width="0.0206%" height="15" fill="rgb(218,69,12)" fg:x="198492" fg:w="52"/><text x="78.7404%" y="415.50"></text></g><g><title>filemap_get_pages (18,221 samples, 7.21%)</title><rect x="71.3066%" y="453" width="7.2052%" height="15" fill="rgb(212,87,7)" fg:x="180325" fg:w="18221"/><text x="71.5566%" y="463.50">filemap_ge..</text></g><g><title>mark_page_accessed (309 samples, 0.12%)</title><rect x="78.5125%" y="453" width="0.1222%" height="15" fill="rgb(245,114,25)" fg:x="198548" fg:w="309"/><text x="78.7625%" y="463.50"></text></g><g><title>filemap_read (51,244 samples, 20.26%)</title><rect x="58.3854%" y="469" width="20.2636%" height="15" fill="rgb(210,61,42)" fg:x="147649" fg:w="51244"/><text x="58.6354%" y="479.50">filemap_read</text></g><g><title>restore_regs_and_return_to_kernel (34 samples, 0.01%)</title><rect x="78.6355%" y="453" width="0.0134%" height="15" fill="rgb(211,52,33)" fg:x="198859" fg:w="34"/><text x="78.8855%" y="463.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (51,265 samples, 20.27%)</title><rect x="58.3786%" y="597" width="20.2719%" height="15" fill="rgb(234,58,33)" fg:x="147632" fg:w="51265"/><text x="58.6286%" y="607.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>do_syscall_64 (51,265 samples, 20.27%)</title><rect x="58.3786%" y="581" width="20.2719%" height="15" fill="rgb(220,115,36)" fg:x="147632" fg:w="51265"/><text x="58.6286%" y="591.50">do_syscall_64</text></g><g><title>__x64_sys_read (51,265 samples, 20.27%)</title><rect x="58.3786%" y="565" width="20.2719%" height="15" fill="rgb(243,153,54)" fg:x="147632" fg:w="51265"/><text x="58.6286%" y="575.50">__x64_sys_read</text></g><g><title>ksys_read (51,265 samples, 20.27%)</title><rect x="58.3786%" y="549" width="20.2719%" height="15" fill="rgb(251,47,18)" fg:x="147632" fg:w="51265"/><text x="58.6286%" y="559.50">ksys_read</text></g><g><title>vfs_read (51,264 samples, 20.27%)</title><rect x="58.3790%" y="533" width="20.2715%" height="15" fill="rgb(242,102,42)" fg:x="147633" fg:w="51264"/><text x="58.6290%" y="543.50">vfs_read</text></g><g><title>new_sync_read (51,264 samples, 20.27%)</title><rect x="58.3790%" y="517" width="20.2715%" height="15" fill="rgb(234,31,38)" fg:x="147633" fg:w="51264"/><text x="58.6290%" y="527.50">new_sync_read</text></g><g><title>ext4_file_read_iter (51,263 samples, 20.27%)</title><rect x="58.3794%" y="501" width="20.2711%" height="15" fill="rgb(221,117,51)" fg:x="147634" fg:w="51263"/><text x="58.6294%" y="511.50">ext4_file_read_iter</text></g><g><title>generic_file_read_iter (51,263 samples, 20.27%)</title><rect x="58.3794%" y="485" width="20.2711%" height="15" fill="rgb(212,20,18)" fg:x="147634" fg:w="51263"/><text x="58.6294%" y="495.50">generic_file_read_iter</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (51,279 samples, 20.28%)</title><rect x="58.3779%" y="677" width="20.2774%" height="15" fill="rgb(245,133,36)" fg:x="147630" fg:w="51279"/><text x="58.6279%" y="687.50">&lt;std::io::buffered::bufreader::B..</text></g><g><title>std::io::default_read_exact (51,279 samples, 20.28%)</title><rect x="58.3779%" y="661" width="20.2774%" height="15" fill="rgb(212,6,19)" fg:x="147630" fg:w="51279"/><text x="58.6279%" y="671.50">std::io::default_read_exact</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (51,279 samples, 20.28%)</title><rect x="58.3779%" y="645" width="20.2774%" height="15" fill="rgb(218,1,36)" fg:x="147630" fg:w="51279"/><text x="58.6279%" y="655.50">&lt;std::io::buffered::bufreader::B..</text></g><g><title>std::sys::unix::fd::FileDesc::read (51,278 samples, 20.28%)</title><rect x="58.3782%" y="629" width="20.2770%" height="15" fill="rgb(246,84,54)" fg:x="147631" fg:w="51278"/><text x="58.6282%" y="639.50">std::sys::unix::fd::FileDesc::re..</text></g><g><title>__libc_read (51,278 samples, 20.28%)</title><rect x="58.3782%" y="613" width="20.2770%" height="15" fill="rgb(242,110,6)" fg:x="147631" fg:w="51278"/><text x="58.6282%" y="623.50">__libc_read</text></g><g><title>alloc::vec::from_elem (27 samples, 0.01%)</title><rect x="78.6553%" y="677" width="0.0107%" height="15" fill="rgb(214,47,5)" fg:x="198909" fg:w="27"/><text x="78.9053%" y="687.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (27 samples, 0.01%)</title><rect x="78.6553%" y="661" width="0.0107%" height="15" fill="rgb(218,159,25)" fg:x="198909" fg:w="27"/><text x="78.9053%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (27 samples, 0.01%)</title><rect x="78.6553%" y="645" width="0.0107%" height="15" fill="rgb(215,211,28)" fg:x="198909" fg:w="27"/><text x="78.9053%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (27 samples, 0.01%)</title><rect x="78.6553%" y="629" width="0.0107%" height="15" fill="rgb(238,59,32)" fg:x="198909" fg:w="27"/><text x="78.9053%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (27 samples, 0.01%)</title><rect x="78.6553%" y="613" width="0.0107%" height="15" fill="rgb(226,82,3)" fg:x="198909" fg:w="27"/><text x="78.9053%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.01%)</title><rect x="78.6553%" y="597" width="0.0107%" height="15" fill="rgb(240,164,32)" fg:x="198909" fg:w="27"/><text x="78.9053%" y="607.50"></text></g><g><title>alloc::alloc::alloc_zeroed (27 samples, 0.01%)</title><rect x="78.6553%" y="581" width="0.0107%" height="15" fill="rgb(232,46,7)" fg:x="198909" fg:w="27"/><text x="78.9053%" y="591.50"></text></g><g><title>__calloc (27 samples, 0.01%)</title><rect x="78.6553%" y="565" width="0.0107%" height="15" fill="rgb(229,129,53)" fg:x="198909" fg:w="27"/><text x="78.9053%" y="575.50"></text></g><g><title>_int_malloc (27 samples, 0.01%)</title><rect x="78.6553%" y="549" width="0.0107%" height="15" fill="rgb(234,188,29)" fg:x="198909" fg:w="27"/><text x="78.9053%" y="559.50"></text></g><g><title>sysmalloc (27 samples, 0.01%)</title><rect x="78.6553%" y="533" width="0.0107%" height="15" fill="rgb(246,141,4)" fg:x="198909" fg:w="27"/><text x="78.9053%" y="543.50"></text></g><g><title>std::panic::catch_unwind (51,317 samples, 20.29%)</title><rect x="58.3779%" y="789" width="20.2925%" height="15" fill="rgb(229,23,39)" fg:x="147630" fg:w="51317"/><text x="58.6279%" y="799.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (51,317 samples, 20.29%)</title><rect x="58.3779%" y="773" width="20.2925%" height="15" fill="rgb(206,12,3)" fg:x="147630" fg:w="51317"/><text x="58.6279%" y="783.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (51,317 samples, 20.29%)</title><rect x="58.3779%" y="757" width="20.2925%" height="15" fill="rgb(252,226,20)" fg:x="147630" fg:w="51317"/><text x="58.6279%" y="767.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (51,317 samples, 20.29%)</title><rect x="58.3779%" y="741" width="20.2925%" height="15" fill="rgb(216,123,35)" fg:x="147630" fg:w="51317"/><text x="58.6279%" y="751.50">&lt;core::panic::unwind_safe::Asser..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (51,317 samples, 20.29%)</title><rect x="58.3779%" y="725" width="20.2925%" height="15" fill="rgb(212,68,40)" fg:x="147630" fg:w="51317"/><text x="58.6279%" y="735.50">std::thread::Builder::spawn_unch..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (51,317 samples, 20.29%)</title><rect x="58.3779%" y="709" width="20.2925%" height="15" fill="rgb(254,125,32)" fg:x="147630" fg:w="51317"/><text x="58.6279%" y="719.50">std::sys_common::backtrace::__ru..</text></g><g><title>hprof_slurp::prefetch_reader::PrefetchReader::start::{{closure}} (51,317 samples, 20.29%)</title><rect x="58.3779%" y="693" width="20.2925%" height="15" fill="rgb(253,97,22)" fg:x="147630" fg:w="51317"/><text x="58.6279%" y="703.50">hprof_slurp::prefetch_reader::Pr..</text></g><g><title>__GI___clone (51,318 samples, 20.29%)</title><rect x="58.3779%" y="901" width="20.2929%" height="15" fill="rgb(241,101,14)" fg:x="147630" fg:w="51318"/><text x="58.6279%" y="911.50">__GI___clone</text></g><g><title>start_thread (51,318 samples, 20.29%)</title><rect x="58.3779%" y="885" width="20.2929%" height="15" fill="rgb(238,103,29)" fg:x="147630" fg:w="51318"/><text x="58.6279%" y="895.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (51,318 samples, 20.29%)</title><rect x="58.3779%" y="869" width="20.2929%" height="15" fill="rgb(233,195,47)" fg:x="147630" fg:w="51318"/><text x="58.6279%" y="879.50">std::sys::unix::thread::Thread::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (51,318 samples, 20.29%)</title><rect x="58.3779%" y="853" width="20.2929%" height="15" fill="rgb(246,218,30)" fg:x="147630" fg:w="51318"/><text x="58.6279%" y="863.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (51,318 samples, 20.29%)</title><rect x="58.3779%" y="837" width="20.2929%" height="15" fill="rgb(219,145,47)" fg:x="147630" fg:w="51318"/><text x="58.6279%" y="847.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (51,318 samples, 20.29%)</title><rect x="58.3779%" y="821" width="20.2929%" height="15" fill="rgb(243,12,26)" fg:x="147630" fg:w="51318"/><text x="58.6279%" y="831.50">core::ops::function::FnOnce::cal..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (51,318 samples, 20.29%)</title><rect x="58.3779%" y="805" width="20.2929%" height="15" fill="rgb(214,87,16)" fg:x="147630" fg:w="51318"/><text x="58.6279%" y="815.50">std::thread::Builder::spawn_unch..</text></g><g><title>copy_user_enhanced_fast_string (43 samples, 0.02%)</title><rect x="78.6782%" y="757" width="0.0170%" height="15" fill="rgb(208,99,42)" fg:x="198967" fg:w="43"/><text x="78.9282%" y="767.50"></text></g><g><title>hprof-prefetch (51,405 samples, 20.33%)</title><rect x="58.3779%" y="917" width="20.3273%" height="15" fill="rgb(253,99,2)" fg:x="147630" fg:w="51405"/><text x="58.6279%" y="927.50">hprof-prefetch</text></g><g><title>entry_SYSCALL_64_after_hwframe (85 samples, 0.03%)</title><rect x="78.6715%" y="901" width="0.0336%" height="15" fill="rgb(220,168,23)" fg:x="198950" fg:w="85"/><text x="78.9215%" y="911.50"></text></g><g><title>do_syscall_64 (85 samples, 0.03%)</title><rect x="78.6715%" y="885" width="0.0336%" height="15" fill="rgb(242,38,24)" fg:x="198950" fg:w="85"/><text x="78.9215%" y="895.50"></text></g><g><title>__x64_sys_read (80 samples, 0.03%)</title><rect x="78.6735%" y="869" width="0.0316%" height="15" fill="rgb(225,182,9)" fg:x="198955" fg:w="80"/><text x="78.9235%" y="879.50"></text></g><g><title>ksys_read (80 samples, 0.03%)</title><rect x="78.6735%" y="853" width="0.0316%" height="15" fill="rgb(243,178,37)" fg:x="198955" fg:w="80"/><text x="78.9235%" y="863.50"></text></g><g><title>vfs_read (80 samples, 0.03%)</title><rect x="78.6735%" y="837" width="0.0316%" height="15" fill="rgb(232,139,19)" fg:x="198955" fg:w="80"/><text x="78.9235%" y="847.50"></text></g><g><title>new_sync_read (80 samples, 0.03%)</title><rect x="78.6735%" y="821" width="0.0316%" height="15" fill="rgb(225,201,24)" fg:x="198955" fg:w="80"/><text x="78.9235%" y="831.50"></text></g><g><title>ext4_file_read_iter (80 samples, 0.03%)</title><rect x="78.6735%" y="805" width="0.0316%" height="15" fill="rgb(221,47,46)" fg:x="198955" fg:w="80"/><text x="78.9235%" y="815.50"></text></g><g><title>generic_file_read_iter (80 samples, 0.03%)</title><rect x="78.6735%" y="789" width="0.0316%" height="15" fill="rgb(249,23,13)" fg:x="198955" fg:w="80"/><text x="78.9235%" y="799.50"></text></g><g><title>filemap_read (80 samples, 0.03%)</title><rect x="78.6735%" y="773" width="0.0316%" height="15" fill="rgb(219,9,5)" fg:x="198955" fg:w="80"/><text x="78.9235%" y="783.50"></text></g><g><title>_int_free (59 samples, 0.02%)</title><rect x="78.7051%" y="885" width="0.0233%" height="15" fill="rgb(254,171,16)" fg:x="199035" fg:w="59"/><text x="78.9551%" y="895.50"></text></g><g><title>[anon] (63 samples, 0.02%)</title><rect x="78.7051%" y="901" width="0.0249%" height="15" fill="rgb(230,171,20)" fg:x="199035" fg:w="63"/><text x="78.9551%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;hprof_slurp::parser::record::Record&gt; (1,211 samples, 0.48%)</title><rect x="78.7478%" y="885" width="0.4789%" height="15" fill="rgb(210,71,41)" fg:x="199143" fg:w="1211"/><text x="78.9978%" y="895.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (383 samples, 0.15%)</title><rect x="79.2267%" y="885" width="0.1515%" height="15" fill="rgb(206,173,20)" fg:x="200354" fg:w="383"/><text x="79.4767%" y="895.50"></text></g><g><title>hprof_slurp::result_recorder::ResultRecorder::start::{{closure}} (383 samples, 0.15%)</title><rect x="79.2267%" y="869" width="0.1515%" height="15" fill="rgb(233,88,34)" fg:x="200354" fg:w="383"/><text x="79.4767%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (383 samples, 0.15%)</title><rect x="79.2267%" y="853" width="0.1515%" height="15" fill="rgb(223,209,46)" fg:x="200354" fg:w="383"/><text x="79.4767%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (383 samples, 0.15%)</title><rect x="79.2267%" y="837" width="0.1515%" height="15" fill="rgb(250,43,18)" fg:x="200354" fg:w="383"/><text x="79.4767%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;[hprof_slurp::parser::record::Record]&gt; (383 samples, 0.15%)</title><rect x="79.2267%" y="821" width="0.1515%" height="15" fill="rgb(208,13,10)" fg:x="200354" fg:w="383"/><text x="79.4767%" y="831.50"></text></g><g><title>[unknown] (1,640 samples, 0.65%)</title><rect x="78.7304%" y="901" width="0.6485%" height="15" fill="rgb(212,200,36)" fg:x="199099" fg:w="1640"/><text x="78.9804%" y="911.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.02%)</title><rect x="79.6878%" y="629" width="0.0249%" height="15" fill="rgb(225,90,30)" fg:x="201520" fg:w="63"/><text x="79.9378%" y="639.50"></text></g><g><title>futex_wait_queue_me (55 samples, 0.02%)</title><rect x="80.7776%" y="501" width="0.0217%" height="15" fill="rgb(236,182,39)" fg:x="204276" fg:w="55"/><text x="81.0276%" y="511.50"></text></g><g><title>schedule (54 samples, 0.02%)</title><rect x="80.7780%" y="485" width="0.0214%" height="15" fill="rgb(212,144,35)" fg:x="204277" fg:w="54"/><text x="81.0280%" y="495.50"></text></g><g><title>__schedule (53 samples, 0.02%)</title><rect x="80.7784%" y="469" width="0.0210%" height="15" fill="rgb(228,63,44)" fg:x="204278" fg:w="53"/><text x="81.0284%" y="479.50"></text></g><g><title>__x64_sys_futex (75 samples, 0.03%)</title><rect x="80.7732%" y="549" width="0.0297%" height="15" fill="rgb(228,109,6)" fg:x="204265" fg:w="75"/><text x="81.0232%" y="559.50"></text></g><g><title>do_futex (74 samples, 0.03%)</title><rect x="80.7736%" y="533" width="0.0293%" height="15" fill="rgb(238,117,24)" fg:x="204266" fg:w="74"/><text x="81.0236%" y="543.50"></text></g><g><title>futex_wait (74 samples, 0.03%)</title><rect x="80.7736%" y="517" width="0.0293%" height="15" fill="rgb(242,26,26)" fg:x="204266" fg:w="74"/><text x="81.0236%" y="527.50"></text></g><g><title>__GI___lll_lock_wait_private (96 samples, 0.04%)</title><rect x="80.7673%" y="597" width="0.0380%" height="15" fill="rgb(221,92,48)" fg:x="204250" fg:w="96"/><text x="81.0173%" y="607.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (85 samples, 0.03%)</title><rect x="80.7716%" y="581" width="0.0336%" height="15" fill="rgb(209,209,32)" fg:x="204261" fg:w="85"/><text x="81.0216%" y="591.50"></text></g><g><title>do_syscall_64 (83 samples, 0.03%)</title><rect x="80.7724%" y="565" width="0.0328%" height="15" fill="rgb(221,70,22)" fg:x="204263" fg:w="83"/><text x="81.0224%" y="575.50"></text></g><g><title>malloc_consolidate (284 samples, 0.11%)</title><rect x="80.8057%" y="597" width="0.1123%" height="15" fill="rgb(248,145,5)" fg:x="204347" fg:w="284"/><text x="81.0557%" y="607.50"></text></g><g><title>unlink_chunk.constprop.0 (47 samples, 0.02%)</title><rect x="80.8994%" y="581" width="0.0186%" height="15" fill="rgb(226,116,26)" fg:x="204584" fg:w="47"/><text x="81.1494%" y="591.50"></text></g><g><title>_int_free (1,871 samples, 0.74%)</title><rect x="80.1852%" y="613" width="0.7399%" height="15" fill="rgb(244,5,17)" fg:x="202778" fg:w="1871"/><text x="80.4352%" y="623.50"></text></g><g><title>__free (3,067 samples, 1.21%)</title><rect x="79.7127%" y="629" width="1.2128%" height="15" fill="rgb(252,159,33)" fg:x="201583" fg:w="3067"/><text x="79.9627%" y="639.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (27 samples, 0.01%)</title><rect x="86.3999%" y="613" width="0.0107%" height="15" fill="rgb(206,71,0)" fg:x="218494" fg:w="27"/><text x="86.6499%" y="623.50"></text></g><g><title>sysvec_apic_timer_interrupt (27 samples, 0.01%)</title><rect x="86.3999%" y="597" width="0.0107%" height="15" fill="rgb(233,118,54)" fg:x="218494" fg:w="27"/><text x="86.6499%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;hprof_slurp::parser::gc_record::GcRecord&gt; (2,304 samples, 0.91%)</title><rect x="86.4105%" y="613" width="0.9111%" height="15" fill="rgb(234,83,48)" fg:x="218521" fg:w="2304"/><text x="86.6605%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;hprof_slurp::parser::gc_record::ArrayValue&gt; (150 samples, 0.06%)</title><rect x="87.2623%" y="597" width="0.0593%" height="15" fill="rgb(228,3,54)" fg:x="220675" fg:w="150"/><text x="87.5123%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (20,088 samples, 7.94%)</title><rect x="79.3793%" y="677" width="7.9435%" height="15" fill="rgb(226,155,13)" fg:x="200740" fg:w="20088"/><text x="79.6293%" y="687.50">alloc::vec:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (20,088 samples, 7.94%)</title><rect x="79.3793%" y="661" width="7.9435%" height="15" fill="rgb(241,28,37)" fg:x="200740" fg:w="20088"/><text x="79.6293%" y="671.50">alloc::vec:..</text></g><g><title>core::ptr::drop_in_place&lt;[hprof_slurp::parser::record::Record]&gt; (20,088 samples, 7.94%)</title><rect x="79.3793%" y="645" width="7.9435%" height="15" fill="rgb(233,93,10)" fg:x="200740" fg:w="20088"/><text x="79.6293%" y="655.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;hprof_slurp::parser::record::Record&gt; (16,144 samples, 6.38%)</title><rect x="80.9389%" y="629" width="6.3839%" height="15" fill="rgb(225,113,19)" fg:x="204684" fg:w="16144"/><text x="81.1889%" y="639.50">core::pt..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.01%)</title><rect x="87.3228%" y="581" width="0.0134%" height="15" fill="rgb(241,2,18)" fg:x="220828" fg:w="34"/><text x="87.5728%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (34 samples, 0.01%)</title><rect x="87.3228%" y="565" width="0.0134%" height="15" fill="rgb(228,207,21)" fg:x="220828" fg:w="34"/><text x="87.5728%" y="575.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (34 samples, 0.01%)</title><rect x="87.3228%" y="549" width="0.0134%" height="15" fill="rgb(213,211,35)" fg:x="220828" fg:w="34"/><text x="87.5728%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (34 samples, 0.01%)</title><rect x="87.3228%" y="533" width="0.0134%" height="15" fill="rgb(209,83,10)" fg:x="220828" fg:w="34"/><text x="87.5728%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u64,alloc::string::String)&gt; (34 samples, 0.01%)</title><rect x="87.3228%" y="517" width="0.0134%" height="15" fill="rgb(209,164,1)" fg:x="220828" fg:w="34"/><text x="87.5728%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (34 samples, 0.01%)</title><rect x="87.3228%" y="501" width="0.0134%" height="15" fill="rgb(213,184,43)" fg:x="220828" fg:w="34"/><text x="87.5728%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (34 samples, 0.01%)</title><rect x="87.3228%" y="485" width="0.0134%" height="15" fill="rgb(231,61,34)" fg:x="220828" fg:w="34"/><text x="87.5728%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (34 samples, 0.01%)</title><rect x="87.3228%" y="469" width="0.0134%" height="15" fill="rgb(235,75,3)" fg:x="220828" fg:w="34"/><text x="87.5728%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.01%)</title><rect x="87.3228%" y="453" width="0.0134%" height="15" fill="rgb(220,106,47)" fg:x="220828" fg:w="34"/><text x="87.5728%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (33 samples, 0.01%)</title><rect x="87.3232%" y="437" width="0.0130%" height="15" fill="rgb(210,196,33)" fg:x="220829" fg:w="33"/><text x="87.5732%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (33 samples, 0.01%)</title><rect x="87.3232%" y="421" width="0.0130%" height="15" fill="rgb(229,154,42)" fg:x="220829" fg:w="33"/><text x="87.5732%" y="431.50"></text></g><g><title>__free (33 samples, 0.01%)</title><rect x="87.3232%" y="405" width="0.0130%" height="15" fill="rgb(228,114,26)" fg:x="220829" fg:w="33"/><text x="87.5732%" y="415.50"></text></g><g><title>_int_free (26 samples, 0.01%)</title><rect x="87.3260%" y="389" width="0.0103%" height="15" fill="rgb(208,144,1)" fg:x="220836" fg:w="26"/><text x="87.5760%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;ahash::hash_map::AHashMap&lt;u64,alloc::string::String&gt;&gt; (35 samples, 0.01%)</title><rect x="87.3228%" y="645" width="0.0138%" height="15" fill="rgb(239,112,37)" fg:x="220828" fg:w="35"/><text x="87.5728%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u64,alloc::string::String,ahash::random_state::RandomState&gt;&gt; (35 samples, 0.01%)</title><rect x="87.3228%" y="629" width="0.0138%" height="15" fill="rgb(210,96,50)" fg:x="220828" fg:w="35"/><text x="87.5728%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u64,alloc::string::String,ahash::random_state::RandomState&gt;&gt; (35 samples, 0.01%)</title><rect x="87.3228%" y="613" width="0.0138%" height="15" fill="rgb(222,178,2)" fg:x="220828" fg:w="35"/><text x="87.5728%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u64,alloc::string::String)&gt;&gt; (35 samples, 0.01%)</title><rect x="87.3228%" y="597" width="0.0138%" height="15" fill="rgb(226,74,18)" fg:x="220828" fg:w="35"/><text x="87.5728%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;hprof_slurp::result_recorder::ResultRecorder::start::{{closure}}&gt; (40 samples, 0.02%)</title><rect x="87.3228%" y="677" width="0.0158%" height="15" fill="rgb(225,67,54)" fg:x="220828" fg:w="40"/><text x="87.5728%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;hprof_slurp::result_recorder::ResultRecorder&gt; (40 samples, 0.02%)</title><rect x="87.3228%" y="661" width="0.0158%" height="15" fill="rgb(251,92,32)" fg:x="220828" fg:w="40"/><text x="87.5728%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (516 samples, 0.20%)</title><rect x="87.3386%" y="645" width="0.2040%" height="15" fill="rgb(228,149,22)" fg:x="220868" fg:w="516"/><text x="87.5886%" y="655.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (51 samples, 0.02%)</title><rect x="87.5225%" y="629" width="0.0202%" height="15" fill="rgb(243,54,13)" fg:x="221333" fg:w="51"/><text x="87.7725%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (51 samples, 0.02%)</title><rect x="87.5225%" y="613" width="0.0202%" height="15" fill="rgb(243,180,28)" fg:x="221333" fg:w="51"/><text x="87.7725%" y="623.50"></text></g><g><title>hprof_slurp::result_recorder::ArrayCounter::add_elements_from_array (73 samples, 0.03%)</title><rect x="94.6490%" y="629" width="0.0289%" height="15" fill="rgb(208,167,24)" fg:x="239355" fg:w="73"/><text x="94.8990%" y="639.50"></text></g><g><title>hprof_slurp::result_recorder::ClassInstanceCounter::add_instance (1,947 samples, 0.77%)</title><rect x="94.6779%" y="629" width="0.7699%" height="15" fill="rgb(245,73,45)" fg:x="239428" fg:w="1947"/><text x="94.9279%" y="639.50"></text></g><g><title>ahash::operations::folded_multiply (1,029 samples, 0.41%)</title><rect x="95.4482%" y="549" width="0.4069%" height="15" fill="rgb(237,203,48)" fg:x="241376" fg:w="1029"/><text x="95.6982%" y="559.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (742 samples, 0.29%)</title><rect x="95.5617%" y="533" width="0.2934%" height="15" fill="rgb(211,197,16)" fg:x="241663" fg:w="742"/><text x="95.8117%" y="543.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1,539 samples, 0.61%)</title><rect x="95.4482%" y="565" width="0.6086%" height="15" fill="rgb(243,99,51)" fg:x="241376" fg:w="1539"/><text x="95.6982%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (510 samples, 0.20%)</title><rect x="95.8551%" y="549" width="0.2017%" height="15" fill="rgb(215,123,29)" fg:x="242405" fg:w="510"/><text x="96.1051%" y="559.50"></text></g><g><title>&lt;hprof_slurp::parser::gc_record::FieldType as core::hash::Hash&gt;::hash (30 samples, 0.01%)</title><rect x="96.0567%" y="549" width="0.0119%" height="15" fill="rgb(239,186,37)" fg:x="242915" fg:w="30"/><text x="96.3067%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (30 samples, 0.01%)</title><rect x="96.0567%" y="533" width="0.0119%" height="15" fill="rgb(252,136,39)" fg:x="242915" fg:w="30"/><text x="96.3067%" y="543.50"></text></g><g><title>core::hash::Hasher::write_isize (30 samples, 0.01%)</title><rect x="96.0567%" y="517" width="0.0119%" height="15" fill="rgb(223,213,32)" fg:x="242915" fg:w="30"/><text x="96.3067%" y="527.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (30 samples, 0.01%)</title><rect x="96.0567%" y="501" width="0.0119%" height="15" fill="rgb(233,115,5)" fg:x="242915" fg:w="30"/><text x="96.3067%" y="511.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (30 samples, 0.01%)</title><rect x="96.0567%" y="485" width="0.0119%" height="15" fill="rgb(207,226,44)" fg:x="242915" fg:w="30"/><text x="96.3067%" y="495.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (30 samples, 0.01%)</title><rect x="96.0567%" y="469" width="0.0119%" height="15" fill="rgb(208,126,0)" fg:x="242915" fg:w="30"/><text x="96.3067%" y="479.50"></text></g><g><title>ahash::operations::folded_multiply (923 samples, 0.36%)</title><rect x="96.1995%" y="501" width="0.3650%" height="15" fill="rgb(244,66,21)" fg:x="243276" fg:w="923"/><text x="96.4495%" y="511.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (701 samples, 0.28%)</title><rect x="96.2873%" y="485" width="0.2772%" height="15" fill="rgb(222,97,12)" fg:x="243498" fg:w="701"/><text x="96.5373%" y="495.50"></text></g><g><title>hashbrown::map::make_insert_hash (2,824 samples, 1.12%)</title><rect x="95.4482%" y="597" width="1.1167%" height="15" fill="rgb(219,213,19)" fg:x="241376" fg:w="2824"/><text x="95.6982%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,824 samples, 1.12%)</title><rect x="95.4482%" y="581" width="1.1167%" height="15" fill="rgb(252,169,30)" fg:x="241376" fg:w="2824"/><text x="95.6982%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,285 samples, 0.51%)</title><rect x="96.0567%" y="565" width="0.5081%" height="15" fill="rgb(206,32,51)" fg:x="242915" fg:w="1285"/><text x="96.3067%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (1,255 samples, 0.50%)</title><rect x="96.0686%" y="549" width="0.4963%" height="15" fill="rgb(250,172,42)" fg:x="242945" fg:w="1255"/><text x="96.3186%" y="559.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (1,255 samples, 0.50%)</title><rect x="96.0686%" y="533" width="0.4963%" height="15" fill="rgb(209,34,43)" fg:x="242945" fg:w="1255"/><text x="96.3186%" y="543.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (1,255 samples, 0.50%)</title><rect x="96.0686%" y="517" width="0.4963%" height="15" fill="rgb(223,11,35)" fg:x="242945" fg:w="1255"/><text x="96.3186%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,387 samples, 0.55%)</title><rect x="96.9761%" y="565" width="0.5485%" height="15" fill="rgb(251,219,26)" fg:x="245240" fg:w="1387"/><text x="97.2261%" y="575.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1,197 samples, 0.47%)</title><rect x="97.0513%" y="549" width="0.4733%" height="15" fill="rgb(231,119,3)" fg:x="245430" fg:w="1197"/><text x="97.3013%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (676 samples, 0.27%)</title><rect x="97.5321%" y="549" width="0.2673%" height="15" fill="rgb(216,97,11)" fg:x="246646" fg:w="676"/><text x="97.7821%" y="559.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (676 samples, 0.27%)</title><rect x="97.5321%" y="533" width="0.2673%" height="15" fill="rgb(223,59,9)" fg:x="246646" fg:w="676"/><text x="97.7821%" y="543.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (660 samples, 0.26%)</title><rect x="97.5384%" y="517" width="0.2610%" height="15" fill="rgb(233,93,31)" fg:x="246662" fg:w="660"/><text x="97.7884%" y="527.50"></text></g><g><title>&lt;hprof_slurp::parser::gc_record::FieldType as core::cmp::PartialEq&gt;::eq (41 samples, 0.02%)</title><rect x="97.7994%" y="533" width="0.0162%" height="15" fill="rgb(239,81,33)" fg:x="247322" fg:w="41"/><text x="98.0494%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2,735 samples, 1.08%)</title><rect x="97.5321%" y="565" width="1.0815%" height="15" fill="rgb(213,120,34)" fg:x="246646" fg:w="2735"/><text x="97.7821%" y="575.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (2,059 samples, 0.81%)</title><rect x="97.7994%" y="549" width="0.8142%" height="15" fill="rgb(243,49,53)" fg:x="247322" fg:w="2059"/><text x="98.0494%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (2,018 samples, 0.80%)</title><rect x="97.8156%" y="533" width="0.7980%" height="15" fill="rgb(247,216,33)" fg:x="247363" fg:w="2018"/><text x="98.0656%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1,519 samples, 0.60%)</title><rect x="98.6136%" y="565" width="0.6007%" height="15" fill="rgb(226,26,14)" fg:x="249381" fg:w="1519"/><text x="98.8636%" y="575.50"></text></g><g><title>hashbrown::raw::h2 (181 samples, 0.07%)</title><rect x="99.2143%" y="565" width="0.0716%" height="15" fill="rgb(215,49,53)" fg:x="250900" fg:w="181"/><text x="99.4643%" y="575.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (561 samples, 0.22%)</title><rect x="99.2858%" y="565" width="0.2218%" height="15" fill="rgb(245,162,40)" fg:x="251081" fg:w="561"/><text x="99.5358%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (561 samples, 0.22%)</title><rect x="99.2858%" y="549" width="0.2218%" height="15" fill="rgb(229,68,17)" fg:x="251081" fg:w="561"/><text x="99.5358%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (561 samples, 0.22%)</title><rect x="99.2858%" y="533" width="0.2218%" height="15" fill="rgb(213,182,10)" fg:x="251081" fg:w="561"/><text x="99.5358%" y="543.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (920 samples, 0.36%)</title><rect x="99.5077%" y="565" width="0.3638%" height="15" fill="rgb(245,125,30)" fg:x="251642" fg:w="920"/><text x="99.7577%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (920 samples, 0.36%)</title><rect x="99.5077%" y="549" width="0.3638%" height="15" fill="rgb(232,202,2)" fg:x="251642" fg:w="920"/><text x="99.7577%" y="559.50"></text></g><g><title>hprof_slurp::result_recorder::ResultRecorder::record_records (31,921 samples, 12.62%)</title><rect x="87.3386%" y="677" width="12.6226%" height="15" fill="rgb(237,140,51)" fg:x="220868" fg:w="31921"/><text x="87.5886%" y="687.50">hprof_slurp::result..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (31,921 samples, 12.62%)</title><rect x="87.3386%" y="661" width="12.6226%" height="15" fill="rgb(236,157,25)" fg:x="220868" fg:w="31921"/><text x="87.5886%" y="671.50">&lt;core::slice::iter:..</text></g><g><title>hprof_slurp::result_recorder::ResultRecorder::record_records::{{closure}} (31,405 samples, 12.42%)</title><rect x="87.5427%" y="645" width="12.4186%" height="15" fill="rgb(219,209,0)" fg:x="221384" fg:w="31405"/><text x="87.7927%" y="655.50">hprof_slurp::result..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (11,413 samples, 4.51%)</title><rect x="95.4482%" y="629" width="4.5131%" height="15" fill="rgb(240,116,54)" fg:x="241376" fg:w="11413"/><text x="95.6982%" y="639.50">std::..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (11,413 samples, 4.51%)</title><rect x="95.4482%" y="613" width="4.5131%" height="15" fill="rgb(216,10,36)" fg:x="241376" fg:w="11413"/><text x="95.6982%" y="623.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (8,589 samples, 3.40%)</title><rect x="96.5649%" y="597" width="3.3964%" height="15" fill="rgb(222,72,44)" fg:x="244200" fg:w="8589"/><text x="96.8149%" y="607.50">has..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (8,589 samples, 3.40%)</title><rect x="96.5649%" y="581" width="3.3964%" height="15" fill="rgb(232,159,9)" fg:x="244200" fg:w="8589"/><text x="96.8149%" y="591.50">has..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (227 samples, 0.09%)</title><rect x="99.8715%" y="565" width="0.0898%" height="15" fill="rgb(210,39,32)" fg:x="252562" fg:w="227"/><text x="100.1215%" y="575.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (227 samples, 0.09%)</title><rect x="99.8715%" y="549" width="0.0898%" height="15" fill="rgb(216,194,45)" fg:x="252562" fg:w="227"/><text x="100.1215%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (227 samples, 0.09%)</title><rect x="99.8715%" y="533" width="0.0898%" height="15" fill="rgb(218,18,35)" fg:x="252562" fg:w="227"/><text x="100.1215%" y="543.50"></text></g><g><title>__GI___clone (52,068 samples, 20.59%)</title><rect x="79.3789%" y="901" width="20.5894%" height="15" fill="rgb(207,83,51)" fg:x="200739" fg:w="52068"/><text x="79.6289%" y="911.50">__GI___clone</text></g><g><title>start_thread (52,068 samples, 20.59%)</title><rect x="79.3789%" y="885" width="20.5894%" height="15" fill="rgb(225,63,43)" fg:x="200739" fg:w="52068"/><text x="79.6289%" y="895.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (52,068 samples, 20.59%)</title><rect x="79.3789%" y="869" width="20.5894%" height="15" fill="rgb(207,57,36)" fg:x="200739" fg:w="52068"/><text x="79.6289%" y="879.50">std::sys::unix::thread::Thread::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (52,068 samples, 20.59%)</title><rect x="79.3789%" y="853" width="20.5894%" height="15" fill="rgb(216,99,33)" fg:x="200739" fg:w="52068"/><text x="79.6289%" y="863.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (52,068 samples, 20.59%)</title><rect x="79.3789%" y="837" width="20.5894%" height="15" fill="rgb(225,42,16)" fg:x="200739" fg:w="52068"/><text x="79.6289%" y="847.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (52,068 samples, 20.59%)</title><rect x="79.3789%" y="821" width="20.5894%" height="15" fill="rgb(220,201,45)" fg:x="200739" fg:w="52068"/><text x="79.6289%" y="831.50">core::ops::function::FnOnce::cal..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (52,068 samples, 20.59%)</title><rect x="79.3789%" y="805" width="20.5894%" height="15" fill="rgb(225,33,4)" fg:x="200739" fg:w="52068"/><text x="79.6289%" y="815.50">std::thread::Builder::spawn_unch..</text></g><g><title>std::panic::catch_unwind (52,068 samples, 20.59%)</title><rect x="79.3789%" y="789" width="20.5894%" height="15" fill="rgb(224,33,50)" fg:x="200739" fg:w="52068"/><text x="79.6289%" y="799.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (52,068 samples, 20.59%)</title><rect x="79.3789%" y="773" width="20.5894%" height="15" fill="rgb(246,198,51)" fg:x="200739" fg:w="52068"/><text x="79.6289%" y="783.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (52,068 samples, 20.59%)</title><rect x="79.3789%" y="757" width="20.5894%" height="15" fill="rgb(205,22,4)" fg:x="200739" fg:w="52068"/><text x="79.6289%" y="767.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (52,068 samples, 20.59%)</title><rect x="79.3789%" y="741" width="20.5894%" height="15" fill="rgb(206,3,8)" fg:x="200739" fg:w="52068"/><text x="79.6289%" y="751.50">&lt;core::panic::unwind_safe::Asser..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (52,068 samples, 20.59%)</title><rect x="79.3789%" y="725" width="20.5894%" height="15" fill="rgb(251,23,15)" fg:x="200739" fg:w="52068"/><text x="79.6289%" y="735.50">std::thread::Builder::spawn_unch..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (52,068 samples, 20.59%)</title><rect x="79.3789%" y="709" width="20.5894%" height="15" fill="rgb(252,88,28)" fg:x="200739" fg:w="52068"/><text x="79.6289%" y="719.50">std::sys_common::backtrace::__ru..</text></g><g><title>hprof_slurp::result_recorder::ResultRecorder::start::{{closure}} (52,068 samples, 20.59%)</title><rect x="79.3789%" y="693" width="20.5894%" height="15" fill="rgb(212,127,14)" fg:x="200739" fg:w="52068"/><text x="79.6289%" y="703.50">hprof_slurp::result_recorder::Re..</text></g><g><title>hprof-recorder (53,787 samples, 21.27%)</title><rect x="78.7051%" y="917" width="21.2692%" height="15" fill="rgb(247,145,37)" fg:x="199035" fg:w="53787"/><text x="78.9551%" y="927.50">hprof-recorder</text></g><g><title>_start (31 samples, 0.01%)</title><rect x="99.9826%" y="901" width="0.0123%" height="15" fill="rgb(209,117,53)" fg:x="252843" fg:w="31"/><text x="100.2326%" y="911.50"></text></g><g><title>__libc_start_main_alias_2 (31 samples, 0.01%)</title><rect x="99.9826%" y="885" width="0.0123%" height="15" fill="rgb(212,90,42)" fg:x="252843" fg:w="31"/><text x="100.2326%" y="895.50"></text></g><g><title>__libc_start_call_main (31 samples, 0.01%)</title><rect x="99.9826%" y="869" width="0.0123%" height="15" fill="rgb(218,164,37)" fg:x="252843" fg:w="31"/><text x="100.2326%" y="879.50"></text></g><g><title>main (31 samples, 0.01%)</title><rect x="99.9826%" y="853" width="0.0123%" height="15" fill="rgb(246,65,34)" fg:x="252843" fg:w="31"/><text x="100.2326%" y="863.50"></text></g><g><title>std::rt::lang_start_internal (31 samples, 0.01%)</title><rect x="99.9826%" y="837" width="0.0123%" height="15" fill="rgb(231,100,33)" fg:x="252843" fg:w="31"/><text x="100.2326%" y="847.50"></text></g><g><title>std::panic::catch_unwind (31 samples, 0.01%)</title><rect x="99.9826%" y="821" width="0.0123%" height="15" fill="rgb(228,126,14)" fg:x="252843" fg:w="31"/><text x="100.2326%" y="831.50"></text></g><g><title>std::panicking::try (31 samples, 0.01%)</title><rect x="99.9826%" y="805" width="0.0123%" height="15" fill="rgb(215,173,21)" fg:x="252843" fg:w="31"/><text x="100.2326%" y="815.50"></text></g><g><title>std::panicking::try::do_call (31 samples, 0.01%)</title><rect x="99.9826%" y="789" width="0.0123%" height="15" fill="rgb(210,6,40)" fg:x="252843" fg:w="31"/><text x="100.2326%" y="799.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (31 samples, 0.01%)</title><rect x="99.9826%" y="773" width="0.0123%" height="15" fill="rgb(212,48,18)" fg:x="252843" fg:w="31"/><text x="100.2326%" y="783.50"></text></g><g><title>std::panic::catch_unwind (31 samples, 0.01%)</title><rect x="99.9826%" y="757" width="0.0123%" height="15" fill="rgb(230,214,11)" fg:x="252843" fg:w="31"/><text x="100.2326%" y="767.50"></text></g><g><title>std::panicking::try (31 samples, 0.01%)</title><rect x="99.9826%" y="741" width="0.0123%" height="15" fill="rgb(254,105,39)" fg:x="252843" fg:w="31"/><text x="100.2326%" y="751.50"></text></g><g><title>std::panicking::try::do_call (31 samples, 0.01%)</title><rect x="99.9826%" y="725" width="0.0123%" height="15" fill="rgb(245,158,5)" fg:x="252843" fg:w="31"/><text x="100.2326%" y="735.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (31 samples, 0.01%)</title><rect x="99.9826%" y="709" width="0.0123%" height="15" fill="rgb(249,208,11)" fg:x="252843" fg:w="31"/><text x="100.2326%" y="719.50"></text></g><g><title>std::rt::lang_start::{{closure}} (31 samples, 0.01%)</title><rect x="99.9826%" y="693" width="0.0123%" height="15" fill="rgb(210,39,28)" fg:x="252843" fg:w="31"/><text x="100.2326%" y="703.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (31 samples, 0.01%)</title><rect x="99.9826%" y="677" width="0.0123%" height="15" fill="rgb(211,56,53)" fg:x="252843" fg:w="31"/><text x="100.2326%" y="687.50"></text></g><g><title>core::ops::function::FnOnce::call_once (31 samples, 0.01%)</title><rect x="99.9826%" y="661" width="0.0123%" height="15" fill="rgb(226,201,30)" fg:x="252843" fg:w="31"/><text x="100.2326%" y="671.50"></text></g><g><title>hprof_slurp::main (31 samples, 0.01%)</title><rect x="99.9826%" y="645" width="0.0123%" height="15" fill="rgb(239,101,34)" fg:x="252843" fg:w="31"/><text x="100.2326%" y="655.50"></text></g><g><title>hprof_slurp::main_result (31 samples, 0.01%)</title><rect x="99.9826%" y="629" width="0.0123%" height="15" fill="rgb(226,209,5)" fg:x="252843" fg:w="31"/><text x="100.2326%" y="639.50"></text></g><g><title>hprof_slurp::slurp::slurp_file (31 samples, 0.01%)</title><rect x="99.9826%" y="613" width="0.0123%" height="15" fill="rgb(250,105,47)" fg:x="252843" fg:w="31"/><text x="100.2326%" y="623.50"></text></g><g><title>hprof-slurp (60 samples, 0.02%)</title><rect x="99.9743%" y="917" width="0.0237%" height="15" fill="rgb(230,72,3)" fg:x="252822" fg:w="60"/><text x="100.2243%" y="927.50"></text></g><g><title>all (252,887 samples, 100%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(232,218,39)" fg:x="0" fg:w="252887"/><text x="0.2500%" y="943.50"></text></g></svg></svg>